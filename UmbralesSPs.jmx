<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.4" jmeter="2.9 r1437961">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Plan de Pruebas - Procedimientos Umbral" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables definidas por el Usuario" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Funcionalidad" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <longProp name="ThreadGroup.start_time">1342842324000</longProp>
        <longProp name="ThreadGroup.end_time">1342842324000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables definidas por el Usuario" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="ESTATUS_BD_MBS" elementType="Argument">
              <stringProp name="Argument.name">ESTATUS_BD_MBS</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="COMODIN" elementType="Argument">
              <stringProp name="Argument.name">COMODIN</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="NUM_REG_UMBRAL_TIPO_LLAMADA" elementType="Argument">
              <stringProp name="Argument.name">NUM_REG_UMBRAL_TIPO_LLAMADA</stringProp>
              <stringProp name="Argument.value">-1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Peticion JDBC - Validando conexion con la BD" enabled="true">
          <stringProp name="dataSource">POOL_MBS</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select 1 as ESTATUS_BD_MBS;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">ESTATUS_BD_MBS</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="TestPlan.comments">Validando la conexion con la BD</stringProp>
        </JDBCSampler>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Par치metros de Usuario" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-1335096151">ESTATUS_BD_MBS</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="85068">
                <stringProp name="48">0</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49">1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">ESTATUS_BD_MBS_1</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Controlador If - Si hay BD disponible" enabled="true">
          <stringProp name="TestPlan.comments">Si la BD esta disponible que continue con la ejecucion de los scripts</stringProp>
          <stringProp name="IfController.condition">${ESTATUS_BD_MBS_1}==1</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Controlador Transaction - Valida estructura de tablas" enabled="false">
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Petici칩n JDBC - Recuperando la estructura actual de la tabla umbral_tipo_llamada" enabled="false">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select ID_UMBRAL_TLL,
PLN_CLAVE,
GRUPO_CIUDAD,
GRUPO_PAIS,
TLL_CLAVE,
UMBRAL,
UMBRAL_EVENTO,
TIPO_COBRO,
STATUS_COBRO,
POR_CUENTA,
UMBRAL_LC,
USU_MOD,
USU_REG,
FEC_MOD,
FEC_REG,
GRUPO_TLL_CLAVE_UMBRAL_X
FROM umbral_tipo_llamada 
limit 1;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">NUM_REG_UMBRAL_TIPO_LLAMADA</stringProp>
              <stringProp name="resultVariable"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Controlador If - valida si la estructura de la tabla ha sufrido cambios." enabled="false">
            <stringProp name="TestPlan.comments">Se esta considerando cualquier cambio, desde un valor default hasta un nuevo campo.</stringProp>
            <stringProp name="IfController.condition">${NUM_REG_UMBRAL_TIPO_LLAMADA_#}==0</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Notificacion por correo - la esctructura de la tabla umbral_tipo_llamada cambio" enabled="true">
              <boolProp name="TransactionController.parent">false</boolProp>
              <stringProp name="TestPlan.comments">Se esta considerando cualquier cambio, desde un valor default hasta un nuevo campo.</stringProp>
            </TransactionController>
            <hashTree>
              <SmtpSampler guiclass="SmtpSamplerGui" testclass="SmtpSampler" testname="SMTP - Notificacion por correo del cambio" enabled="true">
                <stringProp name="SMTPSampler.server">172.16.3.9</stringProp>
                <stringProp name="SMTPSampler.serverPort">25</stringProp>
                <stringProp name="SMTPSampler.mailFrom">pruebas_SPs_umbrales@control</stringProp>
                <stringProp name="SMTPSampler.replyTo"></stringProp>
                <stringProp name="SMTPSampler.receiverTo">nelson.castelar@maxcom.com</stringProp>
                <stringProp name="SMTPSampler.receiverCC"></stringProp>
                <stringProp name="SMTPSampler.receiverBCC"></stringProp>
                <stringProp name="SMTPSampler.subject">Warning al ejecutar las pruebas de los SPs de Umbral</stringProp>
                <stringProp name="SMTPSampler.suppressSubject">false</stringProp>
                <stringProp name="SMTPSampler.include_timestamp">false</stringProp>
                <stringProp name="SMTPSampler.message">Se detecto que la estructura de la tabla &quot;umbral_tipo_llamada cambio&quot;.

Es posible que esto pueda generar errores en las pruebas, favor de validar.

Para mas informaci칩n abrir la siguiente URL:

http://localhost:8080/jenkins/job/Umbrales2/

http://localhost:8080/jenkins/job/Umbrales2/lastBuild/performance/</stringProp>
                <stringProp name="SMTPSampler.plainBody">false</stringProp>
                <stringProp name="SMTPSampler.attachFile"></stringProp>
                <stringProp name="SMTPSampler.useSSL">false</stringProp>
                <stringProp name="SMTPSampler.useStartTLS">false</stringProp>
                <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
                <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
                <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
                <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
                <boolProp name="SMTPSampler.use_eml">false</boolProp>
                <stringProp name="SMTPSampler.emlMessageToSend"></stringProp>
                <stringProp name="SMTPSampler.useAuth">false</stringProp>
                <stringProp name="SMTPSampler.password"></stringProp>
                <stringProp name="SMTPSampler.username"></stringProp>
                <stringProp name="SMTPSampler.messageSizeStatistics">false</stringProp>
                <stringProp name="SMTPSampler.enableDebug">false</stringProp>
                <collectionProp name="SMTPSampler.headerFields"/>
              </SmtpSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Activa la bandera de conexion de BD exitosa" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">vars.put(&quot;ESTATUS_BD_MBS&quot;,    &quot;1&quot;);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="SP -&gt; MBS.sp_Insert_in_CstoAboCon_from_Abonado" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 01 - Activacion de un umbral donde el plan no existe en la tabla &quot;umbral_tipo_llamada&quot;" enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inABO_CLIENTE varchar(10)   -&gt; Clave del cliente
-- 2.- inABO_MDN varchar(10),          -&gt; Clave del abonado
-- 3.- inABO_GPO_T varchar(10),      -&gt; Grupo al que pertenece el abonado
-- 4.- inABO_CIC_CVE varchar(10),  -&gt; Ciclo del abonado
-- 5.- inPLN_CLAVE varchar(10),       -&gt; Plan del abonado
-- 6.- inABO_EDOA_T varchar(4)        -&gt; Estatus o estado del abonado

/*
call sp_Insert_in_CstoAboCon_from_Abonado(NEW.ABO_CLIENTE,
                                          NEW.ABO_MDN,
                                          NEW.ABO_GPO_T,
                                          NEW.CIC_CLAVE,
                                          NEW.PLN_CLAVE,
                                          NEW.ABO_EDOA_T);
*/

call sp_Insert_in_CstoAboCon_from_Abonado(?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${ABO_CLIENTE},${ABO_MDN},${ABO_GPO_T},${ABO_CIC_CVE},${PLN_CLAVE},${ABO_EDOA_T}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que no se registre nada en la tabla &quot;csto_abo_consumo&quot;</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000001&quot;);
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000001&quot;);
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_ERROR&quot;);
vars.put(&quot;ABO_EDOA_T&quot;,    &quot;A&quot;);
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

delete from csto_abo_consumo where ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

delete from umbral_tipo_llamada where PLN_CLAVE = &apos;${PLN_CLAVE}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Validando la tabla csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">SELECT count(1) 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 02 - Activacion de un umbral configurado con un solo tipo de llamada(tll_clave), el umbral para este tipo de llamada no es a nivel de cuenta. El estatus del abonado es activo(A) y es de ciclo 2." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inABO_CLIENTE varchar(10)   -&gt; Clave del cliente
-- 2.- inABO_MDN varchar(10),          -&gt; Clave del abonado
-- 3.- inABO_GPO_T varchar(10),      -&gt; Grupo al que pertenece el abonado
-- 4.- inABO_CIC_CVE varchar(10),  -&gt; Ciclo del abonado
-- 5.- inPLN_CLAVE varchar(10),       -&gt; Plan del abonado
-- 6.- inABO_EDOA_T varchar(4)        -&gt; Estatus o estado del abonado

/*
call sp_Insert_in_CstoAboCon_from_Abonado(NEW.ABO_CLIENTE,
                                          NEW.ABO_MDN,
                                          NEW.ABO_GPO_T,
                                          NEW.CIC_CLAVE,
                                          NEW.PLN_CLAVE,
                                          NEW.ABO_EDOA_T);
*/

call sp_Insert_in_CstoAboCon_from_Abonado(?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${ABO_CLIENTE},${ABO_MDN},${ABO_GPO_T},${ABO_CIC_CVE},${PLN_CLAVE},${ABO_EDOA_T}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada del SP
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000002&quot;);      // Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000002&quot;);         // Clave del abonado
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);                    // Grupo al que pertenece el abonado
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      // Ciclo al que pertenece el abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TESTOK&quot;);   // Clave del plan
vars.put(&quot;ABO_EDOA_T&quot;,    &quot;A&quot;);                        // Estatus del abonado

// Valores umbral_tipo_llamada
vars.put(&quot;TLL_CLAVE&quot;,  &quot;4&quot;);                                         // Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;UMBRAL&quot;,  &quot;1&quot;);                                               // 
vars.put(&quot;UMBRAL_EVENTO&quot;,  &quot;3000&quot;);                      // Consumo disponible en minutos
vars.put(&quot;TIPO_COBRO&quot;,  &quot;0&quot;);                                      // Tipo de cobro
vars.put(&quot;STATUS_COBRO&quot;,  &quot;0&quot;);                                // Estatus oara el tipo de cobro: 1-Seguir cobrando, 2- Cortar
vars.put(&quot;POR_CUENTA&quot;,  &quot;0&quot;);                      // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;UMBRAL_LC&quot;,  &quot;0&quot;);                                        // Bandera que indica si el umbral es de limite de credito ( LC ):  1 - Es de LC,  0 - No es de LC
vars.put(&quot;USU_REG&quot;,  &quot;CAMN9999&quot;);                          // Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL&quot;,  &quot;0&quot;);      // Grupo de clave de umbral

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM umbral_tipo_llamada 
WHERE PLN_CLAVE = &apos;${PLN_CLAVE}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE}&apos;,0,0,${TLL_CLAVE},${UMBRAL},
                   ${UMBRAL_EVENTO},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto que el umbral este creado con las caracteristicas configuradas

SELECT count(1) 
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = 0
   AND PRECIO_ALT = 0
   AND CONSUMO_ANT = 0
   AND CONSUMO_EVENTO_ANT = 0
   AND ESTATUS = IF( (&apos;${ABO_EDOA_T}&apos;=&apos;B&apos; || &apos;${ABO_EDOA_T}&apos;=&apos;D&apos;) ,0,1)
   AND TIPO_REG = &apos;C&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 03 - Activacion de un umbral configurado con un solo tipo de llamada(tll_clave), el umbral para este tipo de llamada es a nivel de cuenta. El estatus de abonado es activo(A) y es de ciclo 2." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inABO_CLIENTE varchar(10)   -&gt; Clave del cliente
-- 2.- inABO_MDN varchar(10),          -&gt; Clave del abonado
-- 3.- inABO_GPO_T varchar(10),      -&gt; Grupo al que pertenece el abonado
-- 4.- inABO_CIC_CVE varchar(10),  -&gt; Ciclo del abonado
-- 5.- inPLN_CLAVE varchar(10),       -&gt; Plan del abonado
-- 6.- inABO_EDOA_T varchar(4)        -&gt; Estatus o estado del abonado

/*
call sp_Insert_in_CstoAboCon_from_Abonado(NEW.ABO_CLIENTE,
                                          NEW.ABO_MDN,
                                          NEW.ABO_GPO_T,
                                          NEW.CIC_CLAVE,
                                          NEW.PLN_CLAVE,
                                          NEW.ABO_EDOA_T);
*/

call sp_Insert_in_CstoAboCon_from_Abonado(?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${ABO_CLIENTE},${ABO_MDN},${ABO_GPO_T},${ABO_CIC_CVE},${PLN_CLAVE},${ABO_EDOA_T}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada del SP
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000003&quot;);      // Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000003&quot;);         // Clave del abonado
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);                    // Grupo al que pertenece el abonado
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      // Ciclo al que pertenece el abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TESTOK&quot;);   // Clave del plan
vars.put(&quot;ABO_EDOA_T&quot;,    &quot;A&quot;);                        // Estatus del abonado

// Valores umbral_tipo_llamada
vars.put(&quot;TLL_CLAVE&quot;,  &quot;4&quot;);                                         // Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;UMBRAL&quot;,  &quot;1&quot;);                                               // 
vars.put(&quot;UMBRAL_EVENTO&quot;,  &quot;3000&quot;);                      // Consumo disponible en minutos
vars.put(&quot;TIPO_COBRO&quot;,  &quot;0&quot;);                                      // Tipo de cobro
vars.put(&quot;STATUS_COBRO&quot;,  &quot;0&quot;);                                // Estatus oara el tipo de cobro: 1-Seguir cobrando, 2- Cortar
vars.put(&quot;POR_CUENTA&quot;,  &quot;1&quot;);                         // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;UMBRAL_LC&quot;,  &quot;0&quot;);                                        // Bandera que indica si el umbral es de limite de credito ( LC ):  1 - Es de LC,  0 - No es de LC
vars.put(&quot;USU_REG&quot;,  &quot;CAMN9999&quot;);                          // Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL&quot;,  &quot;0&quot;);      // Grupo de clave de umbral

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ABO_MDN_ALL&quot;,    &quot;ALL&quot;);                             // Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM umbral_tipo_llamada 
WHERE PLN_CLAVE = &apos;${PLN_CLAVE}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE}&apos;,0,0,${TLL_CLAVE},${UMBRAL},
                   ${UMBRAL_EVENTO},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto que el umbral este creado con las caracteristicas configuradas

SELECT count(1) 
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = 0
   AND PRECIO_ALT = 0
   AND CONSUMO_ANT = 0
   AND CONSUMO_EVENTO_ANT = 0
   AND ESTATUS = IF( (&apos;${ABO_EDOA_T}&apos;=&apos;B&apos; || &apos;${ABO_EDOA_T}&apos;=&apos;D&apos;) ,0,1)
   AND TIPO_REG = &apos;C&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 04 - Activacion de un umbral configurado con un solo tipo de llamada(tll_clave), el umbral para este tipo de llamada es a nivel de abonado. El estatus de abonado es inactivo(B) y es de ciclo 2." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inABO_CLIENTE varchar(10)   -&gt; Clave del cliente
-- 2.- inABO_MDN varchar(10),          -&gt; Clave del abonado
-- 3.- inABO_GPO_T varchar(10),      -&gt; Grupo al que pertenece el abonado
-- 4.- inABO_CIC_CVE varchar(10),  -&gt; Ciclo del abonado
-- 5.- inPLN_CLAVE varchar(10),       -&gt; Plan del abonado
-- 6.- inABO_EDOA_T varchar(4)        -&gt; Estatus o estado del abonado

/*
call sp_Insert_in_CstoAboCon_from_Abonado(NEW.ABO_CLIENTE,
                                          NEW.ABO_MDN,
                                          NEW.ABO_GPO_T,
                                          NEW.CIC_CLAVE,
                                          NEW.PLN_CLAVE,
                                          NEW.ABO_EDOA_T);
*/

call sp_Insert_in_CstoAboCon_from_Abonado(?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${ABO_CLIENTE},${ABO_MDN},${ABO_GPO_T},${ABO_CIC_CVE},${PLN_CLAVE},${ABO_EDOA_T}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada del SP
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000004&quot;);      // Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000004&quot;);         // Clave del abonado
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);                    // Grupo al que pertenece el abonado
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      // Ciclo al que pertenece el abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TESTOK&quot;);   // Clave del plan
vars.put(&quot;ABO_EDOA_T&quot;,    &quot;B&quot;);                        // Estatus del abonado

// Valores umbral_tipo_llamada
vars.put(&quot;TLL_CLAVE&quot;,  &quot;4&quot;);                                         // Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;UMBRAL&quot;,  &quot;1&quot;);                                               // 
vars.put(&quot;UMBRAL_EVENTO&quot;,  &quot;3000&quot;);                      // Consumo disponible en minutos
vars.put(&quot;TIPO_COBRO&quot;,  &quot;0&quot;);                                      // Tipo de cobro
vars.put(&quot;STATUS_COBRO&quot;,  &quot;0&quot;);                                // Estatus oara el tipo de cobro: 1-Seguir cobrando, 2- Cortar
vars.put(&quot;POR_CUENTA&quot;,  &quot;0&quot;);                        // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;UMBRAL_LC&quot;,  &quot;0&quot;);                                        // Bandera que indica si el umbral es de limite de credito ( LC ):  1 - Es de LC,  0 - No es de LC
vars.put(&quot;USU_REG&quot;,  &quot;CAMN9999&quot;);                          // Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL&quot;,  &quot;0&quot;);      // Grupo de clave de umbral

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ABO_MDN_ALL&quot;,    &quot;ALL&quot;);                             // Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM umbral_tipo_llamada 
WHERE PLN_CLAVE = &apos;${PLN_CLAVE}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE}&apos;,0,0,${TLL_CLAVE},${UMBRAL},
                   ${UMBRAL_EVENTO},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto que el umbral este creado con las caracteristicas configuradas

SELECT count(1) 
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = 0
   AND PRECIO_ALT = 0
   AND CONSUMO_ANT = 0
   AND CONSUMO_EVENTO_ANT = 0
   AND ESTATUS = IF( (&apos;${ABO_EDOA_T}&apos;=&apos;B&apos; || &apos;${ABO_EDOA_T}&apos;=&apos;D&apos;) ,0,1)
   AND TIPO_REG = &apos;C&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 05 - Activacion de dos umbrales configurados como tipo de llamada(tll_clave), ambos umbrales de tipo de llamada son a nivel de abonado. El estatus de abonado es activo(A) y es de ciclo 2." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inABO_CLIENTE varchar(10)   -&gt; Clave del cliente
-- 2.- inABO_MDN varchar(10),          -&gt; Clave del abonado
-- 3.- inABO_GPO_T varchar(10),      -&gt; Grupo al que pertenece el abonado
-- 4.- inABO_CIC_CVE varchar(10),  -&gt; Ciclo del abonado
-- 5.- inPLN_CLAVE varchar(10),       -&gt; Plan del abonado
-- 6.- inABO_EDOA_T varchar(4)        -&gt; Estatus o estado del abonado

/*
call sp_Insert_in_CstoAboCon_from_Abonado(NEW.ABO_CLIENTE,
                                          NEW.ABO_MDN,
                                          NEW.ABO_GPO_T,
                                          NEW.CIC_CLAVE,
                                          NEW.PLN_CLAVE,
                                          NEW.ABO_EDOA_T);
*/

call sp_Insert_in_CstoAboCon_from_Abonado(?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${ABO_CLIENTE},${ABO_MDN},${ABO_GPO_T},${ABO_CIC_CVE},${PLN_CLAVE},${ABO_EDOA_T}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada del SP
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000005&quot;);      // Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000005&quot;);         // Clave del abonado
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);                    // Grupo al que pertenece el abonado
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      // Ciclo al que pertenece el abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TESTOK&quot;);   // Clave del plan
vars.put(&quot;ABO_EDOA_T&quot;,    &quot;A&quot;);                        // Estatus del abonado

// Valores umbral_tipo_llamada
vars.put(&quot;TLL_CLAVE&quot;,  &quot;4&quot;);                                         // Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;TLL_CLAVE_B&quot;,  &quot;5&quot;);                                    // Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;UMBRAL&quot;,  &quot;1&quot;);                                               // 
vars.put(&quot;UMBRAL_EVENTO&quot;,  &quot;3000&quot;);                      // Consumo disponible en minutos
vars.put(&quot;TIPO_COBRO&quot;,  &quot;0&quot;);                                      // Tipo de cobro
vars.put(&quot;STATUS_COBRO&quot;,  &quot;0&quot;);                                // Estatus oara el tipo de cobro: 1-Seguir cobrando, 2- Cortar
vars.put(&quot;POR_CUENTA&quot;,  &quot;0&quot;);                        // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                  // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;UMBRAL_LC&quot;,  &quot;0&quot;);                                        // Bandera que indica si el umbral es de limite de credito ( LC ):  1 - Es de LC,  0 - No es de LC
vars.put(&quot;USU_REG&quot;,  &quot;CAMN9999&quot;);                          // Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL&quot;,  &quot;0&quot;);      // Grupo de clave de umbral
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);      // Grupo de clave de umbral

vars.put(&quot;ABO_MDN_ALL&quot;,    &quot;ALL&quot;);                             // Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;NUM_REG_QUERY2&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM umbral_tipo_llamada 
WHERE PLN_CLAVE = &apos;${PLN_CLAVE}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE}&apos;,0,0,${TLL_CLAVE},${UMBRAL},
                   ${UMBRAL_EVENTO},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Segundo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE}&apos;,0,0,${TLL_CLAVE_B},${UMBRAL},
                   ${UMBRAL_EVENTO},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA_B},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto que el umbral este creado con las caracteristicas configuradas

SELECT count(1) 
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = 0
   AND PRECIO_ALT = 0
   AND CONSUMO_ANT = 0
   AND CONSUMO_EVENTO_ANT = 0
   AND ESTATUS = IF( (&apos;${ABO_EDOA_T}&apos;=&apos;B&apos; || &apos;${ABO_EDOA_T}&apos;=&apos;D&apos;) ,0,1)
   AND TIPO_REG = &apos;C&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto que el umbral este creado con las caracteristicas configuradas

SELECT count(1) 
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = 0
   AND PRECIO_ALT = 0
   AND CONSUMO_ANT = 0
   AND CONSUMO_EVENTO_ANT = 0
   AND ESTATUS = IF( (&apos;${ABO_EDOA_T}&apos;=&apos;B&apos; || &apos;${ABO_EDOA_T}&apos;=&apos;D&apos;) ,0,1)
   AND TIPO_REG = &apos;C&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG_QUERY2</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Segunda" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_QUERY2_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 06 - Activacion de dos umbrales, configurados uno con un tipo de llamada(tll_clave) y el otro con un grupo de llamada umbral(GRUPO_TLL_CLAVE_UMBRAL), ambos umbrales son a nivel de abonado. El estatus de abonado es activo(A) y es de ciclo 2." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inABO_CLIENTE varchar(10)   -&gt; Clave del cliente
-- 2.- inABO_MDN varchar(10),          -&gt; Clave del abonado
-- 3.- inABO_GPO_T varchar(10),      -&gt; Grupo al que pertenece el abonado
-- 4.- inABO_CIC_CVE varchar(10),  -&gt; Ciclo del abonado
-- 5.- inPLN_CLAVE varchar(10),       -&gt; Plan del abonado
-- 6.- inABO_EDOA_T varchar(4)        -&gt; Estatus o estado del abonado

/*
call sp_Insert_in_CstoAboCon_from_Abonado(NEW.ABO_CLIENTE,
                                          NEW.ABO_MDN,
                                          NEW.ABO_GPO_T,
                                          NEW.CIC_CLAVE,
                                          NEW.PLN_CLAVE,
                                          NEW.ABO_EDOA_T);
*/

call sp_Insert_in_CstoAboCon_from_Abonado(?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${ABO_CLIENTE},${ABO_MDN},${ABO_GPO_T},${ABO_CIC_CVE},${PLN_CLAVE},${ABO_EDOA_T}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada del SP
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000006&quot;);      // Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000006&quot;);         // Clave del abonado
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);                    // Grupo al que pertenece el abonado
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      // Ciclo al que pertenece el abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TESTOK&quot;);   // Clave del plan
vars.put(&quot;ABO_EDOA_T&quot;,    &quot;A&quot;);                        // Estatus del abonado

// Valores umbral_tipo_llamada
vars.put(&quot;TLL_CLAVE&quot;,  &quot;4&quot;);                                         // Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;TLL_CLAVE_B&quot;,  &quot;0&quot;);                                    // Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;UMBRAL&quot;,  &quot;1&quot;);                                               // 
vars.put(&quot;UMBRAL_EVENTO&quot;,  &quot;3000&quot;);                      // Consumo disponible en minutos
vars.put(&quot;TIPO_COBRO&quot;,  &quot;0&quot;);                                      // Tipo de cobro
vars.put(&quot;STATUS_COBRO&quot;,  &quot;0&quot;);                                // Estatus oara el tipo de cobro: 1-Seguir cobrando, 2- Cortar
vars.put(&quot;POR_CUENTA&quot;,  &quot;0&quot;);                        // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                  // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;UMBRAL_LC&quot;,  &quot;0&quot;);                                        // Bandera que indica si el umbral es de limite de credito ( LC ):  1 - Es de LC,  0 - No es de LC
vars.put(&quot;USU_REG&quot;,  &quot;CAMN9999&quot;);                          // Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL&quot;,  &quot;0&quot;);      // Grupo de clave de umbral
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;3&quot;);      // Grupo de clave de umbral

vars.put(&quot;ABO_MDN_ALL&quot;,    &quot;ALL&quot;);                             // Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;NUM_REG_QUERY2&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM umbral_tipo_llamada 
WHERE PLN_CLAVE = &apos;${PLN_CLAVE}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE}&apos;,0,0,${TLL_CLAVE},${UMBRAL},
                   ${UMBRAL_EVENTO},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Segundo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE}&apos;,0,0,${TLL_CLAVE_B},${UMBRAL},
                   ${UMBRAL_EVENTO},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA_B},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto que el umbral este creado con las caracteristicas configuradas

SELECT count(1) 
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = 0
   AND PRECIO_ALT = 0
   AND CONSUMO_ANT = 0
   AND CONSUMO_EVENTO_ANT = 0
   AND ESTATUS = IF( (&apos;${ABO_EDOA_T}&apos;=&apos;B&apos; || &apos;${ABO_EDOA_T}&apos;=&apos;D&apos;) ,0,1)
   AND TIPO_REG = &apos;C&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto que el umbral este creado con las caracteristicas configuradas

SELECT count(1) 
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = 0
   AND PRECIO_ALT = 0
   AND CONSUMO_ANT = 0
   AND CONSUMO_EVENTO_ANT = 0
   AND ESTATUS = IF( (&apos;${ABO_EDOA_T}&apos;=&apos;B&apos; || &apos;${ABO_EDOA_T}&apos;=&apos;D&apos;) ,0,1)
   AND TIPO_REG = &apos;C&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG_QUERY2</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Segunda" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_QUERY2_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 07 - Activacion de dos umbrales configurados los dos como tipo de llamada(tll_clave), un umbral es a nivel abonado y otro a nivel cuenta. El estatus de abonado es activo(A) y es de ciclo 2." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inABO_CLIENTE varchar(10)   -&gt; Clave del cliente
-- 2.- inABO_MDN varchar(10),          -&gt; Clave del abonado
-- 3.- inABO_GPO_T varchar(10),      -&gt; Grupo al que pertenece el abonado
-- 4.- inABO_CIC_CVE varchar(10),  -&gt; Ciclo del abonado
-- 5.- inPLN_CLAVE varchar(10),       -&gt; Plan del abonado
-- 6.- inABO_EDOA_T varchar(4)        -&gt; Estatus o estado del abonado

/*
call sp_Insert_in_CstoAboCon_from_Abonado(NEW.ABO_CLIENTE,
                                          NEW.ABO_MDN,
                                          NEW.ABO_GPO_T,
                                          NEW.CIC_CLAVE,
                                          NEW.PLN_CLAVE,
                                          NEW.ABO_EDOA_T);
*/

call sp_Insert_in_CstoAboCon_from_Abonado(?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${ABO_CLIENTE},${ABO_MDN},${ABO_GPO_T},${ABO_CIC_CVE},${PLN_CLAVE},${ABO_EDOA_T}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada del SP
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000007&quot;);      // Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000007&quot;);         // Clave del abonado
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);                    // Grupo al que pertenece el abonado
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      // Ciclo al que pertenece el abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TESTOK&quot;);   // Clave del plan
vars.put(&quot;ABO_EDOA_T&quot;,    &quot;A&quot;);                        // Estatus del abonado

// Valores umbral_tipo_llamada
vars.put(&quot;TLL_CLAVE&quot;,  &quot;4&quot;);                                         // Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;TLL_CLAVE_B&quot;,  &quot;5&quot;);                                    // Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;UMBRAL&quot;,  &quot;1&quot;);                                               // 
vars.put(&quot;UMBRAL_EVENTO&quot;,  &quot;3000&quot;);                      // Consumo disponible en minutos
vars.put(&quot;TIPO_COBRO&quot;,  &quot;0&quot;);                                      // Tipo de cobro
vars.put(&quot;STATUS_COBRO&quot;,  &quot;0&quot;);                                // Estatus oara el tipo de cobro: 1-Seguir cobrando, 2- Cortar
vars.put(&quot;POR_CUENTA&quot;,  &quot;0&quot;);                        // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;1&quot;);                  // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;UMBRAL_LC&quot;,  &quot;0&quot;);                                        // Bandera que indica si el umbral es de limite de credito ( LC ):  1 - Es de LC,  0 - No es de LC
vars.put(&quot;USU_REG&quot;,  &quot;CAMN9999&quot;);                          // Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL&quot;,  &quot;0&quot;);      // Grupo de clave de umbral
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);      // Grupo de clave de umbral

vars.put(&quot;ABO_MDN_ALL&quot;,    &quot;ALL&quot;);                             // Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;NUM_REG_QUERY2&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM umbral_tipo_llamada 
WHERE PLN_CLAVE = &apos;${PLN_CLAVE}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Segundo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE}&apos;,0,0,${TLL_CLAVE_B},${UMBRAL},
                   ${UMBRAL_EVENTO},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA_B},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE}&apos;,0,0,${TLL_CLAVE},${UMBRAL},
                   ${UMBRAL_EVENTO},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto que el umbral este creado con las caracteristicas configuradas

SELECT count(1) 
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = 0
   AND PRECIO_ALT = 0
   AND CONSUMO_ANT = 0
   AND CONSUMO_EVENTO_ANT = 0
   AND ESTATUS = IF( (&apos;${ABO_EDOA_T}&apos;=&apos;B&apos; || &apos;${ABO_EDOA_T}&apos;=&apos;D&apos;) ,0,1)
   AND TIPO_REG = &apos;C&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto que el umbral este creado con las caracteristicas configuradas

SELECT count(1) 
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = 0
   AND PRECIO_ALT = 0
   AND CONSUMO_ANT = 0
   AND CONSUMO_EVENTO_ANT = 0
   AND ESTATUS = IF( (&apos;${ABO_EDOA_T}&apos;=&apos;B&apos; || &apos;${ABO_EDOA_T}&apos;=&apos;D&apos;) ,0,1)
   AND TIPO_REG = &apos;C&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG_QUERY2</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Segunda" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_QUERY2_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Prueba 08 - Actualizacion de un umbral ya configurado en &quot;csto_abo_consumo&quot;. El umbral a nivel de abonado, y es de tipo de llamada (tll_clave) . El estatus del abonado es activo(A) y es de ciclo 2." enabled="true">
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 08 - 1.- Fase Activacion - Umbral configurado con un solo tipo de llamada(tll_clave), el umbral para este tipo de llamada es a nivel abonado. El estatus del abonado es activo(A) y ciclo 2." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Callable Statement</stringProp>
                <stringProp name="query">-- Parametros de entrada:
-- 1.- inABO_CLIENTE varchar(10)   -&gt; Clave del cliente
-- 2.- inABO_MDN varchar(10),          -&gt; Clave del abonado
-- 3.- inABO_GPO_T varchar(10),      -&gt; Grupo al que pertenece el abonado
-- 4.- inABO_CIC_CVE varchar(10),  -&gt; Ciclo del abonado
-- 5.- inPLN_CLAVE varchar(10),       -&gt; Plan del abonado
-- 6.- inABO_EDOA_T varchar(4)        -&gt; Estatus o estado del abonado

/*
call sp_Insert_in_CstoAboCon_from_Abonado(NEW.ABO_CLIENTE,
                                          NEW.ABO_MDN,
                                          NEW.ABO_GPO_T,
                                          NEW.CIC_CLAVE,
                                          NEW.PLN_CLAVE,
                                          NEW.ABO_EDOA_T);
*/

call sp_Insert_in_CstoAboCon_from_Abonado(?,?,?,?,?,?);</stringProp>
                <stringProp name="queryArguments">${ABO_CLIENTE},${ABO_MDN},${ABO_GPO_T},${ABO_CIC_CVE},${PLN_CLAVE},${ABO_EDOA_T}</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCSampler>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">// Parametros de entrada del SP
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000008&quot;);      // Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000008&quot;);         // Clave del abonado
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);                    // Grupo al que pertenece el abonado
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      // Ciclo al que pertenece el abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TESTOK&quot;);   // Clave del plan
vars.put(&quot;ABO_EDOA_T&quot;,    &quot;A&quot;);                        // Estatus del abonado

// Valores umbral_tipo_llamada
vars.put(&quot;TLL_CLAVE&quot;,  &quot;4&quot;);                                         // Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;UMBRAL&quot;,  &quot;1&quot;);                                               // 
vars.put(&quot;UMBRAL_EVENTO&quot;,  &quot;3000&quot;);                      // Consumo disponible en minutos
vars.put(&quot;TIPO_COBRO&quot;,  &quot;0&quot;);                                      // Tipo de cobro
vars.put(&quot;STATUS_COBRO&quot;,  &quot;0&quot;);                                // Estatus oara el tipo de cobro: 1-Seguir cobrando, 2- Cortar
vars.put(&quot;POR_CUENTA&quot;,  &quot;0&quot;);                      // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;UMBRAL_LC&quot;,  &quot;0&quot;);                                        // Bandera que indica si el umbral es de limite de credito ( LC ):  1 - Es de LC,  0 - No es de LC
vars.put(&quot;USU_REG&quot;,  &quot;CAMN9999&quot;);                          // Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL&quot;,  &quot;0&quot;);      // Grupo de clave de umbral

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM umbral_tipo_llamada 
WHERE PLN_CLAVE = &apos;${PLN_CLAVE}&apos;;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE}&apos;,0,0,${TLL_CLAVE},${UMBRAL},
                   ${UMBRAL_EVENTO},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL});

</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">-- Consultanto que el umbral este creado con las caracteristicas configuradas

SELECT count(1) 
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = 0
   AND PRECIO_ALT = 0
   AND CONSUMO_ANT = 0
   AND CONSUMO_EVENTO_ANT = 0
   AND ESTATUS = IF( (&apos;${ABO_EDOA_T}&apos;=&apos;B&apos; || &apos;${ABO_EDOA_T}&apos;=&apos;D&apos;) ,0,1)
   AND TIPO_REG = &apos;C&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL};</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">NUM_REG</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49">1</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">NUM_REG_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 08 - 2.- Fase Actualizacion - Umbral configurado con un solo tipo de llamada(tll_clave), el umbral para este tipo de llamada es a nivel abonado. El estatus del abonado es activo(A) y ciclo 2." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Callable Statement</stringProp>
                <stringProp name="query">-- Parametros de entrada:
-- 1.- inABO_CLIENTE varchar(10)   -&gt; Clave del cliente
-- 2.- inABO_MDN varchar(10),          -&gt; Clave del abonado
-- 3.- inABO_GPO_T varchar(10),      -&gt; Grupo al que pertenece el abonado
-- 4.- inABO_CIC_CVE varchar(10),  -&gt; Ciclo del abonado
-- 5.- inPLN_CLAVE varchar(10),       -&gt; Plan del abonado
-- 6.- inABO_EDOA_T varchar(4)        -&gt; Estatus o estado del abonado

/*
call sp_Insert_in_CstoAboCon_from_Abonado(NEW.ABO_CLIENTE,
                                          NEW.ABO_MDN,
                                          NEW.ABO_GPO_T,
                                          NEW.CIC_CLAVE,
                                          NEW.PLN_CLAVE,
                                          NEW.ABO_EDOA_T);
*/

call sp_Insert_in_CstoAboCon_from_Abonado(?,?,?,?,?,?);</stringProp>
                <stringProp name="queryArguments">${ABO_CLIENTE},${ABO_MDN},${ABO_GPO_T},${ABO_CIC_CVE},${PLN_CLAVE},${ABO_EDOA_T}</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCSampler>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">// Parametros de entrada del SP
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000008&quot;);      // Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000008&quot;);         // Clave del abonado
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);                    // Grupo al que pertenece el abonado
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      // Ciclo al que pertenece el abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TESTOK&quot;);   // Clave del plan
vars.put(&quot;ABO_EDOA_T&quot;,    &quot;A&quot;);                        // Estatus del abonado

// Valores umbral_tipo_llamada
vars.put(&quot;TLL_CLAVE&quot;,  &quot;4&quot;);                                         // Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;UMBRAL&quot;,  &quot;1&quot;);                                               // 
vars.put(&quot;UMBRAL_EVENTO&quot;,  &quot;5000&quot;);                      // Consumo disponible en minutos
vars.put(&quot;TIPO_COBRO&quot;,  &quot;0&quot;);                                      // Tipo de cobro
vars.put(&quot;STATUS_COBRO&quot;,  &quot;0&quot;);                                // Estatus oara el tipo de cobro: 1-Seguir cobrando, 2- Cortar
vars.put(&quot;POR_CUENTA&quot;,  &quot;0&quot;);                                     // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;UMBRAL_LC&quot;,  &quot;0&quot;);                                        // Bandera que indica si el umbral es de limite de credito ( LC ):  1 - Es de LC,  0 - No es de LC
vars.put(&quot;USU_REG&quot;,  &quot;CAMN9999&quot;);                          // Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL&quot;,  &quot;0&quot;);      // Grupo de clave de umbral

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM umbral_tipo_llamada 
WHERE PLN_CLAVE = &apos;${PLN_CLAVE}&apos;;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE}&apos;,0,0,${TLL_CLAVE},${UMBRAL},
                   ${UMBRAL_EVENTO},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL});

</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">-- Consultanto que el umbral este creado con las caracteristicas configuradas

SELECT count(1) 
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = 0
   AND PRECIO_ALT = 0
   AND CONSUMO_ANT = 0
   AND CONSUMO_EVENTO_ANT = 0
   AND ESTATUS = IF( (&apos;${ABO_EDOA_T}&apos;=&apos;B&apos; || &apos;${ABO_EDOA_T}&apos;=&apos;D&apos;) ,0,1)
   AND TIPO_REG = &apos;C&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL};</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">NUM_REG</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49">1</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">NUM_REG_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Prueba 09 - Actualizacion de un umbral ya configurado en &quot;csto_abo_consumo&quot;. El umbral a nivel de cuenta, y es de tipo de llamada (tll_clave) . El estatus del abonado es activo(A) y es de ciclo 2." enabled="true">
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 09 - 1.- Fase Activacion - Umbral configurado con un solo tipo de llamada(tll_clave), el umbral para este tipo de llamada es a nivel cuenta. El estatus del abonado es activo(A) y ciclo 2." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Callable Statement</stringProp>
                <stringProp name="query">-- Parametros de entrada:
-- 1.- inABO_CLIENTE varchar(10)   -&gt; Clave del cliente
-- 2.- inABO_MDN varchar(10),          -&gt; Clave del abonado
-- 3.- inABO_GPO_T varchar(10),      -&gt; Grupo al que pertenece el abonado
-- 4.- inABO_CIC_CVE varchar(10),  -&gt; Ciclo del abonado
-- 5.- inPLN_CLAVE varchar(10),       -&gt; Plan del abonado
-- 6.- inABO_EDOA_T varchar(4)        -&gt; Estatus o estado del abonado

/*
call sp_Insert_in_CstoAboCon_from_Abonado(NEW.ABO_CLIENTE,
                                          NEW.ABO_MDN,
                                          NEW.ABO_GPO_T,
                                          NEW.CIC_CLAVE,
                                          NEW.PLN_CLAVE,
                                          NEW.ABO_EDOA_T);
*/

call sp_Insert_in_CstoAboCon_from_Abonado(?,?,?,?,?,?);</stringProp>
                <stringProp name="queryArguments">${ABO_CLIENTE},${ABO_MDN},${ABO_GPO_T},${ABO_CIC_CVE},${PLN_CLAVE},${ABO_EDOA_T}</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCSampler>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">// Parametros de entrada del SP
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000009&quot;);      // Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000009&quot;);         // Clave del abonado
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);                    // Grupo al que pertenece el abonado
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      // Ciclo al que pertenece el abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TESTOK&quot;);   // Clave del plan
vars.put(&quot;ABO_EDOA_T&quot;,    &quot;A&quot;);                        // Estatus del abonado

// Valores umbral_tipo_llamada
vars.put(&quot;TLL_CLAVE&quot;,  &quot;4&quot;);                                         // Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;UMBRAL&quot;,  &quot;1&quot;);                                               // 
vars.put(&quot;UMBRAL_EVENTO&quot;,  &quot;3000&quot;);                      // Consumo disponible en minutos
vars.put(&quot;TIPO_COBRO&quot;,  &quot;0&quot;);                                      // Tipo de cobro
vars.put(&quot;STATUS_COBRO&quot;,  &quot;0&quot;);                                // Estatus oara el tipo de cobro: 1-Seguir cobrando, 2- Cortar
vars.put(&quot;POR_CUENTA&quot;,  &quot;1&quot;);                      // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;UMBRAL_LC&quot;,  &quot;0&quot;);                                        // Bandera que indica si el umbral es de limite de credito ( LC ):  1 - Es de LC,  0 - No es de LC
vars.put(&quot;USU_REG&quot;,  &quot;CAMN9999&quot;);                          // Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL&quot;,  &quot;0&quot;);      // Grupo de clave de umbral

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM umbral_tipo_llamada 
WHERE PLN_CLAVE = &apos;${PLN_CLAVE}&apos;;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE}&apos;,0,0,${TLL_CLAVE},${UMBRAL},
                   ${UMBRAL_EVENTO},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL});

</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">-- Consultanto que el umbral este creado con las caracteristicas configuradas

SELECT count(1) 
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = 0
   AND PRECIO_ALT = 0
   AND CONSUMO_ANT = 0
   AND CONSUMO_EVENTO_ANT = 0
   AND ESTATUS = IF( (&apos;${ABO_EDOA_T}&apos;=&apos;B&apos; || &apos;${ABO_EDOA_T}&apos;=&apos;D&apos;) ,0,1)
   AND TIPO_REG = &apos;C&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL};</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">NUM_REG</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49">1</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">NUM_REG_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 09 - 2.- Fase Actualizacion - Umbral configurado con un solo tipo de llamada(tll_clave), el umbral para este tipo de llamada es a nivel cuenta. El estatus del abonado es activo(A) y ciclo 2." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Callable Statement</stringProp>
                <stringProp name="query">-- Parametros de entrada:
-- 1.- inABO_CLIENTE varchar(10)   -&gt; Clave del cliente
-- 2.- inABO_MDN varchar(10),          -&gt; Clave del abonado
-- 3.- inABO_GPO_T varchar(10),      -&gt; Grupo al que pertenece el abonado
-- 4.- inABO_CIC_CVE varchar(10),  -&gt; Ciclo del abonado
-- 5.- inPLN_CLAVE varchar(10),       -&gt; Plan del abonado
-- 6.- inABO_EDOA_T varchar(4)        -&gt; Estatus o estado del abonado

/*
call sp_Insert_in_CstoAboCon_from_Abonado(NEW.ABO_CLIENTE,
                                          NEW.ABO_MDN,
                                          NEW.ABO_GPO_T,
                                          NEW.CIC_CLAVE,
                                          NEW.PLN_CLAVE,
                                          NEW.ABO_EDOA_T);
*/

call sp_Insert_in_CstoAboCon_from_Abonado(?,?,?,?,?,?);</stringProp>
                <stringProp name="queryArguments">${ABO_CLIENTE},${ABO_MDN},${ABO_GPO_T},${ABO_CIC_CVE},${PLN_CLAVE},${ABO_EDOA_T}</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCSampler>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">// Parametros de entrada del SP
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000009&quot;);      // Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000009&quot;);         // Clave del abonado
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);                    // Grupo al que pertenece el abonado
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      // Ciclo al que pertenece el abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TESTOK&quot;);   // Clave del plan
vars.put(&quot;ABO_EDOA_T&quot;,    &quot;A&quot;);                        // Estatus del abonado

// Valores umbral_tipo_llamada
vars.put(&quot;TLL_CLAVE&quot;,  &quot;4&quot;);                                         // Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;UMBRAL&quot;,  &quot;1&quot;);                                               // 
vars.put(&quot;UMBRAL_EVENTO&quot;,  &quot;5000&quot;);                      // Consumo disponible en minutos
vars.put(&quot;TIPO_COBRO&quot;,  &quot;0&quot;);                                      // Tipo de cobro
vars.put(&quot;STATUS_COBRO&quot;,  &quot;0&quot;);                                // Estatus oara el tipo de cobro: 1-Seguir cobrando, 2- Cortar
vars.put(&quot;POR_CUENTA&quot;,  &quot;1&quot;);                                     // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;UMBRAL_LC&quot;,  &quot;0&quot;);                                        // Bandera que indica si el umbral es de limite de credito ( LC ):  1 - Es de LC,  0 - No es de LC
vars.put(&quot;USU_REG&quot;,  &quot;CAMN9999MD&quot;);                          // Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL&quot;,  &quot;0&quot;);      // Grupo de clave de umbral

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM umbral_tipo_llamada 
WHERE PLN_CLAVE = &apos;${PLN_CLAVE}&apos;;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE}&apos;,0,0,${TLL_CLAVE},${UMBRAL},
                   ${UMBRAL_EVENTO},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL});

</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">-- Consultanto que el umbral este creado con las caracteristicas configuradas

SELECT count(1) 
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = 0
   AND PRECIO_ALT = 0
   AND CONSUMO_ANT = 0
   AND CONSUMO_EVENTO_ANT = 0
   AND ESTATUS = IF( (&apos;${ABO_EDOA_T}&apos;=&apos;B&apos; || &apos;${ABO_EDOA_T}&apos;=&apos;D&apos;) ,0,1)
   AND TIPO_REG = &apos;C&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL};</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">NUM_REG</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49">1</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">NUM_REG_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Prueba 10 - Actualizacion de un umbral ya configurado en &quot;csto_abo_consumo&quot;. El umbral a nivel de abonado, y es de grupo de llamada umbral (GRUPO_TLL_CLAVE_UMBRAL) . El estatus del abonado es activo(A) y es de ciclo 2." enabled="true">
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 10 - 1.- Fase Activacion - Umbral configurado con un solo grupo de llamada umbral (GRUPO_TLL_CLAVE_UMBRAL), el umbral para este tipo de llamada es a nivel abonado. El estatus del abonado es activo(A) y ciclo 2." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Callable Statement</stringProp>
                <stringProp name="query">-- Parametros de entrada:
-- 1.- inABO_CLIENTE varchar(10)   -&gt; Clave del cliente
-- 2.- inABO_MDN varchar(10),          -&gt; Clave del abonado
-- 3.- inABO_GPO_T varchar(10),      -&gt; Grupo al que pertenece el abonado
-- 4.- inABO_CIC_CVE varchar(10),  -&gt; Ciclo del abonado
-- 5.- inPLN_CLAVE varchar(10),       -&gt; Plan del abonado
-- 6.- inABO_EDOA_T varchar(4)        -&gt; Estatus o estado del abonado

/*
call sp_Insert_in_CstoAboCon_from_Abonado(NEW.ABO_CLIENTE,
                                          NEW.ABO_MDN,
                                          NEW.ABO_GPO_T,
                                          NEW.CIC_CLAVE,
                                          NEW.PLN_CLAVE,
                                          NEW.ABO_EDOA_T);
*/

call sp_Insert_in_CstoAboCon_from_Abonado(?,?,?,?,?,?);</stringProp>
                <stringProp name="queryArguments">${ABO_CLIENTE},${ABO_MDN},${ABO_GPO_T},${ABO_CIC_CVE},${PLN_CLAVE},${ABO_EDOA_T}</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCSampler>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">// Parametros de entrada del SP
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000010&quot;);      // Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000010&quot;);         // Clave del abonado
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);                    // Grupo al que pertenece el abonado
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      // Ciclo al que pertenece el abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TESTOK&quot;);   // Clave del plan
vars.put(&quot;ABO_EDOA_T&quot;,    &quot;A&quot;);                        // Estatus del abonado

// Valores umbral_tipo_llamada
vars.put(&quot;TLL_CLAVE&quot;,  &quot;0&quot;);                                         // Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;UMBRAL&quot;,  &quot;1&quot;);                                               // 
vars.put(&quot;UMBRAL_EVENTO&quot;,  &quot;3000&quot;);                      // Consumo disponible en minutos
vars.put(&quot;TIPO_COBRO&quot;,  &quot;0&quot;);                                      // Tipo de cobro
vars.put(&quot;STATUS_COBRO&quot;,  &quot;0&quot;);                                // Estatus oara el tipo de cobro: 1-Seguir cobrando, 2- Cortar
vars.put(&quot;POR_CUENTA&quot;,  &quot;0&quot;);                      // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;UMBRAL_LC&quot;,  &quot;0&quot;);                                        // Bandera que indica si el umbral es de limite de credito ( LC ):  1 - Es de LC,  0 - No es de LC
vars.put(&quot;USU_REG&quot;,  &quot;CAMN9999&quot;);                          // Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL&quot;,  &quot;3&quot;);      // Grupo de clave de umbral

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM umbral_tipo_llamada 
WHERE PLN_CLAVE = &apos;${PLN_CLAVE}&apos;;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE}&apos;,0,0,${TLL_CLAVE},${UMBRAL},
                   ${UMBRAL_EVENTO},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL});

</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">-- Consultanto que el umbral este creado con las caracteristicas configuradas

SELECT count(1) 
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = 0
   AND PRECIO_ALT = 0
   AND CONSUMO_ANT = 0
   AND CONSUMO_EVENTO_ANT = 0
   AND ESTATUS = IF( (&apos;${ABO_EDOA_T}&apos;=&apos;B&apos; || &apos;${ABO_EDOA_T}&apos;=&apos;D&apos;) ,0,1)
   AND TIPO_REG = &apos;C&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL};</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">NUM_REG</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49">1</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">NUM_REG_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 10 - 2.- Fase Actualizacion - Umbral configurado con un solo grupo de llamada umbral (GRUPO_TLL_CLAVE_UMBRAL), el umbral para este tipo de llamada es a nivel abonado. El estatus del abonado es activo(A) y ciclo 2." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Callable Statement</stringProp>
                <stringProp name="query">-- Parametros de entrada:
-- 1.- inABO_CLIENTE varchar(10)   -&gt; Clave del cliente
-- 2.- inABO_MDN varchar(10),          -&gt; Clave del abonado
-- 3.- inABO_GPO_T varchar(10),      -&gt; Grupo al que pertenece el abonado
-- 4.- inABO_CIC_CVE varchar(10),  -&gt; Ciclo del abonado
-- 5.- inPLN_CLAVE varchar(10),       -&gt; Plan del abonado
-- 6.- inABO_EDOA_T varchar(4)        -&gt; Estatus o estado del abonado

/*
call sp_Insert_in_CstoAboCon_from_Abonado(NEW.ABO_CLIENTE,
                                          NEW.ABO_MDN,
                                          NEW.ABO_GPO_T,
                                          NEW.CIC_CLAVE,
                                          NEW.PLN_CLAVE,
                                          NEW.ABO_EDOA_T);
*/

call sp_Insert_in_CstoAboCon_from_Abonado(?,?,?,?,?,?);</stringProp>
                <stringProp name="queryArguments">${ABO_CLIENTE},${ABO_MDN},${ABO_GPO_T},${ABO_CIC_CVE},${PLN_CLAVE},${ABO_EDOA_T}</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCSampler>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">// Parametros de entrada del SP
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000010&quot;);      // Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000010&quot;);         // Clave del abonado
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);                    // Grupo al que pertenece el abonado
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      // Ciclo al que pertenece el abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TESTOK&quot;);   // Clave del plan
vars.put(&quot;ABO_EDOA_T&quot;,    &quot;A&quot;);                        // Estatus del abonado

// Valores umbral_tipo_llamada
vars.put(&quot;TLL_CLAVE&quot;,  &quot;0&quot;);                                         // Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;UMBRAL&quot;,  &quot;1&quot;);                                               // 
vars.put(&quot;UMBRAL_EVENTO&quot;,  &quot;5000&quot;);                      // Consumo disponible en minutos
vars.put(&quot;TIPO_COBRO&quot;,  &quot;0&quot;);                                      // Tipo de cobro
vars.put(&quot;STATUS_COBRO&quot;,  &quot;0&quot;);                                // Estatus oara el tipo de cobro: 1-Seguir cobrando, 2- Cortar
vars.put(&quot;POR_CUENTA&quot;,  &quot;0&quot;);                                     // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;UMBRAL_LC&quot;,  &quot;0&quot;);                                        // Bandera que indica si el umbral es de limite de credito ( LC ):  1 - Es de LC,  0 - No es de LC
vars.put(&quot;USU_REG&quot;,  &quot;CAMN9999&quot;);                          // Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL&quot;,  &quot;3&quot;);      // Grupo de clave de umbral

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM umbral_tipo_llamada 
WHERE PLN_CLAVE = &apos;${PLN_CLAVE}&apos;;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE}&apos;,0,0,${TLL_CLAVE},${UMBRAL},
                   ${UMBRAL_EVENTO},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL});

</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">-- Consultanto que el umbral este creado con las caracteristicas configuradas

SELECT count(1) 
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = 0
   AND PRECIO_ALT = 0
   AND CONSUMO_ANT = 0
   AND CONSUMO_EVENTO_ANT = 0
   AND ESTATUS = IF( (&apos;${ABO_EDOA_T}&apos;=&apos;B&apos; || &apos;${ABO_EDOA_T}&apos;=&apos;D&apos;) ,0,1)
   AND TIPO_REG = &apos;C&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL};</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">NUM_REG</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49">1</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">NUM_REG_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Prueba 11 - Actualizacion de un umbral ya configurado en &quot;csto_abo_consumo&quot;. El umbral a nivel de abonado, y es de tipo de llamada (tll_clave) . El estatus del abonado es inactivo(B) y es de ciclo 2." enabled="true">
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 11 - 1.- Fase Activacion - Umbral configurado con un solo tipo de llamada(tll_clave), el umbral para este tipo de llamada es a nivel abonado. El estatus del abonado es activo(A) y ciclo 2." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Callable Statement</stringProp>
                <stringProp name="query">-- Parametros de entrada:
-- 1.- inABO_CLIENTE varchar(10)   -&gt; Clave del cliente
-- 2.- inABO_MDN varchar(10),          -&gt; Clave del abonado
-- 3.- inABO_GPO_T varchar(10),      -&gt; Grupo al que pertenece el abonado
-- 4.- inABO_CIC_CVE varchar(10),  -&gt; Ciclo del abonado
-- 5.- inPLN_CLAVE varchar(10),       -&gt; Plan del abonado
-- 6.- inABO_EDOA_T varchar(4)        -&gt; Estatus o estado del abonado

/*
call sp_Insert_in_CstoAboCon_from_Abonado(NEW.ABO_CLIENTE,
                                          NEW.ABO_MDN,
                                          NEW.ABO_GPO_T,
                                          NEW.CIC_CLAVE,
                                          NEW.PLN_CLAVE,
                                          NEW.ABO_EDOA_T);
*/

call sp_Insert_in_CstoAboCon_from_Abonado(?,?,?,?,?,?);</stringProp>
                <stringProp name="queryArguments">${ABO_CLIENTE},${ABO_MDN},${ABO_GPO_T},${ABO_CIC_CVE},${PLN_CLAVE},${ABO_EDOA_T}</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCSampler>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">// Parametros de entrada del SP
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000011&quot;);      // Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000011&quot;);         // Clave del abonado
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);                    // Grupo al que pertenece el abonado
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      // Ciclo al que pertenece el abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TESTOK&quot;);   // Clave del plan
vars.put(&quot;ABO_EDOA_T&quot;,    &quot;B&quot;);                        // Estatus del abonado

// Valores umbral_tipo_llamada
vars.put(&quot;TLL_CLAVE&quot;,  &quot;4&quot;);                                         // Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;UMBRAL&quot;,  &quot;1&quot;);                                               // 
vars.put(&quot;UMBRAL_EVENTO&quot;,  &quot;3000&quot;);                      // Consumo disponible en minutos
vars.put(&quot;TIPO_COBRO&quot;,  &quot;0&quot;);                                      // Tipo de cobro
vars.put(&quot;STATUS_COBRO&quot;,  &quot;0&quot;);                                // Estatus oara el tipo de cobro: 1-Seguir cobrando, 2- Cortar
vars.put(&quot;POR_CUENTA&quot;,  &quot;0&quot;);                      // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;UMBRAL_LC&quot;,  &quot;0&quot;);                                        // Bandera que indica si el umbral es de limite de credito ( LC ):  1 - Es de LC,  0 - No es de LC
vars.put(&quot;USU_REG&quot;,  &quot;CAMN9999&quot;);                          // Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL&quot;,  &quot;0&quot;);      // Grupo de clave de umbral

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM umbral_tipo_llamada 
WHERE PLN_CLAVE = &apos;${PLN_CLAVE}&apos;;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE}&apos;,0,0,${TLL_CLAVE},${UMBRAL},
                   ${UMBRAL_EVENTO},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL});

</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">-- Consultanto que el umbral este creado con las caracteristicas configuradas

SELECT count(1) 
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = 0
   AND PRECIO_ALT = 0
   AND CONSUMO_ANT = 0
   AND CONSUMO_EVENTO_ANT = 0
   AND ESTATUS = IF( (&apos;${ABO_EDOA_T}&apos;=&apos;B&apos; || &apos;${ABO_EDOA_T}&apos;=&apos;D&apos;) ,0,1)
   AND TIPO_REG = &apos;C&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL};</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">NUM_REG</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49">1</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">NUM_REG_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 11 - 2.- Fase Actualizacion - Umbral configurado con un solo tipo de llamada(tll_clave), el umbral para este tipo de llamada es a nivel abonado. El estatus del abonado es activo(A) y ciclo 2." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Callable Statement</stringProp>
                <stringProp name="query">-- Parametros de entrada:
-- 1.- inABO_CLIENTE varchar(10)   -&gt; Clave del cliente
-- 2.- inABO_MDN varchar(10),          -&gt; Clave del abonado
-- 3.- inABO_GPO_T varchar(10),      -&gt; Grupo al que pertenece el abonado
-- 4.- inABO_CIC_CVE varchar(10),  -&gt; Ciclo del abonado
-- 5.- inPLN_CLAVE varchar(10),       -&gt; Plan del abonado
-- 6.- inABO_EDOA_T varchar(4)        -&gt; Estatus o estado del abonado

/*
call sp_Insert_in_CstoAboCon_from_Abonado(NEW.ABO_CLIENTE,
                                          NEW.ABO_MDN,
                                          NEW.ABO_GPO_T,
                                          NEW.CIC_CLAVE,
                                          NEW.PLN_CLAVE,
                                          NEW.ABO_EDOA_T);
*/

call sp_Insert_in_CstoAboCon_from_Abonado(?,?,?,?,?,?);</stringProp>
                <stringProp name="queryArguments">${ABO_CLIENTE},${ABO_MDN},${ABO_GPO_T},${ABO_CIC_CVE},${PLN_CLAVE},${ABO_EDOA_T}</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCSampler>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">// Parametros de entrada del SP
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000011&quot;);      // Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000011&quot;);         // Clave del abonado
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);                    // Grupo al que pertenece el abonado
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      // Ciclo al que pertenece el abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TESTOK&quot;);   // Clave del plan
vars.put(&quot;ABO_EDOA_T&quot;,    &quot;B&quot;);                        // Estatus del abonado

// Valores umbral_tipo_llamada
vars.put(&quot;TLL_CLAVE&quot;,  &quot;4&quot;);                                         // Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;UMBRAL&quot;,  &quot;1&quot;);                                               // 
vars.put(&quot;UMBRAL_EVENTO&quot;,  &quot;5000&quot;);                      // Consumo disponible en minutos
vars.put(&quot;TIPO_COBRO&quot;,  &quot;0&quot;);                                      // Tipo de cobro
vars.put(&quot;STATUS_COBRO&quot;,  &quot;0&quot;);                                // Estatus oara el tipo de cobro: 1-Seguir cobrando, 2- Cortar
vars.put(&quot;POR_CUENTA&quot;,  &quot;0&quot;);                                     // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;UMBRAL_LC&quot;,  &quot;0&quot;);                                        // Bandera que indica si el umbral es de limite de credito ( LC ):  1 - Es de LC,  0 - No es de LC
vars.put(&quot;USU_REG&quot;,  &quot;CAMN9999MD&quot;);                          // Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL&quot;,  &quot;0&quot;);      // Grupo de clave de umbral

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM umbral_tipo_llamada 
WHERE PLN_CLAVE = &apos;${PLN_CLAVE}&apos;;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE}&apos;,0,0,${TLL_CLAVE},${UMBRAL},
                   ${UMBRAL_EVENTO},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL});

</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">-- Consultanto que el umbral este creado con las caracteristicas configuradas

SELECT count(1) 
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = 0
   AND PRECIO_ALT = 0
   AND CONSUMO_ANT = 0
   AND CONSUMO_EVENTO_ANT = 0
   AND ESTATUS = IF( (&apos;${ABO_EDOA_T}&apos;=&apos;B&apos; || &apos;${ABO_EDOA_T}&apos;=&apos;D&apos;) ,0,1)
   AND TIPO_REG = &apos;C&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL};</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">NUM_REG</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49">1</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">NUM_REG_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Prueba 12 - Actualizacion de dos umbrales, configurados uno con un tipo de llamada(tll_clave) y el otro con un grupo de llamada umbral(GRUPO_TLL_CLAVE_UMBRAL), ambos umbrales son a nivel de abonado. El estatus de abonado es activo(A) y es de ciclo 2." enabled="true">
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 12 - 1.- Fase Activacion - Dos umbrales configurados uno con un tipo de llamada(tll_clave) y el otro con un grupo de llamada umbral(GRUPO_TLL_CLAVE_UMBRAL), ambos umbrales son a nivel de abonado. El estatus de abonado es activo(A) y es de ciclo 2." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Callable Statement</stringProp>
                <stringProp name="query">-- Parametros de entrada:
-- 1.- inABO_CLIENTE varchar(10)   -&gt; Clave del cliente
-- 2.- inABO_MDN varchar(10),          -&gt; Clave del abonado
-- 3.- inABO_GPO_T varchar(10),      -&gt; Grupo al que pertenece el abonado
-- 4.- inABO_CIC_CVE varchar(10),  -&gt; Ciclo del abonado
-- 5.- inPLN_CLAVE varchar(10),       -&gt; Plan del abonado
-- 6.- inABO_EDOA_T varchar(4)        -&gt; Estatus o estado del abonado

/*
call sp_Insert_in_CstoAboCon_from_Abonado(NEW.ABO_CLIENTE,
                                          NEW.ABO_MDN,
                                          NEW.ABO_GPO_T,
                                          NEW.CIC_CLAVE,
                                          NEW.PLN_CLAVE,
                                          NEW.ABO_EDOA_T);
*/

call sp_Insert_in_CstoAboCon_from_Abonado(?,?,?,?,?,?);</stringProp>
                <stringProp name="queryArguments">${ABO_CLIENTE},${ABO_MDN},${ABO_GPO_T},${ABO_CIC_CVE},${PLN_CLAVE},${ABO_EDOA_T}</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCSampler>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">// Parametros de entrada del SP
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000012&quot;);      // Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000012&quot;);         // Clave del abonado
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);                    // Grupo al que pertenece el abonado
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      // Ciclo al que pertenece el abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TESTOK&quot;);   // Clave del plan
vars.put(&quot;ABO_EDOA_T&quot;,    &quot;A&quot;);                        // Estatus del abonado

// Valores umbral_tipo_llamada
vars.put(&quot;TLL_CLAVE&quot;,  &quot;4&quot;);                                         // Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;TLL_CLAVE_B&quot;,  &quot;0&quot;);                                    // Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;UMBRAL&quot;,  &quot;1&quot;);                                               // 
vars.put(&quot;UMBRAL_EVENTO&quot;,  &quot;3000&quot;);                      // Consumo disponible en minutos
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;3500&quot;);                 // Consumo disponible en minutos
vars.put(&quot;TIPO_COBRO&quot;,  &quot;0&quot;);                                      // Tipo de cobro
vars.put(&quot;STATUS_COBRO&quot;,  &quot;0&quot;);                                // Estatus oara el tipo de cobro: 1-Seguir cobrando, 2- Cortar
vars.put(&quot;POR_CUENTA&quot;,  &quot;0&quot;);                        // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                  // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;UMBRAL_LC&quot;,  &quot;0&quot;);                                        // Bandera que indica si el umbral es de limite de credito ( LC ):  1 - Es de LC,  0 - No es de LC
vars.put(&quot;USU_REG&quot;,  &quot;CAMN9999&quot;);                          // Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL&quot;,  &quot;0&quot;);      // Grupo de clave de umbral
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;3&quot;);      // Grupo de clave de umbral

vars.put(&quot;ABO_MDN_ALL&quot;,    &quot;ALL&quot;);                             // Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;NUM_REG_QUERY2&quot;,  &quot;&quot;);
</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM umbral_tipo_llamada 
WHERE PLN_CLAVE = &apos;${PLN_CLAVE}&apos;;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE}&apos;,0,0,${TLL_CLAVE},${UMBRAL},
                   ${UMBRAL_EVENTO},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL});

</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Segundo" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE}&apos;,0,0,${TLL_CLAVE_B},${UMBRAL},
                   ${UMBRAL_EVENTO_B},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA_B},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">-- Consultanto que el umbral este creado con las caracteristicas configuradas

SELECT count(1) 
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = 0
   AND PRECIO_ALT = 0
   AND CONSUMO_ANT = 0
   AND CONSUMO_EVENTO_ANT = 0
   AND ESTATUS = IF( (&apos;${ABO_EDOA_T}&apos;=&apos;B&apos; || &apos;${ABO_EDOA_T}&apos;=&apos;D&apos;) ,0,1)
   AND TIPO_REG = &apos;C&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL};</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">NUM_REG</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPostProcessor>
                <hashTree/>
                <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">-- Consultanto que el umbral este creado con las caracteristicas configuradas

SELECT count(1) 
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = 0
   AND PRECIO_ALT = 0
   AND CONSUMO_ANT = 0
   AND CONSUMO_EVENTO_ANT = 0
   AND ESTATUS = IF( (&apos;${ABO_EDOA_T}&apos;=&apos;B&apos; || &apos;${ABO_EDOA_T}&apos;=&apos;D&apos;) ,0,1)
   AND TIPO_REG = &apos;C&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B};</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">NUM_REG_QUERY2</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49">1</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">NUM_REG_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49">1</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">NUM_REG_QUERY2_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 12 - 2.- Fase Actualizacion - Dos umbrales configurados uno con un tipo de llamada(tll_clave) y el otro con un grupo de llamada umbral(GRUPO_TLL_CLAVE_UMBRAL), ambos umbrales son a nivel de abonado. El estatus de abonado es activo(A) y es de ciclo 2." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Callable Statement</stringProp>
                <stringProp name="query">-- Parametros de entrada:
-- 1.- inABO_CLIENTE varchar(10)   -&gt; Clave del cliente
-- 2.- inABO_MDN varchar(10),          -&gt; Clave del abonado
-- 3.- inABO_GPO_T varchar(10),      -&gt; Grupo al que pertenece el abonado
-- 4.- inABO_CIC_CVE varchar(10),  -&gt; Ciclo del abonado
-- 5.- inPLN_CLAVE varchar(10),       -&gt; Plan del abonado
-- 6.- inABO_EDOA_T varchar(4)        -&gt; Estatus o estado del abonado

/*
call sp_Insert_in_CstoAboCon_from_Abonado(NEW.ABO_CLIENTE,
                                          NEW.ABO_MDN,
                                          NEW.ABO_GPO_T,
                                          NEW.CIC_CLAVE,
                                          NEW.PLN_CLAVE,
                                          NEW.ABO_EDOA_T);
*/

call sp_Insert_in_CstoAboCon_from_Abonado(?,?,?,?,?,?);</stringProp>
                <stringProp name="queryArguments">${ABO_CLIENTE},${ABO_MDN},${ABO_GPO_T},${ABO_CIC_CVE},${PLN_CLAVE},${ABO_EDOA_T}</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCSampler>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">// Parametros de entrada del SP
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000012&quot;);      // Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000012&quot;);         // Clave del abonado
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);                    // Grupo al que pertenece el abonado
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      // Ciclo al que pertenece el abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TESTOK&quot;);   // Clave del plan
vars.put(&quot;ABO_EDOA_T&quot;,    &quot;A&quot;);                        // Estatus del abonado

// Valores umbral_tipo_llamada
vars.put(&quot;TLL_CLAVE&quot;,  &quot;4&quot;);                                         // Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;TLL_CLAVE_B&quot;,  &quot;0&quot;);                                    // Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;UMBRAL&quot;,  &quot;1&quot;);                                               // 
vars.put(&quot;UMBRAL_EVENTO&quot;,  &quot;5000&quot;);                      // Consumo disponible en minutos
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;5500&quot;);                 // Consumo disponible en minutos
vars.put(&quot;TIPO_COBRO&quot;,  &quot;0&quot;);                                      // Tipo de cobro
vars.put(&quot;STATUS_COBRO&quot;,  &quot;0&quot;);                                // Estatus oara el tipo de cobro: 1-Seguir cobrando, 2- Cortar
vars.put(&quot;POR_CUENTA&quot;,  &quot;0&quot;);                        // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                  // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;UMBRAL_LC&quot;,  &quot;0&quot;);                                        // Bandera que indica si el umbral es de limite de credito ( LC ):  1 - Es de LC,  0 - No es de LC
vars.put(&quot;USU_REG&quot;,  &quot;CAMN9999&quot;);                          // Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL&quot;,  &quot;0&quot;);      // Grupo de clave de umbral
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;3&quot;);      // Grupo de clave de umbral

vars.put(&quot;ABO_MDN_ALL&quot;,    &quot;ALL&quot;);                             // Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;NUM_REG_QUERY2&quot;,  &quot;&quot;);
</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM umbral_tipo_llamada 
WHERE PLN_CLAVE = &apos;${PLN_CLAVE}&apos;;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE}&apos;,0,0,${TLL_CLAVE},${UMBRAL},
                   ${UMBRAL_EVENTO},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL});

</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Segundo" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE}&apos;,0,0,${TLL_CLAVE_B},${UMBRAL},
                   ${UMBRAL_EVENTO_B},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA_B},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">-- Consultanto que el umbral este creado con las caracteristicas configuradas

SELECT count(1) 
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = 0
   AND PRECIO_ALT = 0
   AND CONSUMO_ANT = 0
   AND CONSUMO_EVENTO_ANT = 0
   AND ESTATUS = IF( (&apos;${ABO_EDOA_T}&apos;=&apos;B&apos; || &apos;${ABO_EDOA_T}&apos;=&apos;D&apos;) ,0,1)
   AND TIPO_REG = &apos;C&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL};</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">NUM_REG</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPostProcessor>
                <hashTree/>
                <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">-- Consultanto que el umbral este creado con las caracteristicas configuradas

SELECT count(1) 
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = 0
   AND PRECIO_ALT = 0
   AND CONSUMO_ANT = 0
   AND CONSUMO_EVENTO_ANT = 0
   AND ESTATUS = IF( (&apos;${ABO_EDOA_T}&apos;=&apos;B&apos; || &apos;${ABO_EDOA_T}&apos;=&apos;D&apos;) ,0,1)
   AND TIPO_REG = &apos;C&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B};</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">NUM_REG_QUERY2</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49">1</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">NUM_REG_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49">1</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">NUM_REG_QUERY2_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Prueba 13 - Actualizacion de dos umbrales, configurados como grupo de llamada umbral(GRUPO_TLL_CLAVE_UMBRAL), ambos umbrales son a nivel de abonado. El estatus de abonado es activo(A) y es de ciclo 2." enabled="true">
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 13 - 1.- Fase Activacion - Dos umbrales configurados los dos como grupo de llamada umbral(GRUPO_TLL_CLAVE_UMBRAL), ambos umbrales son a nivel de abonado. El estatus de abonado es activo(A) y es de ciclo 2." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Callable Statement</stringProp>
                <stringProp name="query">-- Parametros de entrada:
-- 1.- inABO_CLIENTE varchar(10)   -&gt; Clave del cliente
-- 2.- inABO_MDN varchar(10),          -&gt; Clave del abonado
-- 3.- inABO_GPO_T varchar(10),      -&gt; Grupo al que pertenece el abonado
-- 4.- inABO_CIC_CVE varchar(10),  -&gt; Ciclo del abonado
-- 5.- inPLN_CLAVE varchar(10),       -&gt; Plan del abonado
-- 6.- inABO_EDOA_T varchar(4)        -&gt; Estatus o estado del abonado

/*
call sp_Insert_in_CstoAboCon_from_Abonado(NEW.ABO_CLIENTE,
                                          NEW.ABO_MDN,
                                          NEW.ABO_GPO_T,
                                          NEW.CIC_CLAVE,
                                          NEW.PLN_CLAVE,
                                          NEW.ABO_EDOA_T);
*/

call sp_Insert_in_CstoAboCon_from_Abonado(?,?,?,?,?,?);</stringProp>
                <stringProp name="queryArguments">${ABO_CLIENTE},${ABO_MDN},${ABO_GPO_T},${ABO_CIC_CVE},${PLN_CLAVE},${ABO_EDOA_T}</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCSampler>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">// Parametros de entrada del SP
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000013&quot;);      // Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000013&quot;);         // Clave del abonado
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);                    // Grupo al que pertenece el abonado
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      // Ciclo al que pertenece el abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TESTOK&quot;);   // Clave del plan
vars.put(&quot;ABO_EDOA_T&quot;,    &quot;A&quot;);                        // Estatus del abonado

// Valores umbral_tipo_llamada
vars.put(&quot;TLL_CLAVE&quot;,  &quot;0&quot;);                                         // Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;TLL_CLAVE_B&quot;,  &quot;0&quot;);                                    // Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;UMBRAL&quot;,  &quot;1&quot;);                                               // 
vars.put(&quot;UMBRAL_EVENTO&quot;,  &quot;3000&quot;);                      // Consumo disponible en minutos
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;3500&quot;);                 // Consumo disponible en minutos
vars.put(&quot;TIPO_COBRO&quot;,  &quot;0&quot;);                                      // Tipo de cobro
vars.put(&quot;STATUS_COBRO&quot;,  &quot;0&quot;);                                // Estatus oara el tipo de cobro: 1-Seguir cobrando, 2- Cortar
vars.put(&quot;POR_CUENTA&quot;,  &quot;0&quot;);                        // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                  // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;UMBRAL_LC&quot;,  &quot;0&quot;);                                        // Bandera que indica si el umbral es de limite de credito ( LC ):  1 - Es de LC,  0 - No es de LC
vars.put(&quot;USU_REG&quot;,  &quot;CAMN9999&quot;);                          // Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL&quot;,  &quot;2&quot;);      // Grupo de clave de umbral
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;3&quot;);      // Grupo de clave de umbral

vars.put(&quot;ABO_MDN_ALL&quot;,    &quot;ALL&quot;);                             // Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;NUM_REG_QUERY2&quot;,  &quot;&quot;);
</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM umbral_tipo_llamada 
WHERE PLN_CLAVE = &apos;${PLN_CLAVE}&apos;;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE}&apos;,0,0,${TLL_CLAVE},${UMBRAL},
                   ${UMBRAL_EVENTO},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL});

</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Segundo" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE}&apos;,0,0,${TLL_CLAVE_B},${UMBRAL},
                   ${UMBRAL_EVENTO_B},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA_B},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">-- Consultanto que el umbral este creado con las caracteristicas configuradas

SELECT count(1) 
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = 0
   AND PRECIO_ALT = 0
   AND CONSUMO_ANT = 0
   AND CONSUMO_EVENTO_ANT = 0
   AND ESTATUS = IF( (&apos;${ABO_EDOA_T}&apos;=&apos;B&apos; || &apos;${ABO_EDOA_T}&apos;=&apos;D&apos;) ,0,1)
   AND TIPO_REG = &apos;C&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL};</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">NUM_REG</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPostProcessor>
                <hashTree/>
                <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">-- Consultanto que el umbral este creado con las caracteristicas configuradas

SELECT count(1) 
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = 0
   AND PRECIO_ALT = 0
   AND CONSUMO_ANT = 0
   AND CONSUMO_EVENTO_ANT = 0
   AND ESTATUS = IF( (&apos;${ABO_EDOA_T}&apos;=&apos;B&apos; || &apos;${ABO_EDOA_T}&apos;=&apos;D&apos;) ,0,1)
   AND TIPO_REG = &apos;C&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B};</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">NUM_REG_QUERY2</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49">1</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">NUM_REG_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49">1</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">NUM_REG_QUERY2_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 13 - 2.- Fase Actualizacion - Dos umbrales configurados los dos como grupo de llamada umbral(GRUPO_TLL_CLAVE_UMBRAL), ambos umbrales son a nivel de abonado. El estatus de abonado es activo(A) y es de ciclo 2." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Callable Statement</stringProp>
                <stringProp name="query">-- Parametros de entrada:
-- 1.- inABO_CLIENTE varchar(10)   -&gt; Clave del cliente
-- 2.- inABO_MDN varchar(10),          -&gt; Clave del abonado
-- 3.- inABO_GPO_T varchar(10),      -&gt; Grupo al que pertenece el abonado
-- 4.- inABO_CIC_CVE varchar(10),  -&gt; Ciclo del abonado
-- 5.- inPLN_CLAVE varchar(10),       -&gt; Plan del abonado
-- 6.- inABO_EDOA_T varchar(4)        -&gt; Estatus o estado del abonado

/*
call sp_Insert_in_CstoAboCon_from_Abonado(NEW.ABO_CLIENTE,
                                          NEW.ABO_MDN,
                                          NEW.ABO_GPO_T,
                                          NEW.CIC_CLAVE,
                                          NEW.PLN_CLAVE,
                                          NEW.ABO_EDOA_T);
*/

call sp_Insert_in_CstoAboCon_from_Abonado(?,?,?,?,?,?);</stringProp>
                <stringProp name="queryArguments">${ABO_CLIENTE},${ABO_MDN},${ABO_GPO_T},${ABO_CIC_CVE},${PLN_CLAVE},${ABO_EDOA_T}</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCSampler>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">// Parametros de entrada del SP
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000013&quot;);      // Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000013&quot;);         // Clave del abonado
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);                    // Grupo al que pertenece el abonado
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      // Ciclo al que pertenece el abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TESTOK&quot;);   // Clave del plan
vars.put(&quot;ABO_EDOA_T&quot;,    &quot;A&quot;);                        // Estatus del abonado

// Valores umbral_tipo_llamada
vars.put(&quot;TLL_CLAVE&quot;,  &quot;0&quot;);                                         // Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;TLL_CLAVE_B&quot;,  &quot;0&quot;);                                    // Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;UMBRAL&quot;,  &quot;1&quot;);                                               // 
vars.put(&quot;UMBRAL_EVENTO&quot;,  &quot;5000&quot;);                      // Consumo disponible en minutos
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;5500&quot;);                 // Consumo disponible en minutos
vars.put(&quot;TIPO_COBRO&quot;,  &quot;0&quot;);                                      // Tipo de cobro
vars.put(&quot;STATUS_COBRO&quot;,  &quot;0&quot;);                                // Estatus oara el tipo de cobro: 1-Seguir cobrando, 2- Cortar
vars.put(&quot;POR_CUENTA&quot;,  &quot;0&quot;);                        // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                  // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;UMBRAL_LC&quot;,  &quot;0&quot;);                                        // Bandera que indica si el umbral es de limite de credito ( LC ):  1 - Es de LC,  0 - No es de LC
vars.put(&quot;USU_REG&quot;,  &quot;CAMN9999&quot;);                          // Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL&quot;,  &quot;2&quot;);      // Grupo de clave de umbral
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;3&quot;);      // Grupo de clave de umbral

vars.put(&quot;ABO_MDN_ALL&quot;,    &quot;ALL&quot;);                             // Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;NUM_REG_QUERY2&quot;,  &quot;&quot;);
</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM umbral_tipo_llamada 
WHERE PLN_CLAVE = &apos;${PLN_CLAVE}&apos;;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE}&apos;,0,0,${TLL_CLAVE},${UMBRAL},
                   ${UMBRAL_EVENTO},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL});

</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Segundo" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE}&apos;,0,0,${TLL_CLAVE_B},${UMBRAL},
                   ${UMBRAL_EVENTO_B},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA_B},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">-- Consultanto que el umbral este creado con las caracteristicas configuradas

SELECT count(1) 
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = 0
   AND PRECIO_ALT = 0
   AND CONSUMO_ANT = 0
   AND CONSUMO_EVENTO_ANT = 0
   AND ESTATUS = IF( (&apos;${ABO_EDOA_T}&apos;=&apos;B&apos; || &apos;${ABO_EDOA_T}&apos;=&apos;D&apos;) ,0,1)
   AND TIPO_REG = &apos;C&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL};</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">NUM_REG</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPostProcessor>
                <hashTree/>
                <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">-- Consultanto que el umbral este creado con las caracteristicas configuradas

SELECT count(1) 
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = 0
   AND PRECIO_ALT = 0
   AND CONSUMO_ANT = 0
   AND CONSUMO_EVENTO_ANT = 0
   AND ESTATUS = IF( (&apos;${ABO_EDOA_T}&apos;=&apos;B&apos; || &apos;${ABO_EDOA_T}&apos;=&apos;D&apos;) ,0,1)
   AND TIPO_REG = &apos;C&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B};</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">NUM_REG_QUERY2</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49">1</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">NUM_REG_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49">1</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">NUM_REG_QUERY2_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="SP -&gt; MBS.sp_CancelaInCsto_Abo_Consumo_From_Abonado" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 14 - Cancelacion de umbral en csto_abo_consumo, esta configurado un solo umbral de tipo de llamada(tll_clave), el umbral es a nivel de abonado. El estatus del registro en csto_abo_consumo es activo(1) y el ciclo es 2." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inABO_CLIENTE varchar(10)   -&gt; Clave del cliente
-- 2.- inABO_MDN varchar(10),          -&gt; Clave del abonado

/*
call sp_CancelaInCsto_Abo_Consumo_From_Abonado(inABO_CLIENTE char(10),
                                                                                                        inABO_MDN char(10) )
*/

 call sp_CancelaInCsto_Abo_Consumo_From_Abonado(?,?);</stringProp>
              <stringProp name="queryArguments">${ABO_CLIENTE},${ABO_MDN}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada del SP
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000014&quot;);      // Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000014&quot;);         // Clave del abonado
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);                    // Grupo al que pertenece el abonado
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      // Ciclo al que pertenece el abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TESTOK&quot;);   // Clave del plan
vars.put(&quot;ABO_EDOA_T&quot;,    &quot;A&quot;);                        // Estatus del abonado

// Valores umbral_tipo_llamada
vars.put(&quot;TLL_CLAVE&quot;,  &quot;4&quot;);                                         // Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;UMBRAL&quot;,  &quot;1&quot;);                                               // 
vars.put(&quot;UMBRAL_EVENTO&quot;,  &quot;3000&quot;);                      // Consumo disponible en minutos
vars.put(&quot;TIPO_COBRO&quot;,  &quot;0&quot;);                                      // Tipo de cobro
vars.put(&quot;STATUS_COBRO&quot;,  &quot;0&quot;);                                // Estatus oara el tipo de cobro: 1-Seguir cobrando, 2- Cortar
vars.put(&quot;POR_CUENTA&quot;,  &quot;0&quot;);                        // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;UMBRAL_LC&quot;,  &quot;0&quot;);                                        // Bandera que indica si el umbral es de limite de credito ( LC ):  1 - Es de LC,  0 - No es de LC
vars.put(&quot;USU_REG&quot;,  &quot;CAMN9999&quot;);                          // Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL&quot;,  &quot;0&quot;);      // Grupo de clave de umbral

// Valores csto_abo_consumo
vars.put(&quot;GRUPO_CIUDAD&quot;,  &quot;0&quot;);                    // Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS&quot;,  &quot;0&quot;);                           //Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG&quot;,  &quot;0&quot;);                               //
vars.put(&quot;TIPO_REG&quot;,  &quot;C&quot;);                                //C = Consumo, T = Tarificacion
vars.put(&quot;PRECIO_ALT&quot;,  &quot;0.0&quot;);                         //Precio de venta alterno
vars.put(&quot;CONSUMO_ANT&quot;,  &quot;0&quot;);                      //
vars.put(&quot;CONSUMO_EVENTO_ANT&quot;,  &quot;0&quot;);    //
vars.put(&quot;ESTATUS&quot;,  &quot;1&quot;);                                   //1 = activo, 0 = no activo

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ABO_MDN_ALL&quot;,    &quot;ALL&quot;);                             // Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;ESTATUS_QRY&quot;,  &quot;&quot;);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM umbral_tipo_llamada 
WHERE PLN_CLAVE = &apos;${PLN_CLAVE}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Agregando umbral de configuracion

INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE}&apos;,0,0,${TLL_CLAVE},${UMBRAL},
                   ${UMBRAL_EVENTO},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando abonado con estatus activado, ya que antes de la desactivaci칩n se ejecuta el SP sp_CancelaInCsto_Abo_Consumo_From_Abonado llamado por el trigger del abonado.

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, &apos;${ABO_MDN}&apos;, &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE}, 
                  ${GRUPO_CIUDAD}, ${GRUPO_PAIS}, ${UMBRAL}, ${UMBRAL}, ${UMBRAL}, 
                  ${UMBRAL_EVENTO}, ${UMBRAL_EVENTO}, ${UMBRAL_EVENTO}, ${LLAM_REG},${TIPO_COBRO},
                  &apos;${TIPO_REG}&apos;, &apos;&apos;, ${PRECIO_ALT}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT}, ${CONSUMO_EVENTO_ANT}, ${ESTATUS},   
                  ${UMBRAL_LC},${GRUPO_TLL_CLAVE_UMBRAL});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT ESTATUS, COUNT(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = ${LLAM_REG}
   AND PRECIO_ALT = ${PRECIO_ALT}
   AND CONSUMO_ANT = ${CONSUMO_ANT}
   AND CONSUMO_EVENTO_ANT = ${CONSUMO_EVENTO_ANT}
   AND TIPO_REG = &apos;${TIPO_REG}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ESTATUS_QRY,NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ESTATUS_QRY_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 15 - Cancelacion de umbrales en csto_abo_consumo, estan configurado dos umbrales de tipo de llamada(tll_clave), los umbrales son a nivel de abonado. El estatus de los registros en csto_abo_consumo es activo(1) y el ciclo es 2." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inABO_CLIENTE varchar(10)   -&gt; Clave del cliente
-- 2.- inABO_MDN varchar(10),          -&gt; Clave del abonado

/*
call sp_CancelaInCsto_Abo_Consumo_From_Abonado(inABO_CLIENTE char(10),
                                                                                                        inABO_MDN char(10) )
*/

 call sp_CancelaInCsto_Abo_Consumo_From_Abonado(?,?);</stringProp>
              <stringProp name="queryArguments">${ABO_CLIENTE},${ABO_MDN}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada del SP
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000015&quot;);      // Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000015&quot;);         // Clave del abonado
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);                    // Grupo al que pertenece el abonado
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      // Ciclo al que pertenece el abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TESTOK&quot;);   // Clave del plan
vars.put(&quot;ABO_EDOA_T&quot;,    &quot;A&quot;);                        // Estatus del abonado

// Valores umbral_tipo_llamada
vars.put(&quot;TLL_CLAVE&quot;,  &quot;4&quot;);                                         // Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;TLL_CLAVE_B&quot;,  &quot;5&quot;);                                    // Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;UMBRAL&quot;,  &quot;1&quot;);                                               // 
vars.put(&quot;UMBRAL_EVENTO&quot;,  &quot;3000&quot;);                      // Consumo disponible en minutos
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;5000&quot;);                      // Consumo disponible en minutos
vars.put(&quot;TIPO_COBRO&quot;,  &quot;0&quot;);                                      // Tipo de cobro
vars.put(&quot;STATUS_COBRO&quot;,  &quot;0&quot;);                                // Estatus oara el tipo de cobro: 1-Seguir cobrando, 2- Cortar
vars.put(&quot;POR_CUENTA&quot;,  &quot;0&quot;);                        // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                  // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;UMBRAL_LC&quot;,  &quot;0&quot;);                                        // Bandera que indica si el umbral es de limite de credito ( LC ):  1 - Es de LC,  0 - No es de LC
vars.put(&quot;USU_REG&quot;,  &quot;CAMN9999&quot;);                          // Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL&quot;,  &quot;0&quot;);      // Grupo de clave de umbral
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);      // Grupo de clave de umbral

// Valores csto_abo_consumo
vars.put(&quot;GRUPO_CIUDAD&quot;,  &quot;0&quot;);                    // Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS&quot;,  &quot;0&quot;);                           //Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG&quot;,  &quot;0&quot;);                               //
vars.put(&quot;TIPO_REG&quot;,  &quot;C&quot;);                                //C = Consumo, T = Tarificacion
vars.put(&quot;PRECIO_ALT&quot;,  &quot;0.0&quot;);                         //Precio de venta alterno
vars.put(&quot;CONSUMO_ANT&quot;,  &quot;0&quot;);                      //
vars.put(&quot;CONSUMO_EVENTO_ANT&quot;,  &quot;0&quot;);    //
vars.put(&quot;ESTATUS&quot;,  &quot;1&quot;);                                   //1 = activo, 0 = no activo

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ABO_MDN_ALL&quot;,    &quot;ALL&quot;);                             // Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;ESTATUS_QRY&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM umbral_tipo_llamada 
WHERE PLN_CLAVE = &apos;${PLN_CLAVE}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE}&apos;,0,0,${TLL_CLAVE},${UMBRAL},
                   ${UMBRAL_EVENTO},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Segundo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE}&apos;,0,0,${TLL_CLAVE_B},${UMBRAL},
                   ${UMBRAL_EVENTO_B},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA_B},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando abonado con estatus activado, ya que antes de la desactivaci칩n se ejecuta el SP sp_CancelaInCsto_Abo_Consumo_From_Abonado llamado por el trigger del abonado.

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, &apos;${ABO_MDN}&apos;, &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE}, 
                  ${GRUPO_CIUDAD}, ${GRUPO_PAIS}, ${UMBRAL}, ${UMBRAL}, ${UMBRAL}, 
                  ${UMBRAL_EVENTO}, ${UMBRAL_EVENTO}, ${UMBRAL_EVENTO}, ${LLAM_REG},${TIPO_COBRO},
                  &apos;${TIPO_REG}&apos;, &apos;&apos;, ${PRECIO_ALT}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT}, ${CONSUMO_EVENTO_ANT}, ${ESTATUS},   
                  ${UMBRAL_LC},${GRUPO_TLL_CLAVE_UMBRAL});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Segundo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, &apos;${ABO_MDN}&apos;, &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B}, 
                  ${GRUPO_CIUDAD}, ${GRUPO_PAIS}, ${UMBRAL}, ${UMBRAL}, ${UMBRAL}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG},${TIPO_COBRO},
                  &apos;${TIPO_REG}&apos;, &apos;&apos;, ${PRECIO_ALT}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT}, ${CONSUMO_EVENTO_ANT}, ${ESTATUS},   
                  ${UMBRAL_LC},${GRUPO_TLL_CLAVE_UMBRAL_B});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT ESTATUS
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = ${LLAM_REG}
   AND PRECIO_ALT = ${PRECIO_ALT}
   AND CONSUMO_ANT = ${CONSUMO_ANT}
   AND CONSUMO_EVENTO_ANT = ${CONSUMO_EVENTO_ANT}
   AND TIPO_REG = &apos;${TIPO_REG}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ESTATUS_QRY</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT ESTATUS
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = ${LLAM_REG}
   AND PRECIO_ALT = ${PRECIO_ALT}
   AND CONSUMO_ANT = ${CONSUMO_ANT}
   AND CONSUMO_EVENTO_ANT = ${CONSUMO_EVENTO_ANT}
   AND TIPO_REG = &apos;${TIPO_REG}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ESTATUS_QRY_B</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ESTATUS_QRY_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Segunda" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ESTATUS_QRY_B_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 16 - Cancelacion de umbral en csto_abo_consumo, esta configurado un solo umbral de tipo grupo de llamada umbral (GRUPO_TLL_CLAVE_UMBRAL), el umbral es a nivel de cuenta. El estatus del registro en csto_abo_consumo es activo(1) y el ciclo es 2." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inABO_CLIENTE varchar(10)   -&gt; Clave del cliente
-- 2.- inABO_MDN varchar(10),          -&gt; Clave del abonado

/*
call sp_CancelaInCsto_Abo_Consumo_From_Abonado(inABO_CLIENTE char(10),
                                                                                                        inABO_MDN char(10) )
*/

 call sp_CancelaInCsto_Abo_Consumo_From_Abonado(?,?);</stringProp>
              <stringProp name="queryArguments">${ABO_CLIENTE},${ABO_MDN}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada del SP
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000016&quot;);      // Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000016&quot;);         // Clave del abonado
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);                    // Grupo al que pertenece el abonado
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      // Ciclo al que pertenece el abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TESTOK&quot;);   // Clave del plan
vars.put(&quot;ABO_EDOA_T&quot;,    &quot;A&quot;);                        // Estatus del abonado

// Valores umbral_tipo_llamada
vars.put(&quot;TLL_CLAVE&quot;,  &quot;0&quot;);                                         // Tipo de llamada:   0 -&gt; No es un umbral de tipo llamada ( tll_clave)
vars.put(&quot;UMBRAL&quot;,  &quot;1&quot;);                                               // 
vars.put(&quot;UMBRAL_EVENTO&quot;,  &quot;3000&quot;);                      // Consumo disponible en minutos
vars.put(&quot;TIPO_COBRO&quot;,  &quot;0&quot;);                                      // Tipo de cobro
vars.put(&quot;STATUS_COBRO&quot;,  &quot;0&quot;);                                // Estatus oara el tipo de cobro: 1-Seguir cobrando, 2- Cortar
vars.put(&quot;POR_CUENTA&quot;,  &quot;1&quot;);                        // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;UMBRAL_LC&quot;,  &quot;0&quot;);                                        // Bandera que indica si el umbral es de limite de credito ( LC ):  1 - Es de LC,  0 - No es de LC
vars.put(&quot;USU_REG&quot;,  &quot;CAMN9999&quot;);                          // Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL&quot;,  &quot;3&quot;);      // Grupo de clave de umbral

// Valores csto_abo_consumo
vars.put(&quot;GRUPO_CIUDAD&quot;,  &quot;0&quot;);                    // Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS&quot;,  &quot;0&quot;);                           //Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG&quot;,  &quot;0&quot;);                               //
vars.put(&quot;TIPO_REG&quot;,  &quot;C&quot;);                                //C = Consumo, T = Tarificacion
vars.put(&quot;PRECIO_ALT&quot;,  &quot;0.0&quot;);                         //Precio de venta alterno
vars.put(&quot;CONSUMO_ANT&quot;,  &quot;0&quot;);                      //
vars.put(&quot;CONSUMO_EVENTO_ANT&quot;,  &quot;0&quot;);    //
vars.put(&quot;ESTATUS&quot;,  &quot;1&quot;);                                   //1 = activo, 0 = no activo

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ABO_MDN_ALL&quot;,    &quot;ALL&quot;);                             // Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;ESTATUS_QRY&quot;,  &quot;&quot;);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM umbral_tipo_llamada 
WHERE PLN_CLAVE = &apos;${PLN_CLAVE}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Agregando umbral de configuracion

INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE}&apos;,0,0,${TLL_CLAVE},${UMBRAL},
                   ${UMBRAL_EVENTO},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando abonado con estatus activado, ya que antes de la desactivaci칩n se ejecuta el SP sp_CancelaInCsto_Abo_Consumo_From_Abonado llamado por el trigger del abonado.

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) , &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE}, 
                  ${GRUPO_CIUDAD}, ${GRUPO_PAIS}, ${UMBRAL}, ${UMBRAL}, ${UMBRAL}, 
                  ${UMBRAL_EVENTO}, ${UMBRAL_EVENTO}, ${UMBRAL_EVENTO}, ${LLAM_REG},${TIPO_COBRO},
                  &apos;${TIPO_REG}&apos;, &apos;&apos;, ${PRECIO_ALT}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT}, ${CONSUMO_EVENTO_ANT}, ${ESTATUS},   
                  ${UMBRAL_LC},${GRUPO_TLL_CLAVE_UMBRAL});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT ESTATUS, COUNT(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = ${LLAM_REG}
   AND PRECIO_ALT = ${PRECIO_ALT}
   AND CONSUMO_ANT = ${CONSUMO_ANT}
   AND CONSUMO_EVENTO_ANT = ${CONSUMO_EVENTO_ANT}
   AND TIPO_REG = &apos;${TIPO_REG}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ESTATUS_QRY,NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ESTATUS_QRY_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 17 - Cancelacion de umbrales en csto_abo_consumo, estan configurado dos umbrales, uno de tipo de llamada(tll_clave) y otro de tipo grupo de llamada umbral (GRUPO_TLL_CLAVE_UMBRAL), los umbrales son a nivel de abonado. El estatus de los registros en csto_abo_consumo es activo(1) y el ciclo es 2." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inABO_CLIENTE varchar(10)   -&gt; Clave del cliente
-- 2.- inABO_MDN varchar(10),          -&gt; Clave del abonado

/*
call sp_CancelaInCsto_Abo_Consumo_From_Abonado(inABO_CLIENTE char(10),
                                                                                                        inABO_MDN char(10) )
*/

 call sp_CancelaInCsto_Abo_Consumo_From_Abonado(?,?);</stringProp>
              <stringProp name="queryArguments">${ABO_CLIENTE},${ABO_MDN}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada del SP
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000017&quot;);      // Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000017&quot;);         // Clave del abonado
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);                    // Grupo al que pertenece el abonado
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      // Ciclo al que pertenece el abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TESTOK&quot;);   // Clave del plan
vars.put(&quot;ABO_EDOA_T&quot;,    &quot;A&quot;);                        // Estatus del abonado

// Valores umbral_tipo_llamada
vars.put(&quot;TLL_CLAVE&quot;,  &quot;4&quot;);                                         // Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;TLL_CLAVE_B&quot;,  &quot;0&quot;);                                    // Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;UMBRAL&quot;,  &quot;1&quot;);                                               // 
vars.put(&quot;UMBRAL_EVENTO&quot;,  &quot;3000&quot;);                      // Consumo disponible en minutos
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;5000&quot;);                      // Consumo disponible en minutos
vars.put(&quot;TIPO_COBRO&quot;,  &quot;0&quot;);                                      // Tipo de cobro
vars.put(&quot;STATUS_COBRO&quot;,  &quot;0&quot;);                                // Estatus oara el tipo de cobro: 1-Seguir cobrando, 2- Cortar
vars.put(&quot;POR_CUENTA&quot;,  &quot;0&quot;);                        // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;1&quot;);                  // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;UMBRAL_LC&quot;,  &quot;0&quot;);                                        // Bandera que indica si el umbral es de limite de credito ( LC ):  1 - Es de LC,  0 - No es de LC
vars.put(&quot;USU_REG&quot;,  &quot;CAMN9999&quot;);                          // Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL&quot;,  &quot;0&quot;);      // Grupo de clave de umbral
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;3&quot;);      // Grupo de clave de umbral

// Valores csto_abo_consumo
vars.put(&quot;GRUPO_CIUDAD&quot;,  &quot;0&quot;);                    // Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS&quot;,  &quot;0&quot;);                           //Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG&quot;,  &quot;0&quot;);                               //
vars.put(&quot;TIPO_REG&quot;,  &quot;C&quot;);                                //C = Consumo, T = Tarificacion
vars.put(&quot;PRECIO_ALT&quot;,  &quot;0.0&quot;);                         //Precio de venta alterno
vars.put(&quot;CONSUMO_ANT&quot;,  &quot;0&quot;);                      //
vars.put(&quot;CONSUMO_EVENTO_ANT&quot;,  &quot;0&quot;);    //
vars.put(&quot;ESTATUS&quot;,  &quot;1&quot;);                                   //1 = activo, 0 = no activo

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ABO_MDN_ALL&quot;,    &quot;ALL&quot;);                             // Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;ESTATUS_QRY&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM umbral_tipo_llamada 
WHERE PLN_CLAVE = &apos;${PLN_CLAVE}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE}&apos;,0,0,${TLL_CLAVE},${UMBRAL},
                   ${UMBRAL_EVENTO},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Segundo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE}&apos;,0,0,${TLL_CLAVE_B},${UMBRAL},
                   ${UMBRAL_EVENTO_B},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA_B},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando abonado con estatus activado, ya que antes de la desactivaci칩n se ejecuta el SP sp_CancelaInCsto_Abo_Consumo_From_Abonado llamado por el trigger del abonado.

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) , &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE}, 
                  ${GRUPO_CIUDAD}, ${GRUPO_PAIS}, ${UMBRAL}, ${UMBRAL}, ${UMBRAL}, 
                  ${UMBRAL_EVENTO}, ${UMBRAL_EVENTO}, ${UMBRAL_EVENTO}, ${LLAM_REG},${TIPO_COBRO},
                  &apos;${TIPO_REG}&apos;, &apos;&apos;, ${PRECIO_ALT}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT}, ${CONSUMO_EVENTO_ANT}, ${ESTATUS},   
                  ${UMBRAL_LC},${GRUPO_TLL_CLAVE_UMBRAL});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Segundo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) , &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B}, 
                  ${GRUPO_CIUDAD}, ${GRUPO_PAIS}, ${UMBRAL}, ${UMBRAL}, ${UMBRAL}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG},${TIPO_COBRO},
                  &apos;${TIPO_REG}&apos;, &apos;&apos;, ${PRECIO_ALT}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT}, ${CONSUMO_EVENTO_ANT}, ${ESTATUS},   
                  ${UMBRAL_LC},${GRUPO_TLL_CLAVE_UMBRAL_B});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT ESTATUS
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = ${LLAM_REG}
   AND PRECIO_ALT = ${PRECIO_ALT}
   AND CONSUMO_ANT = ${CONSUMO_ANT}
   AND CONSUMO_EVENTO_ANT = ${CONSUMO_EVENTO_ANT}
   AND TIPO_REG = &apos;${TIPO_REG}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ESTATUS_QRY</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT ESTATUS
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = ${LLAM_REG}
   AND PRECIO_ALT = ${PRECIO_ALT}
   AND CONSUMO_ANT = ${CONSUMO_ANT}
   AND CONSUMO_EVENTO_ANT = ${CONSUMO_EVENTO_ANT}
   AND TIPO_REG = &apos;${TIPO_REG}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ESTATUS_QRY_B</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ESTATUS_QRY_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Segunda" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ESTATUS_QRY_B_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="SP -&gt; MBS.sp_Update_in_CstoAboCon_from_Abonado" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 18 - Actualizaci칩n de umbral en csto_abo_consumo, originalmente se tiene configurado un solo umbral de tipo de llamada(tll_clave 4-&gt; MAXCOM - LD NACIONAL) en su plan, el nuevo umbral tambien sera de tipo llamada (tll_clave 5-&gt; MAXCOM - CELULAR LD (045)) en su nuevo plan, ambos umbrales son a nivel de abonado. El estatus del registro en csto_abo_consumo es activo(1) y el ciclo del abonado es 2." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inABO_CLIENTE varchar(10)   -&gt; Clave del cliente
-- 2.- inABO_MDN varchar(10),          -&gt; Clave del abonado
-- 3.- inABO_GPO_T varchar(10),      -&gt; Grupo al que pertenece el abonado
-- 4.- inABO_CIC_CVE varchar(10),  -&gt; Ciclo del abonado
-- 5.- inPLN_CLAVE varchar(10),       -&gt; Plan del abonado nuevo
-- 6.- outPLN_CLAVE varchar(10),     -&gt; Plan del abonado anterior
-- 7.- inABO_EDOA_T varchar(4)        -&gt; Estatus o estado del abonado

/*
CALL sp_Update_in_CstoAboCon_from_Abonado(
                             			NEW.ABO_CLIENTE,
                             			NEW.ABO_MDN,
	                             		NEW.ABO_GPO_T,
                             			NEW.CIC_CLAVE,
                             			NEW.PLN_CLAVE,
                             			OLD.PLN_CLAVE,
                             			NEW.ABO_EDOA_T);
*/

 call sp_Update_in_CstoAboCon_from_Abonado(?,?,?,?,?,?,?);

</stringProp>
              <stringProp name="queryArguments">${ABO_CLIENTE},${ABO_MDN},${ABO_GPO_T},${ABO_CIC_CVE},${PLN_CLAVE_NUEVO},${PLN_CLAVE_ANTERIOR},${ABO_EDOA_T}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada del SP
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000018&quot;);      // Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000018&quot;);         // Clave del abonado
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);                    // Grupo al que pertenece el abonado
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      // Ciclo al que pertenece el abonado
vars.put(&quot;PLN_CLAVE_ANTERIOR&quot;,    &quot;PLN_TESTOK&quot;);   // Clave del plan anterior del abonado
vars.put(&quot;PLN_CLAVE_NUEVO&quot;,    &quot;PLN_TESTGO&quot;);   // Clave del plan nuevo del abonado
vars.put(&quot;ABO_EDOA_T&quot;,    &quot;A&quot;);                        // Estatus del abonado

// Valores umbral_tipo_llamada
vars.put(&quot;TLL_CLAVE_A&quot;,  &quot;4&quot;);                            // Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;TLL_CLAVE_B&quot;,  &quot;5&quot;);                            // Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;UMBRAL&quot;,  &quot;1&quot;);                                       // 
vars.put(&quot;UMBRAL_EVENTO_A&quot;,  &quot;3000&quot;);         // Consumo disponible en minutos
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;5000&quot;);         // Consumo disponible en minutos
vars.put(&quot;TIPO_COBRO&quot;,  &quot;0&quot;);                              // Tipo de cobro
vars.put(&quot;STATUS_COBRO&quot;,  &quot;0&quot;);                        // Estatus oara el tipo de cobro: 1-Seguir cobrando, 2- Cortar
vars.put(&quot;POR_CUENTA_A&quot;,  &quot;0&quot;);                        // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                        // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;UMBRAL_LC&quot;,  &quot;0&quot;);                                // Bandera que indica si el umbral es de limite de credito ( LC ):  1 - Es de LC,  0 - No es de LC
vars.put(&quot;USU_REG&quot;,  &quot;CAMN9999&quot;);                  // Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,  &quot;0&quot;);      // Grupo de clave de umbral
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);      // Grupo de clave de umbral

// Valores csto_abo_consumo
vars.put(&quot;GRUPO_CIUDAD&quot;,  &quot;0&quot;);                    // Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS&quot;,  &quot;0&quot;);                           //Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG&quot;,  &quot;0&quot;);                               //
vars.put(&quot;TIPO_REG&quot;,  &quot;C&quot;);                                //C = Consumo, T = Tarificacion
vars.put(&quot;PRECIO_ALT&quot;,  &quot;0.0&quot;);                         //Precio de venta alterno
vars.put(&quot;CONSUMO_ANT&quot;,  &quot;0&quot;);                      //
vars.put(&quot;CONSUMO_EVENTO_ANT&quot;,  &quot;0&quot;);    //
vars.put(&quot;ESTATUS&quot;,  &quot;1&quot;);                                   //1 = activo, 0 = no activo

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ABO_MDN_ALL&quot;,    &quot;ALL&quot;);                  // Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada del plan anterior y el nuevo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM umbral_tipo_llamada 
WHERE PLN_CLAVE in (&apos;${PLN_CLAVE_ANTERIOR}&apos;,&apos;${PLN_CLAVE_NUEVO}&apos;);
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero - Plan anterior" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE_ANTERIOR}&apos;,0,0,${TLL_CLAVE_A},${UMBRAL},
                   ${UMBRAL_EVENTO_A},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA_A},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL_A});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Segundo - Nuevo plan" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE_NUEVO}&apos;,0,0,${TLL_CLAVE_B},${UMBRAL},
                   ${UMBRAL_EVENTO_B},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA_B},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando abonado para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE_NUEVO}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_A}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_A}, 
                  ${GRUPO_CIUDAD}, ${GRUPO_PAIS}, ${UMBRAL}, ${UMBRAL}, ${UMBRAL}, 
                  ${UMBRAL_EVENTO_A}, ${UMBRAL_EVENTO_A}, ${UMBRAL_EVENTO_A}, ${LLAM_REG},${TIPO_COBRO},
                  &apos;${TIPO_REG}&apos;, &apos;&apos;, ${PRECIO_ALT}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT}, ${CONSUMO_EVENTO_ANT}, ${ESTATUS},   
                  ${UMBRAL_LC},${GRUPO_TLL_CLAVE_UMBRAL_A});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_A}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_A}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_A}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_A}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_A}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = ${LLAM_REG}
   AND PRECIO_ALT = ${PRECIO_ALT}
   AND CONSUMO_ANT = ${CONSUMO_ANT}
   AND CONSUMO_EVENTO_ANT = ${CONSUMO_EVENTO_ANT}
   AND TIPO_REG = &apos;${TIPO_REG}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_A};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ESTATUS_QRY_A</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT ESTATUS
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = ${LLAM_REG}
   AND PRECIO_ALT = ${PRECIO_ALT}
   AND CONSUMO_ANT = ${CONSUMO_ANT}
   AND CONSUMO_EVENTO_ANT = ${CONSUMO_EVENTO_ANT}
   AND TIPO_REG = &apos;${TIPO_REG}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ESTATUS_QRY_B</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ESTATUS_QRY_A_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Segunda" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ESTATUS_QRY_B_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 19 - Actualizaci칩n de umbral en csto_abo_consumo, originalmente se tiene configurado un umbral de tipo grupo de llamada umbral (GRUPO_TLL_CLAVE_UMBRAL &gt; 0, es decir con tll_clave = 0) en su plan, el nuevo umbral tambien sera de tipo grupo de llamada umbral (GRUPO_TLL_CLAVE_UMBRAL &gt; 0, es decir con tll_clave = 0) en su nuevo plan, ambos son a nivel de abonado. El estatus del registro en csto_abo_consumo es activo(1) y el ciclo del abonado es 2." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inABO_CLIENTE varchar(10)   -&gt; Clave del cliente
-- 2.- inABO_MDN varchar(10),          -&gt; Clave del abonado
-- 3.- inABO_GPO_T varchar(10),      -&gt; Grupo al que pertenece el abonado
-- 4.- inABO_CIC_CVE varchar(10),  -&gt; Ciclo del abonado
-- 5.- inPLN_CLAVE varchar(10),       -&gt; Plan del abonado nuevo
-- 6.- outPLN_CLAVE varchar(10),     -&gt; Plan del abonado anterior
-- 7.- inABO_EDOA_T varchar(4)        -&gt; Estatus o estado del abonado

/*
CALL sp_Update_in_CstoAboCon_from_Abonado(
                             			NEW.ABO_CLIENTE,
                             			NEW.ABO_MDN,
	                             		NEW.ABO_GPO_T,
                             			NEW.CIC_CLAVE,
                             			NEW.PLN_CLAVE,
                             			OLD.PLN_CLAVE,
                             			NEW.ABO_EDOA_T);
*/

 call sp_Update_in_CstoAboCon_from_Abonado(?,?,?,?,?,?,?);

</stringProp>
              <stringProp name="queryArguments">${ABO_CLIENTE},${ABO_MDN},${ABO_GPO_T},${ABO_CIC_CVE},${PLN_CLAVE_NUEVO},${PLN_CLAVE_ANTERIOR},${ABO_EDOA_T}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada del SP
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000019&quot;);      // Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000019&quot;);         // Clave del abonado
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);                    // Grupo al que pertenece el abonado
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      // Ciclo al que pertenece el abonado
vars.put(&quot;PLN_CLAVE_ANTERIOR&quot;,    &quot;PLN_TESTOK&quot;);   // Clave del plan anterior del abonado
vars.put(&quot;PLN_CLAVE_NUEVO&quot;,    &quot;PLN_TESTGO&quot;);   // Clave del plan nuevo del abonado
vars.put(&quot;ABO_EDOA_T&quot;,    &quot;A&quot;);                        // Estatus del abonado

// Valores umbral_tipo_llamada
vars.put(&quot;TLL_CLAVE_A&quot;,  &quot;0&quot;);                            // Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;TLL_CLAVE_B&quot;,  &quot;0&quot;);                            // Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;UMBRAL&quot;,  &quot;1&quot;);                                       // 
vars.put(&quot;UMBRAL_EVENTO_A&quot;,  &quot;3000&quot;);         // Consumo disponible en minutos
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;5000&quot;);         // Consumo disponible en minutos
vars.put(&quot;TIPO_COBRO&quot;,  &quot;0&quot;);                              // Tipo de cobro
vars.put(&quot;STATUS_COBRO&quot;,  &quot;0&quot;);                        // Estatus oara el tipo de cobro: 1-Seguir cobrando, 2- Cortar
vars.put(&quot;POR_CUENTA_A&quot;,  &quot;0&quot;);                        // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                        // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;UMBRAL_LC&quot;,  &quot;0&quot;);                                // Bandera que indica si el umbral es de limite de credito ( LC ):  1 - Es de LC,  0 - No es de LC
vars.put(&quot;USU_REG&quot;,  &quot;CAMN9999&quot;);                  // Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,  &quot;5&quot;);      // Grupo de clave de umbral ficticio
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;6&quot;);      // Grupo de clave de umbral ficticio

// Valores csto_abo_consumo
vars.put(&quot;GRUPO_CIUDAD&quot;,  &quot;0&quot;);                    // Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS&quot;,  &quot;0&quot;);                           //Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG&quot;,  &quot;0&quot;);                               //
vars.put(&quot;TIPO_REG&quot;,  &quot;C&quot;);                                //C = Consumo, T = Tarificacion
vars.put(&quot;PRECIO_ALT&quot;,  &quot;0.0&quot;);                         //Precio de venta alterno
vars.put(&quot;CONSUMO_ANT&quot;,  &quot;0&quot;);                      //
vars.put(&quot;CONSUMO_EVENTO_ANT&quot;,  &quot;0&quot;);    //
vars.put(&quot;ESTATUS&quot;,  &quot;1&quot;);                                   //1 = activo, 0 = no activo

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ABO_MDN_ALL&quot;,    &quot;ALL&quot;);                  // Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada del plan anterior y el nuevo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM umbral_tipo_llamada 
WHERE PLN_CLAVE in (&apos;${PLN_CLAVE_ANTERIOR}&apos;,&apos;${PLN_CLAVE_NUEVO}&apos;);
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero - Plan anterior" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE_ANTERIOR}&apos;,0,0,${TLL_CLAVE_A},${UMBRAL},
                   ${UMBRAL_EVENTO_A},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA_A},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL_A});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Segundo - Nuevo plan" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE_NUEVO}&apos;,0,0,${TLL_CLAVE_B},${UMBRAL},
                   ${UMBRAL_EVENTO_B},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA_B},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando abonado para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE_NUEVO}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_A}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_A}, 
                  ${GRUPO_CIUDAD}, ${GRUPO_PAIS}, ${UMBRAL}, ${UMBRAL}, ${UMBRAL}, 
                  ${UMBRAL_EVENTO_A}, ${UMBRAL_EVENTO_A}, ${UMBRAL_EVENTO_A}, ${LLAM_REG},${TIPO_COBRO},
                  &apos;${TIPO_REG}&apos;, &apos;&apos;, ${PRECIO_ALT}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT}, ${CONSUMO_EVENTO_ANT}, ${ESTATUS},   
                  ${UMBRAL_LC},${GRUPO_TLL_CLAVE_UMBRAL_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_A}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_A}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_A}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_A}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_A}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = ${LLAM_REG}
   AND PRECIO_ALT = ${PRECIO_ALT}
   AND CONSUMO_ANT = ${CONSUMO_ANT}
   AND CONSUMO_EVENTO_ANT = ${CONSUMO_EVENTO_ANT}
   AND TIPO_REG = &apos;${TIPO_REG}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_A};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ESTATUS_QRY_A</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT ESTATUS
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = ${LLAM_REG}
   AND PRECIO_ALT = ${PRECIO_ALT}
   AND CONSUMO_ANT = ${CONSUMO_ANT}
   AND CONSUMO_EVENTO_ANT = ${CONSUMO_EVENTO_ANT}
   AND TIPO_REG = &apos;${TIPO_REG}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ESTATUS_QRY_B</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ESTATUS_QRY_A_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Segunda" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ESTATUS_QRY_B_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 20 - Actualizaci칩n de umbrales en csto_abo_consumo, originalmente se tiene configurado un solo umbral de tipo de llamada(tll_clave 4-&gt; MAXCOM - LD NACIONAL) a nivel abonado en su plan, el nuevo plan de abonado incluye dos umbrales uno de tipo llamada (tll_clave &gt;0) a nivel de abonado y otro de tipo grupo de llamada umbral (GRUPO_TLL_CLAVE_UMBRAL &gt; 0) a nivel de cuenta. El estatus del registro en csto_abo_consumo es activo(1) y el ciclo del abonado es 2." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inABO_CLIENTE varchar(10)   -&gt; Clave del cliente
-- 2.- inABO_MDN varchar(10),          -&gt; Clave del abonado
-- 3.- inABO_GPO_T varchar(10),      -&gt; Grupo al que pertenece el abonado
-- 4.- inABO_CIC_CVE varchar(10),  -&gt; Ciclo del abonado
-- 5.- inPLN_CLAVE varchar(10),       -&gt; Plan del abonado nuevo
-- 6.- outPLN_CLAVE varchar(10),     -&gt; Plan del abonado anterior
-- 7.- inABO_EDOA_T varchar(4)        -&gt; Estatus o estado del abonado

/*
CALL sp_Update_in_CstoAboCon_from_Abonado(
                             			NEW.ABO_CLIENTE,
                             			NEW.ABO_MDN,
	                             		NEW.ABO_GPO_T,
                             			NEW.CIC_CLAVE,
                             			NEW.PLN_CLAVE,
                             			OLD.PLN_CLAVE,
                             			NEW.ABO_EDOA_T);
*/

 call sp_Update_in_CstoAboCon_from_Abonado(?,?,?,?,?,?,?);

</stringProp>
              <stringProp name="queryArguments">${ABO_CLIENTE},${ABO_MDN},${ABO_GPO_T},${ABO_CIC_CVE},${PLN_CLAVE_NUEVO},${PLN_CLAVE_ANTERIOR},${ABO_EDOA_T}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada del SP
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000020&quot;);      // Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000020&quot;);         // Clave del abonado
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);                    // Grupo al que pertenece el abonado
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      // Ciclo al que pertenece el abonado
vars.put(&quot;PLN_CLAVE_ANTERIOR&quot;,    &quot;PLN_TESTOK&quot;);   // Clave del plan anterior del abonado
vars.put(&quot;PLN_CLAVE_NUEVO&quot;,    &quot;PLN_TESTGO&quot;);   // Clave del plan nuevo del abonado
vars.put(&quot;ABO_EDOA_T&quot;,    &quot;A&quot;);                        // Estatus del abonado

// Valores umbral_tipo_llamada
vars.put(&quot;TLL_CLAVE_A&quot;,  &quot;4&quot;);                            // Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;TLL_CLAVE_B&quot;,  &quot;5&quot;);                            // Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;TLL_CLAVE_C&quot;,  &quot;0&quot;);                            // Tipo de llamada:   0 -&gt; 
vars.put(&quot;UMBRAL&quot;,  &quot;1&quot;);                                       // 
vars.put(&quot;UMBRAL_EVENTO_A&quot;,  &quot;3000&quot;);         // Consumo disponible en minutos
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;5000&quot;);         // Consumo disponible en minutos
vars.put(&quot;UMBRAL_EVENTO_C&quot;,  &quot;7000&quot;);         // Consumo disponible en minutos
vars.put(&quot;TIPO_COBRO&quot;,  &quot;0&quot;);                              // Tipo de cobro
vars.put(&quot;STATUS_COBRO&quot;,  &quot;0&quot;);                        // Estatus oara el tipo de cobro: 1-Seguir cobrando, 2- Cortar
vars.put(&quot;POR_CUENTA_A&quot;,  &quot;0&quot;);                        // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                        // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;POR_CUENTA_C&quot;,  &quot;1&quot;);                        // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;UMBRAL_LC&quot;,  &quot;0&quot;);                                // Bandera que indica si el umbral es de limite de credito ( LC ):  1 - Es de LC,  0 - No es de LC
vars.put(&quot;USU_REG&quot;,  &quot;CAMN9999&quot;);                  // Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,  &quot;0&quot;);      // Grupo de clave de umbral ficticio
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);      // Grupo de clave de umbral ficticio
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_C&quot;,  &quot;3&quot;);      // Grupo de clave de umbral ficticio

// Valores csto_abo_consumo
vars.put(&quot;GRUPO_CIUDAD&quot;,  &quot;0&quot;);                    // Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS&quot;,  &quot;0&quot;);                           //Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG&quot;,  &quot;0&quot;);                               //
vars.put(&quot;TIPO_REG&quot;,  &quot;C&quot;);                                //C = Consumo, T = Tarificacion
vars.put(&quot;PRECIO_ALT&quot;,  &quot;0.0&quot;);                         //Precio de venta alterno
vars.put(&quot;CONSUMO_ANT&quot;,  &quot;0&quot;);                      //
vars.put(&quot;CONSUMO_EVENTO_ANT&quot;,  &quot;0&quot;);    //
vars.put(&quot;ESTATUS&quot;,  &quot;1&quot;);                                   //1 = activo, 0 = no activo

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ABO_MDN_ALL&quot;,    &quot;ALL&quot;);                  // Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_C&quot;,  &quot;&quot;);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada del plan anterior y el nuevo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM umbral_tipo_llamada 
WHERE PLN_CLAVE in (&apos;${PLN_CLAVE_ANTERIOR}&apos;,&apos;${PLN_CLAVE_NUEVO}&apos;);
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero - Plan anterior" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE_ANTERIOR}&apos;,0,0,${TLL_CLAVE_A},${UMBRAL},
                   ${UMBRAL_EVENTO_A},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA_A},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL_A});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Segundo - Nuevo plan" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE_NUEVO}&apos;,0,0,${TLL_CLAVE_B},${UMBRAL},
                   ${UMBRAL_EVENTO_B},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA_B},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Tercero - Nuevo plan" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE_NUEVO}&apos;,0,0,${TLL_CLAVE_C},${UMBRAL},
                   ${UMBRAL_EVENTO_C},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA_C},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL_C});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando abonado para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE_ANTERIOR}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_A}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_A}, 
                  ${GRUPO_CIUDAD}, ${GRUPO_PAIS}, ${UMBRAL}, ${UMBRAL}, ${UMBRAL}, 
                  ${UMBRAL_EVENTO_A}, ${UMBRAL_EVENTO_A}, ${UMBRAL_EVENTO_A}, ${LLAM_REG},${TIPO_COBRO},
                  &apos;${TIPO_REG}&apos;, &apos;&apos;, ${PRECIO_ALT}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT}, ${CONSUMO_EVENTO_ANT}, ${ESTATUS},   
                  ${UMBRAL_LC},${GRUPO_TLL_CLAVE_UMBRAL_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_A}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_A}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_A}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_A}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_A}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = ${LLAM_REG}
   AND PRECIO_ALT = ${PRECIO_ALT}
   AND CONSUMO_ANT = ${CONSUMO_ANT}
   AND CONSUMO_EVENTO_ANT = ${CONSUMO_EVENTO_ANT}
   AND TIPO_REG = &apos;${TIPO_REG}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_A};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ESTATUS_QRY_A</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT ESTATUS
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = ${LLAM_REG}
   AND PRECIO_ALT = ${PRECIO_ALT}
   AND CONSUMO_ANT = ${CONSUMO_ANT}
   AND CONSUMO_EVENTO_ANT = ${CONSUMO_EVENTO_ANT}
   AND TIPO_REG = &apos;${TIPO_REG}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ESTATUS_QRY_B</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT ESTATUS
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_C}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_C}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_C}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_C}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_C}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = ${LLAM_REG}
   AND PRECIO_ALT = ${PRECIO_ALT}
   AND CONSUMO_ANT = ${CONSUMO_ANT}
   AND CONSUMO_EVENTO_ANT = ${CONSUMO_EVENTO_ANT}
   AND TIPO_REG = &apos;${TIPO_REG}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_C};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ESTATUS_QRY_C</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ESTATUS_QRY_A_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Segunda" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ESTATUS_QRY_B_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Tercera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ESTATUS_QRY_C_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 21 - Actualizaci칩n de umbrales en csto_abo_consumo, originalmente se tiene configurado un solo umbral de tipo grupo de llamada umbral (GRUPO_TLL_CLAVE_UMBRAL &gt; 0) a nivel de cuenta en su plan, el nuevo plan de abonado incluye un umbral de tipo grupo de llamada umbral (GRUPO_TLL_CLAVE_UMBRAL &gt; 0) a nivel de cuenta. El estatus del registro en csto_abo_consumo es activo(1) y el ciclo del abonado es 2." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inABO_CLIENTE varchar(10)   -&gt; Clave del cliente
-- 2.- inABO_MDN varchar(10),          -&gt; Clave del abonado
-- 3.- inABO_GPO_T varchar(10),      -&gt; Grupo al que pertenece el abonado
-- 4.- inABO_CIC_CVE varchar(10),  -&gt; Ciclo del abonado
-- 5.- inPLN_CLAVE varchar(10),       -&gt; Plan del abonado nuevo
-- 6.- outPLN_CLAVE varchar(10),     -&gt; Plan del abonado anterior
-- 7.- inABO_EDOA_T varchar(4)        -&gt; Estatus o estado del abonado

/*
CALL sp_Update_in_CstoAboCon_from_Abonado(
                             			NEW.ABO_CLIENTE,
                             			NEW.ABO_MDN,
	                             		NEW.ABO_GPO_T,
                             			NEW.CIC_CLAVE,
                             			NEW.PLN_CLAVE,
                             			OLD.PLN_CLAVE,
                             			NEW.ABO_EDOA_T);
*/

 call sp_Update_in_CstoAboCon_from_Abonado(?,?,?,?,?,?,?);

</stringProp>
              <stringProp name="queryArguments">${ABO_CLIENTE},${ABO_MDN},${ABO_GPO_T},${ABO_CIC_CVE},${PLN_CLAVE_NUEVO},${PLN_CLAVE_ANTERIOR},${ABO_EDOA_T}</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR,VARCHAR</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada del SP
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000021&quot;);      // Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000021&quot;);         // Clave del abonado
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);                    // Grupo al que pertenece el abonado
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      // Ciclo al que pertenece el abonado
vars.put(&quot;PLN_CLAVE_ANTERIOR&quot;,    &quot;PLN_TESTOK&quot;);   // Clave del plan anterior del abonado
vars.put(&quot;PLN_CLAVE_NUEVO&quot;,    &quot;PLN_TESTGO&quot;);   // Clave del plan nuevo del abonado
vars.put(&quot;ABO_EDOA_T&quot;,    &quot;A&quot;);                        // Estatus del abonado

// Valores umbral_tipo_llamada
vars.put(&quot;TLL_CLAVE_A&quot;,  &quot;0&quot;);                            // Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;TLL_CLAVE_B&quot;,  &quot;0&quot;);                            // Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;UMBRAL&quot;,  &quot;1&quot;);                                       // 
vars.put(&quot;UMBRAL_EVENTO_A&quot;,  &quot;3000&quot;);         // Consumo disponible en minutos
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;5000&quot;);         // Consumo disponible en minutos
vars.put(&quot;TIPO_COBRO&quot;,  &quot;0&quot;);                              // Tipo de cobro
vars.put(&quot;STATUS_COBRO&quot;,  &quot;0&quot;);                        // Estatus oara el tipo de cobro: 1-Seguir cobrando, 2- Cortar
vars.put(&quot;POR_CUENTA_A&quot;,  &quot;1&quot;);                        // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;1&quot;);                        // Indicardor para saber si el umbral es por cuenta: 1- Es por cuenta(nivel de cuenta),  0- No es por cuenta(es anivel de abonado)
vars.put(&quot;UMBRAL_LC&quot;,  &quot;0&quot;);                                // Bandera que indica si el umbral es de limite de credito ( LC ):  1 - Es de LC,  0 - No es de LC
vars.put(&quot;USU_REG&quot;,  &quot;CAMN9999&quot;);                  // Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,  &quot;3&quot;);      // Grupo de clave de umbral ficticio
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;4&quot;);      // Grupo de clave de umbral ficticio

// Valores csto_abo_consumo
vars.put(&quot;GRUPO_CIUDAD&quot;,  &quot;0&quot;);                    // Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS&quot;,  &quot;0&quot;);                           //Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG&quot;,  &quot;0&quot;);                               //
vars.put(&quot;TIPO_REG&quot;,  &quot;C&quot;);                                //C = Consumo, T = Tarificacion
vars.put(&quot;PRECIO_ALT&quot;,  &quot;0.0&quot;);                         //Precio de venta alterno
vars.put(&quot;CONSUMO_ANT&quot;,  &quot;0&quot;);                      //
vars.put(&quot;CONSUMO_EVENTO_ANT&quot;,  &quot;0&quot;);    //
vars.put(&quot;ESTATUS&quot;,  &quot;1&quot;);                                   //1 = activo, 0 = no activo

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ABO_MDN_ALL&quot;,    &quot;ALL&quot;);                  // Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada del plan anterior y el nuevo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM umbral_tipo_llamada 
WHERE PLN_CLAVE in (&apos;${PLN_CLAVE_ANTERIOR}&apos;,&apos;${PLN_CLAVE_NUEVO}&apos;);
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero - Plan anterior" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE_ANTERIOR}&apos;,0,0,${TLL_CLAVE_A},${UMBRAL},
                   ${UMBRAL_EVENTO_A},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA_A},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL_A});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Segundo - Nuevo plan" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">INSERT 
     INTO umbral_tipo_llamada
        ( `PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`, 
          `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
          `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`GRUPO_TLL_CLAVE_UMBRAL`)
VALUES ( &apos;${PLN_CLAVE_NUEVO}&apos;,0,0,${TLL_CLAVE_B},${UMBRAL},
                   ${UMBRAL_EVENTO_B},${TIPO_COBRO},${STATUS_COBRO},${POR_CUENTA_B},${UMBRAL_LC},
                   &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando abonado para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE_ANTERIOR}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_A}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_A}, 
                  ${GRUPO_CIUDAD}, ${GRUPO_PAIS}, ${UMBRAL}, ${UMBRAL}, ${UMBRAL}, 
                  ${UMBRAL_EVENTO_A}, ${UMBRAL_EVENTO_A}, ${UMBRAL_EVENTO_A}, ${LLAM_REG},${TIPO_COBRO},
                  &apos;${TIPO_REG}&apos;, &apos;&apos;, ${PRECIO_ALT}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT}, ${CONSUMO_EVENTO_ANT}, ${ESTATUS},   
                  ${UMBRAL_LC},${GRUPO_TLL_CLAVE_UMBRAL_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_A}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_A}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_A}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_A}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_A}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = ${LLAM_REG}
   AND PRECIO_ALT = ${PRECIO_ALT}
   AND CONSUMO_ANT = ${CONSUMO_ANT}
   AND CONSUMO_EVENTO_ANT = ${CONSUMO_EVENTO_ANT}
   AND TIPO_REG = &apos;${TIPO_REG}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_A};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ESTATUS_QRY_A</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT ESTATUS
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL}
   AND CONSUMO = ${UMBRAL}
   AND CONSUMO_LC = ${UMBRAL}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC}&apos;
   AND LLAM_REG = ${LLAM_REG}
   AND PRECIO_ALT = ${PRECIO_ALT}
   AND CONSUMO_ANT = ${CONSUMO_ANT}
   AND CONSUMO_EVENTO_ANT = ${CONSUMO_EVENTO_ANT}
   AND TIPO_REG = &apos;${TIPO_REG}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ESTATUS_QRY_B</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ESTATUS_QRY_A_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Segunda" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ESTATUS_QRY_B_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="FN -&gt; MBS.fn_ValidaModulo" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 22 - Se solicita la validaci칩n de un modulo de tarifa en csto_abo_consumo para el escenario: No se encuentra en costo_abo_consumo la unica tarifa configurada en detalle_modulo_tarifa para el modulo indicado. El modulo esta configurado por tipo de llamada ( es decir tll_clave mayor a cero), por lo que el grupo de tipo de llamada umbral (GRUPO_TLL_CLAVE_UMBRAL) es igual a cero." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE text   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN char(10),      	-&gt; Clave del abonado
-- 4.- inTLL_CLAVE int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inSTATUS int(1),       	-&gt; Estatus del abonado. No es usado por el procedimiento
-- 6.- inABO_CIC_CVE int(1),     	-&gt; Ciclo del cliente. No es usado por el procedimiento

-- Parametros de retorno:
-- 1.- exito int(1)        	-&gt; Parametro de salida: 1 -&gt; Indica que no hay o no habra problema con la configuracion de la tarifa en csto_abo_consumo; 0 -&gt; Indica que hay o habra problema con la configuraci칩n de la tarifa en csto_abo_consumo

/*
      select    fn_ValidaModulo   ( inSER_CLAVE text,
		inABO_CLIENTE char(8),
                                 	inABO_MDN char(10),
	                             inTLL_CLAVE int(2),
                                 	inSTATUS int(1),
                                 	inABO_CIC_CVE int(1))
*/

 SELECT  fn_ValidaModulo (${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE});
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">SALIDA_FUNCION</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que el parametro de salida sea 1. Es decir que no habra problemas al ser afectado csto_abo_consumo por el modulo correspondiente.</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000022&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000022&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      	// Ciclo al que pertenece el abonado. No es usado por el procedimiento

vars.put(&quot;SALIDA_FUNCION&quot;,    &quot;-1&quot;);                    	// Grupo al que pertenece el abonado

//comun
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000022&quot;);         	// Clave del servicio
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST22&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;10&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;0&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;5&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;TIPO_REG_B&quot;,  &quot;C&quot;);                                	//C = Consumo, T = Tarificacion
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;0&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">SALIDA_FUNCION_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 23 - Se solicita la validaci칩n de un modulo de tarifa en csto_abo_consumo para el escenario: No se encuentra en costo_abo_consumo la unica tarifa configurada en detalle_modulo_tarifa para el modulo indicado. El modulo esta configurado por grupo de tipo de llamada umbral (es decir GRUPO_TLL_CLAVE_UMBRAL mayor a cero), por lo que el tipo de llamada (tll_clave) es igual a cero." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE text   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN char(10),      	-&gt; Clave del abonado
-- 4.- inTLL_CLAVE int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inSTATUS int(1),       	-&gt; Estatus del abonado. No es usado por el procedimiento
-- 6.- inABO_CIC_CVE int(1),     	-&gt; Ciclo del cliente. No es usado por el procedimiento

-- Parametros de retorno:
-- 1.- exito int(1)        	-&gt; Parametro de salida: 1 -&gt; Indica que no hay o no habra problema con la configuracion de la tarifa en csto_abo_consumo; 0 -&gt; Indica que hay o habra problema con la configuraci칩n de la tarifa en csto_abo_consumo

/*
      select    fn_ValidaModulo   ( inSER_CLAVE text,
		inABO_CLIENTE char(8),
                                 	inABO_MDN char(10),
	                             inTLL_CLAVE int(2),
                                 	inSTATUS int(1),
                                 	inABO_CIC_CVE int(1))
*/

 SELECT  fn_ValidaModulo (${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE});
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">SALIDA_FUNCION</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que el parametro de salida sea 1. Es decir que no habra problemas al ser afectado csto_abo_consumo por el modulo correspondiente.</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000023&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000023&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      	// Ciclo al que pertenece el abonado. No es usado por el procedimiento

vars.put(&quot;SALIDA_FUNCION&quot;,    &quot;-1&quot;);                    	// Grupo al que pertenece el abonado

//comun
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000023&quot;);         	// Clave del servicio
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST23&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;0&quot;);  	 // Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;5&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;10&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;0&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;5&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;TIPO_REG_B&quot;,  &quot;C&quot;);                                	//C = Consumo, T = Tarificacion
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;0&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">SALIDA_FUNCION_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 24 - Se solicita la validaci칩n de un modulo de tarifa en csto_abo_consumo para el escenario: No corresponde el tipo de cobro en costo_abo_consumo al configurado en detalle_modulo_tarifa para el modulo indicado. El modulo esta configurado por tipo de llamada ( es decir tll_clave mayor a cero), por lo que el grupo de tipo de llamada umbral (GRUPO_TLL_CLAVE_UMBRAL) es igual a cero." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE text   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN char(10),      	-&gt; Clave del abonado
-- 4.- inTLL_CLAVE int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inSTATUS int(1),       	-&gt; Estatus del abonado. No es usado por el procedimiento
-- 6.- inABO_CIC_CVE int(1),     	-&gt; Ciclo del cliente. No es usado por el procedimiento

-- Parametros de retorno:
-- 1.- exito int(1)        	-&gt; Parametro de salida: 1 -&gt; Indica que no hay o no habra problema con la configuracion de la tarifa en csto_abo_consumo; 0 -&gt; Indica que hay o habra problema con la configuraci칩n de la tarifa en csto_abo_consumo

/*
      select    fn_ValidaModulo   ( inSER_CLAVE text,
		inABO_CLIENTE char(8),
                                 	inABO_MDN char(10),
	                             inTLL_CLAVE int(2),
                                 	inSTATUS int(1),
                                 	inABO_CIC_CVE int(1))
*/

 SELECT  fn_ValidaModulo (${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE});
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">SALIDA_FUNCION</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que el parametro de salida sea 0. Es decir, habra problemas al ser afectado csto_abo_consumo por el modulo correspondiente correspondiente.</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000024&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000024&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      	// Ciclo al que pertenece el abonado. No es usado por el procedimiento

vars.put(&quot;SALIDA_FUNCION&quot;,    &quot;-1&quot;);                    	// Grupo al que pertenece el abonado

//comun
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000024&quot;);         	// Clave del servicio
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST24&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;10&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;0&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;1&quot;);	//Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;TIPO_REG_B&quot;,  &quot;C&quot;);                                	//C = Consumo, T = Tarificacion, P=Tarifa alterna limitada a un umbral
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;0&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B}, 
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">SALIDA_FUNCION_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 25 - Se solicita la validaci칩n de un modulo de tarifa en csto_abo_consumo para el escenario: No corresponde el tipo de cobro en costo_abo_consumo al configurado en detalle_modulo_tarifa para el modulo indicado. El modulo esta configurado por grupo de tipo de llamada umbral (es decir, GRUPO_TLL_CLAVE_UMBRAL mayoe a cero), por lo que el tipo de llamada (tll_clave) es igual a cero." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE text   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN char(10),      	-&gt; Clave del abonado
-- 4.- inTLL_CLAVE int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inSTATUS int(1),       	-&gt; Estatus del abonado. No es usado por el procedimiento
-- 6.- inABO_CIC_CVE int(1),     	-&gt; Ciclo del cliente. No es usado por el procedimiento

-- Parametros de retorno:
-- 1.- exito int(1)        	-&gt; Parametro de salida: 1 -&gt; Indica que no hay o no habra problema con la configuracion de la tarifa en csto_abo_consumo; 0 -&gt; Indica que hay o habra problema con la configuraci칩n de la tarifa en csto_abo_consumo

/*
      select    fn_ValidaModulo   ( inSER_CLAVE text,
		inABO_CLIENTE char(8),
                                 	inABO_MDN char(10),
	                             inTLL_CLAVE int(2),
                                 	inSTATUS int(1),
                                 	inABO_CIC_CVE int(1))
*/

 SELECT  fn_ValidaModulo (${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE});
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">SALIDA_FUNCION</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que el parametro de salida sea 1. Es decir que no habra problemas al ser afectado csto_abo_consumo por el umbral correspondiente.</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000025&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000025&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      	// Ciclo al que pertenece el abonado. No es usado por el procedimiento

vars.put(&quot;SALIDA_FUNCION&quot;,    &quot;-1&quot;);                    	// Grupo al que pertenece el abonado

//comun
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000025&quot;);         	// Clave del servicio
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST25&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;0&quot;);  	// Tipo de llamada:
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;5&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;10&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;0&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;0&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;1&quot;);	//Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;TIPO_REG_B&quot;,  &quot;C&quot;);                                	//C = Consumo, T = Tarificacion, P=Tarifa alterna limitada a un umbral
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;0&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;5&quot;);// Grupo de llamada de tipo umbral

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B}, 
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">SALIDA_FUNCION_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 26 - Se solicita la validaci칩n de un modulo de tarifa en csto_abo_consumo para el escenario:  Corresponde correctamente el tipo de registro y el tipo de cobro de costo_abo_consumo al configurado en detalle_modulo_tarifa para el modulo indicado, el tipo de registro configurado es &quot;Consumo&quot; (C). El modulo esta configurado por tipo de llamada ( es decir tll_clave mayor a cero), por lo que el grupo de tipo de llamada umbral (GRUPO_TLL_CLAVE_UMBRAL) es igual a cero." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE text   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN char(10),      	-&gt; Clave del abonado
-- 4.- inTLL_CLAVE int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inSTATUS int(1),       	-&gt; Estatus del abonado. No es usado por el procedimiento
-- 6.- inABO_CIC_CVE int(1),     	-&gt; Ciclo del cliente. No es usado por el procedimiento

-- Parametros de retorno:
-- 1.- exito int(1)        	-&gt; Parametro de salida: 1 -&gt; Indica que no hay o no habra problema con la configuracion de la tarifa en csto_abo_consumo; 0 -&gt; Indica que hay o habra problema con la configuraci칩n de la tarifa en csto_abo_consumo

/*
      select    fn_ValidaModulo   ( inSER_CLAVE text,
		inABO_CLIENTE char(8),
                                 	inABO_MDN char(10),
	                             inTLL_CLAVE int(2),
                                 	inSTATUS int(1),
                                 	inABO_CIC_CVE int(1))
*/

 SELECT  fn_ValidaModulo (${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE});
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">SALIDA_FUNCION</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que el parametro de salida sea 1. Es decir, no habra problemas al ser afectado csto_abo_consumo por el modulo correspondiente.</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000026&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000026&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      	// Ciclo al que pertenece el abonado. No es usado por el procedimiento

vars.put(&quot;SALIDA_FUNCION&quot;,    &quot;-1&quot;);                    	// Grupo al que pertenece el abonado

//comun
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000026&quot;);         	// Clave del servicio
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST26&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL,  5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;10&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;0&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL,  5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;TIPO_REG_B&quot;,  &quot;C&quot;);                                	//C = Consumo, T = Tarificacion, P=Tarifa alterna limitada a un umbral
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;0&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B}, 
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">SALIDA_FUNCION_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 27 - Se solicita la validaci칩n de un modulo de tarifa en csto_abo_consumo para el escenario:  Corresponde correctamente el tipo de registro y el tipo de cobro de costo_abo_consumo al configurado en detalle_modulo_tarifa para el modulo indicado, el tipo de registro configurado es &quot;Consumo&quot; (C). El modulo esta configurado por grupo de tipo de llamada umbral (es decir, GRUPO_TLL_CLAVE_UMBRAL mayor a cero), por lo que el tipo de llamada (tll_clave) es igual a cero." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE text   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN char(10),      	-&gt; Clave del abonado
-- 4.- inTLL_CLAVE int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inSTATUS int(1),       	-&gt; Estatus del abonado. No es usado por el procedimiento
-- 6.- inABO_CIC_CVE int(1),     	-&gt; Ciclo del cliente. No es usado por el procedimiento

-- Parametros de retorno:
-- 1.- exito int(1)        	-&gt; Parametro de salida: 1 -&gt; Indica que no hay o no habra problema con la configuracion de la tarifa en csto_abo_consumo; 0 -&gt; Indica que hay o habra problema con la configuraci칩n de la tarifa en csto_abo_consumo

/*
      select    fn_ValidaModulo   ( inSER_CLAVE text,
		inABO_CLIENTE char(8),
                                 	inABO_MDN char(10),
	                             inTLL_CLAVE int(2),
                                 	inSTATUS int(1),
                                 	inABO_CIC_CVE int(1))
*/

 SELECT  fn_ValidaModulo (${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE});
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">SALIDA_FUNCION</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que el parametro de salida sea 1. Es decir, no habra problemas al ser afectado csto_abo_consumo por el modulo correspondiente.</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000027&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000027&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      	// Ciclo al que pertenece el abonado. No es usado por el procedimiento

vars.put(&quot;SALIDA_FUNCION&quot;,    &quot;-1&quot;);                    	// Grupo al que pertenece el abonado

//comun
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000027&quot;);         	// Clave del servicio
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST27&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;0&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL,  5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;5&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;10&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;0&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;0&quot;);                         	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL,  5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;TIPO_REG_B&quot;,  &quot;C&quot;);                                	//C = Consumo, T = Tarificacion, P=Tarifa alterna limitada a un umbral
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;0&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;5&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B}, 
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">SALIDA_FUNCION_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 28 - Se solicita la validaci칩n de un modulo de tarifa en csto_abo_consumo para el escenario:  Corresponde correctamente el tipo de registro y el tipo de cobro de costo_abo_consumo al configurado en detalle_modulo_tarifa para el modulo indicado, el tipo de registro configurado es &quot;Tarifa&quot; (T). El modulo esta configurado por tipo de llamada ( es decir tll_clave mayor a cero), por lo que el grupo de tipo de llamada umbral (GRUPO_TLL_CLAVE_UMBRAL) es igual a cero." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE text   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN char(10),      	-&gt; Clave del abonado
-- 4.- inTLL_CLAVE int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inSTATUS int(1),       	-&gt; Estatus del abonado. No es usado por el procedimiento
-- 6.- inABO_CIC_CVE int(1),     	-&gt; Ciclo del cliente. No es usado por el procedimiento

-- Parametros de retorno:
-- 1.- exito int(1)        	-&gt; Parametro de salida: 1 -&gt; Indica que no hay o no habra problema con la configuracion de la tarifa en csto_abo_consumo; 0 -&gt; Indica que hay o habra problema con la configuraci칩n de la tarifa en csto_abo_consumo

/*
      select    fn_ValidaModulo   ( inSER_CLAVE text,
		inABO_CLIENTE char(8),
                                 	inABO_MDN char(10),
	                             inTLL_CLAVE int(2),
                                 	inSTATUS int(1),
                                 	inABO_CIC_CVE int(1))
*/

 SELECT  fn_ValidaModulo (${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE});
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">SALIDA_FUNCION</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que el parametro de salida sea 1. Es decir, no habra problemas al ser afectado csto_abo_consumo por el modulo correspondiente.</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000028&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000028&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      	// Ciclo al que pertenece el abonado. No es usado por el procedimiento

vars.put(&quot;SALIDA_FUNCION&quot;,    &quot;-1&quot;);                    	// Grupo al que pertenece el abonado

//comun
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000028&quot;);         	// Clave del servicio
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST28&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL,  5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;60&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;10&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;0&quot;); 	// Tipo de cobro:  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL,  5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;TIPO_REG_B&quot;,  &quot;T&quot;);                                	//C = Consumo, T = Tarificacion, P=Tarifa alterna limitada a un umbral
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;60&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B}, 
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">SALIDA_FUNCION_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 29 - Se solicita la validaci칩n de un modulo de tarifa en csto_abo_consumo para el escenario:  Corresponde correctamente el tipo de registro y el tipo de cobro de costo_abo_consumo al configurado en detalle_modulo_tarifa para el modulo indicado, el tipo de registro configurado es &quot;Tarifa&quot; (T). El modulo esta configurado por grupo de tipo de llamada umbral (es decir GRUPO_TLL_CLAVE_UMBRAL mayor a cero), por lo que el  tipo de llamada (tll_clave)  es igual a cero." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE text   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN char(10),      	-&gt; Clave del abonado
-- 4.- inTLL_CLAVE int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inSTATUS int(1),       	-&gt; Estatus del abonado. No es usado por el procedimiento
-- 6.- inABO_CIC_CVE int(1),     	-&gt; Ciclo del cliente. No es usado por el procedimiento

-- Parametros de retorno:
-- 1.- exito int(1)        	-&gt; Parametro de salida: 1 -&gt; Indica que no hay o no habra problema con la configuracion de la tarifa en csto_abo_consumo; 0 -&gt; Indica que hay o habra problema con la configuraci칩n de la tarifa en csto_abo_consumo

/*
      select    fn_ValidaModulo   ( inSER_CLAVE text,
		inABO_CLIENTE char(8),
                                 	inABO_MDN char(10),
	                             inTLL_CLAVE int(2),
                                 	inSTATUS int(1),
                                 	inABO_CIC_CVE int(1))
*/

 SELECT  fn_ValidaModulo (${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE});
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">SALIDA_FUNCION</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que el parametro de salida sea 1. Es decir, no habra problemas al ser afectado csto_abo_consumo por el modulo correspondiente.</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000029&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000029&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      	// Ciclo al que pertenece el abonado. No es usado por el procedimiento

vars.put(&quot;SALIDA_FUNCION&quot;,    &quot;-1&quot;);                    	// Grupo al que pertenece el abonado

//comun
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000029&quot;);         	// Clave del servicio
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST29&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;0&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL,  5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;5&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;60&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;10&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;0&quot;); 	// Tipo de cobro:  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;0&quot;);                         	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL,  5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;TIPO_REG_B&quot;,  &quot;T&quot;);                                	//C = Consumo, T = Tarificacion, P=Tarifa alterna limitada a un umbral
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;60&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;5&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B}, 
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">SALIDA_FUNCION_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 30 - Se solicita la validaci칩n de un modulo de tarifa en csto_abo_consumo para el escenario:  Corresponde correctamente el tipo de registro y el tipo de cobro de costo_abo_consumo al configurado en detalle_modulo_tarifa para el modulo indicado, el tipo de cobro configurado es &quot;Minuto/Tarifa&quot;, y el precio alterno coincide correctamente. El modulo esta configurado por tipo de llamada ( es decir tll_clave mayor a cero), por lo que el grupo de tipo de llamada umbral (GRUPO_TLL_CLAVE_UMBRAL) es igual a cero." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE text   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN char(10),      	-&gt; Clave del abonado
-- 4.- inTLL_CLAVE int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inSTATUS int(1),       	-&gt; Estatus del abonado. No es usado por el procedimiento
-- 6.- inABO_CIC_CVE int(1),     	-&gt; Ciclo del cliente. No es usado por el procedimiento

-- Parametros de retorno:
-- 1.- exito int(1)        	-&gt; Parametro de salida: 1 -&gt; Indica que no hay o no habra problema con la configuracion de la tarifa en csto_abo_consumo; 0 -&gt; Indica que hay o habra problema con la configuraci칩n de la tarifa en csto_abo_consumo

/*
      select    fn_ValidaModulo   ( inSER_CLAVE text,
		inABO_CLIENTE char(8),
                                 	inABO_MDN char(10),
	                             inTLL_CLAVE int(2),
                                 	inSTATUS int(1),
                                 	inABO_CIC_CVE int(1))
*/

 SELECT  fn_ValidaModulo (${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE});
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">SALIDA_FUNCION</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que el parametro de salida sea 1. Es decir, no habra problemas al ser afectado csto_abo_consumo por el modulo correspondiente.</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000030&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000030&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      	// Ciclo al que pertenece el abonado. No es usado por el procedimiento

vars.put(&quot;SALIDA_FUNCION&quot;,    &quot;-1&quot;);                    	// Grupo al que pertenece el abonado

//comun
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000030&quot;);         	// Clave del servicio
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST30&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL,  5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;60&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;10&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;2&quot;); 	// Tipo de cobro:  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL,  5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;TIPO_REG_B&quot;,  &quot;P&quot;);                                	//C = Consumo, T = Tarificacion, P=Tarifa alterna limitada a un umbral
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;60&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B}, 
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">SALIDA_FUNCION_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 31 - Se solicita la validaci칩n de un modulo de tarifa en csto_abo_consumo para el escenario:  Corresponde correctamente el tipo de registro y el tipo de cobro de costo_abo_consumo al configurado en detalle_modulo_tarifa para el modulo indicado, el tipo de cobro configurado es &quot;Minuto/Tarifa&quot;, y el precio alterno coincide correctamente. El modulo esta configurado por grupo de tipo de llamada umbral (es decir, GRUPO_TLL_CLAVE_UMBRAL mayor a cero), por lo que el  tipo de llamada (tll_clave) es igual a cero." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE text   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN char(10),      	-&gt; Clave del abonado
-- 4.- inTLL_CLAVE int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inSTATUS int(1),       	-&gt; Estatus del abonado. No es usado por el procedimiento
-- 6.- inABO_CIC_CVE int(1),     	-&gt; Ciclo del cliente. No es usado por el procedimiento

-- Parametros de retorno:
-- 1.- exito int(1)        	-&gt; Parametro de salida: 1 -&gt; Indica que no hay o no habra problema con la configuracion de la tarifa en csto_abo_consumo; 0 -&gt; Indica que hay o habra problema con la configuraci칩n de la tarifa en csto_abo_consumo

/*
      select    fn_ValidaModulo   ( inSER_CLAVE text,
		inABO_CLIENTE char(8),
                                 	inABO_MDN char(10),
	                             inTLL_CLAVE int(2),
                                 	inSTATUS int(1),
                                 	inABO_CIC_CVE int(1))
*/

 SELECT  fn_ValidaModulo (${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE});
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">SALIDA_FUNCION</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que el parametro de salida sea 1. Es decir, no habra problemas al ser afectado csto_abo_consumo por el modulo correspondiente.</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000031&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000031&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      	// Ciclo al que pertenece el abonado. No es usado por el procedimiento

vars.put(&quot;SALIDA_FUNCION&quot;,    &quot;-1&quot;);                    	// Grupo al que pertenece el abonado

//comun
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000031&quot;);         	// Clave del servicio
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST31&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;0&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL,  5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;5&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;60&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;10&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;2&quot;); 	// Tipo de cobro:  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;0&quot;);                         	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL,  5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;TIPO_REG_B&quot;,  &quot;P&quot;);                                	//C = Consumo, T = Tarificacion, P=Tarifa alterna limitada a un umbral
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;60&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;5&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B}, 
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">SALIDA_FUNCION_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 32 - Se solicita la validaci칩n de un modulo de tarifa en csto_abo_consumo para el escenario:  Corresponde correctamente el tipo de registro y el tipo de cobro de costo_abo_consumo al configurado en detalle_modulo_tarifa para el modulo indicado, el tipo de cobro configurado es &quot;Minuto/Tarifa&quot;, PERO el precio alterno NO coincide. El modulo esta configurado por tipo de llamada ( es decir tll_clave mayor a cero), por lo que el grupo de tipo de llamada umbral (GRUPO_TLL_CLAVE_UMBRAL) es igual a cero." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE text   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN char(10),      	-&gt; Clave del abonado
-- 4.- inTLL_CLAVE int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inSTATUS int(1),       	-&gt; Estatus del abonado. No es usado por el procedimiento
-- 6.- inABO_CIC_CVE int(1),     	-&gt; Ciclo del cliente. No es usado por el procedimiento

-- Parametros de retorno:
-- 1.- exito int(1)        	-&gt; Parametro de salida: 1 -&gt; Indica que no hay o no habra problema con la configuracion de la tarifa en csto_abo_consumo; 0 -&gt; Indica que hay o habra problema con la configuraci칩n de la tarifa en csto_abo_consumo

/*
      select    fn_ValidaModulo   ( inSER_CLAVE text,
		inABO_CLIENTE char(8),
                                 	inABO_MDN char(10),
	                             inTLL_CLAVE int(2),
                                 	inSTATUS int(1),
                                 	inABO_CIC_CVE int(1))
*/

 SELECT  fn_ValidaModulo (${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE});
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">SALIDA_FUNCION</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que el parametro de salida sea 0. Es decir, habra problemas (colisiones) al ser afectado csto_abo_consumo por el modulo correspondiente.</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000032&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000032&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      	// Ciclo al que pertenece el abonado. No es usado por el procedimiento

vars.put(&quot;SALIDA_FUNCION&quot;,    &quot;-1&quot;);                    	// Grupo al que pertenece el abonado

//comun
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000032&quot;);         	// Clave del servicio
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST32&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL,  5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;60&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;10&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;2&quot;); 	// Tipo de cobro:  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL,  5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;TIPO_REG_B&quot;,  &quot;P&quot;);                                	//C = Consumo, T = Tarificacion, P=Tarifa alterna limitada a un umbral
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;160&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B}, 
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">SALIDA_FUNCION_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 33 - Se solicita la validaci칩n de un modulo de tarifa en csto_abo_consumo para el escenario:  Corresponde correctamente el tipo de registro y el tipo de cobro de costo_abo_consumo al configurado en detalle_modulo_tarifa para el modulo indicado, el tipo de cobro configurado es &quot;Minuto/Tarifa&quot;, PERO el precio alterno NO coincide. El modulo esta configurado por grupo de tipo de llamada umbral (es decir, GRUPO_TLL_CLAVE_UMBRAL mayor a cero), por lo que el  tipo de llamada (tll_clave) es igual a cero." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE text   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN char(10),      	-&gt; Clave del abonado
-- 4.- inTLL_CLAVE int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inSTATUS int(1),       	-&gt; Estatus del abonado. No es usado por el procedimiento
-- 6.- inABO_CIC_CVE int(1),     	-&gt; Ciclo del cliente. No es usado por el procedimiento

-- Parametros de retorno:
-- 1.- exito int(1)        	-&gt; Parametro de salida: 1 -&gt; Indica que no hay o no habra problema con la configuracion de la tarifa en csto_abo_consumo; 0 -&gt; Indica que hay o habra problema con la configuraci칩n de la tarifa en csto_abo_consumo

/*
      select    fn_ValidaModulo   ( inSER_CLAVE text,
		inABO_CLIENTE char(8),
                                 	inABO_MDN char(10),
	                             inTLL_CLAVE int(2),
                                 	inSTATUS int(1),
                                 	inABO_CIC_CVE int(1))
*/

 SELECT  fn_ValidaModulo (${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE});
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">SALIDA_FUNCION</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que el parametro de salida sea 0. Es decir, habra problemas(colisiones) al ser afectado csto_abo_consumo por el modulo correspondiente.</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000033&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000033&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      	// Ciclo al que pertenece el abonado. No es usado por el procedimiento

vars.put(&quot;SALIDA_FUNCION&quot;,    &quot;-1&quot;);                    	// Grupo al que pertenece el abonado

//comun
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000033&quot;);         	// Clave del servicio
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST33&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;0&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL,  5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;5&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;60&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;10&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;2&quot;); 	// Tipo de cobro:  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;0&quot;);                         	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL,  5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;TIPO_REG_B&quot;,  &quot;P&quot;);                                	//C = Consumo, T = Tarificacion, P=Tarifa alterna limitada a un umbral
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;160&quot;);                         //Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;5&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B}, 
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">SALIDA_FUNCION_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 34 - Se solicita la validaci칩n de un modulo de tarifa en csto_abo_consumo para el escenario:  Corresponde correctamente el tipo de registro y el tipo de cobro de costo_abo_consumo al configurado en detalle_modulo_tarifa para el modulo indicado, el tipo de cobro configurado es &quot;Evento/Tarifa&quot;, y el precio alterno coincide correctamente. El modulo esta configurado por tipo de llamada ( es decir tll_clave mayor a cero), por lo que el grupo de tipo de llamada umbral (GRUPO_TLL_CLAVE_UMBRAL) es igual a cero." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE text   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN char(10),      	-&gt; Clave del abonado
-- 4.- inTLL_CLAVE int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inSTATUS int(1),       	-&gt; Estatus del abonado. No es usado por el procedimiento
-- 6.- inABO_CIC_CVE int(1),     	-&gt; Ciclo del cliente. No es usado por el procedimiento

-- Parametros de retorno:
-- 1.- exito int(1)        	-&gt; Parametro de salida: 1 -&gt; Indica que no hay o no habra problema con la configuracion de la tarifa en csto_abo_consumo; 0 -&gt; Indica que hay o habra problema con la configuraci칩n de la tarifa en csto_abo_consumo

/*
      select    fn_ValidaModulo   ( inSER_CLAVE text,
		inABO_CLIENTE char(8),
                                 	inABO_MDN char(10),
	                             inTLL_CLAVE int(2),
                                 	inSTATUS int(1),
                                 	inABO_CIC_CVE int(1))
*/

 SELECT  fn_ValidaModulo (${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE});
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">SALIDA_FUNCION</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que el parametro de salida sea 1. Es decir, no habra problemas al ser afectado csto_abo_consumo por el modulo correspondiente.</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000034&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000034&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      	// Ciclo al que pertenece el abonado. No es usado por el procedimiento

vars.put(&quot;SALIDA_FUNCION&quot;,    &quot;-1&quot;);                    	// Grupo al que pertenece el abonado

//comun
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000034&quot;);         	// Clave del servicio
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST34&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL,  5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;60&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;10&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;3&quot;); 	// Tipo de cobro:  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL,  5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;1&quot;);	//Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;TIPO_REG_B&quot;,  &quot;P&quot;);                                	//C = Consumo, T = Tarificacion, P=Tarifa alterna limitada a un umbral
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;60&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B}, 
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">SALIDA_FUNCION_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 35 - Se solicita la validaci칩n de un modulo de tarifa en csto_abo_consumo para el escenario:  Corresponde correctamente el tipo de registro y el tipo de cobro de costo_abo_consumo al configurado en detalle_modulo_tarifa para el modulo indicado, el tipo de cobro configurado es &quot;Evento/Tarifa&quot;, y el precio alterno coincide correctamente. El modulo esta configurado por grupo de tipo de llamada umbral (es decir, GRUPO_TLL_CLAVE_UMBRAL mayor a cero), por lo que el  tipo de llamada (tll_clave) es igual a cero." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE text   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN char(10),      	-&gt; Clave del abonado
-- 4.- inTLL_CLAVE int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inSTATUS int(1),       	-&gt; Estatus del abonado. No es usado por el procedimiento
-- 6.- inABO_CIC_CVE int(1),     	-&gt; Ciclo del cliente. No es usado por el procedimiento

-- Parametros de retorno:
-- 1.- exito int(1)        	-&gt; Parametro de salida: 1 -&gt; Indica que no hay o no habra problema con la configuracion de la tarifa en csto_abo_consumo; 0 -&gt; Indica que hay o habra problema con la configuraci칩n de la tarifa en csto_abo_consumo

/*
      select    fn_ValidaModulo   ( inSER_CLAVE text,
		inABO_CLIENTE char(8),
                                 	inABO_MDN char(10),
	                             inTLL_CLAVE int(2),
                                 	inSTATUS int(1),
                                 	inABO_CIC_CVE int(1))
*/

 SELECT  fn_ValidaModulo (${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE});
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">SALIDA_FUNCION</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que el parametro de salida sea 1. Es decir, no habra problemas al ser afectado csto_abo_consumo por el modulo correspondiente.</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000035&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000035&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      	// Ciclo al que pertenece el abonado. No es usado por el procedimiento

vars.put(&quot;SALIDA_FUNCION&quot;,    &quot;-1&quot;);                    	// Grupo al que pertenece el abonado

//comun
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000035&quot;);         	// Clave del servicio
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST35&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;0&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL,  5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;5&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;60&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;10&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;3&quot;); 	// Tipo de cobro:  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;0&quot;);                         	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL,  5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;1&quot;);	//Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;TIPO_REG_B&quot;,  &quot;P&quot;);                                	//C = Consumo, T = Tarificacion, P=Tarifa alterna limitada a un umbral
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;60&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;5&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B}, 
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">SALIDA_FUNCION_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 36 - Se solicita la validaci칩n de un modulo de tarifa en csto_abo_consumo para el escenario:  Corresponde correctamente el tipo de registro y el tipo de cobro de costo_abo_consumo al configurado en detalle_modulo_tarifa para el modulo indicado, el tipo de cobro configurado es &quot;Evento/Tarifa&quot;, PERO el precio alterno NO coincide. El modulo esta configurado por tipo de llamada ( es decir tll_clave mayor a cero), por lo que el grupo de tipo de llamada umbral (GRUPO_TLL_CLAVE_UMBRAL) es igual a cero." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE text   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN char(10),      	-&gt; Clave del abonado
-- 4.- inTLL_CLAVE int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inSTATUS int(1),       	-&gt; Estatus del abonado. No es usado por el procedimiento
-- 6.- inABO_CIC_CVE int(1),     	-&gt; Ciclo del cliente. No es usado por el procedimiento

-- Parametros de retorno:
-- 1.- exito int(1)        	-&gt; Parametro de salida: 1 -&gt; Indica que no hay o no habra problema con la configuracion de la tarifa en csto_abo_consumo; 0 -&gt; Indica que hay o habra problema con la configuraci칩n de la tarifa en csto_abo_consumo

/*
      select    fn_ValidaModulo   ( inSER_CLAVE text,
		inABO_CLIENTE char(8),
                                 	inABO_MDN char(10),
	                             inTLL_CLAVE int(2),
                                 	inSTATUS int(1),
                                 	inABO_CIC_CVE int(1))
*/

 SELECT  fn_ValidaModulo (${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE});
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">SALIDA_FUNCION</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que el parametro de salida sea 0. Es decir, habra problemas (colisiones) al ser afectado csto_abo_consumo por el modulo correspondiente.</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000036&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000036&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      	// Ciclo al que pertenece el abonado. No es usado por el procedimiento

vars.put(&quot;SALIDA_FUNCION&quot;,    &quot;-1&quot;);                    	// Grupo al que pertenece el abonado

//comun
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000036&quot;);         	// Clave del servicio
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST36&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL,  5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;60&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;10&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;3&quot;); 	// Tipo de cobro:  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL,  5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;1&quot;);	//Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;TIPO_REG_B&quot;,  &quot;P&quot;);                                	//C = Consumo, T = Tarificacion, P=Tarifa alterna limitada a un umbral
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;160&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B}, 
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">SALIDA_FUNCION_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 37 - Se solicita la validaci칩n de un modulo de tarifa en csto_abo_consumo para el escenario:  Corresponde correctamente el tipo de registro y el tipo de cobro de costo_abo_consumo al configurado en detalle_modulo_tarifa para el modulo indicado, el tipo de cobro configurado es &quot;Evento/Tarifa&quot;, PERO el precio alterno NO coincide. El modulo esta configurado por grupo de tipo de llamada umbral (es decir, GRUPO_TLL_CLAVE_UMBRAL mayor a cero), por lo que el  tipo de llamada (tll_clave) es igual a cero." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE text   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN char(10),      	-&gt; Clave del abonado
-- 4.- inTLL_CLAVE int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inSTATUS int(1),       	-&gt; Estatus del abonado. No es usado por el procedimiento
-- 6.- inABO_CIC_CVE int(1),     	-&gt; Ciclo del cliente. No es usado por el procedimiento

-- Parametros de retorno:
-- 1.- exito int(1)        	-&gt; Parametro de salida: 1 -&gt; Indica que no hay o no habra problema con la configuracion de la tarifa en csto_abo_consumo; 0 -&gt; Indica que hay o habra problema con la configuraci칩n de la tarifa en csto_abo_consumo

/*
      select    fn_ValidaModulo   ( inSER_CLAVE text,
		inABO_CLIENTE char(8),
                                 	inABO_MDN char(10),
	                             inTLL_CLAVE int(2),
                                 	inSTATUS int(1),
                                 	inABO_CIC_CVE int(1))
*/

 SELECT  fn_ValidaModulo (${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE});
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">SALIDA_FUNCION</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que el parametro de salida sea 0. Es decir, habra problemas(colisiones) al ser afectado csto_abo_consumo por el modulo correspondiente.</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000037&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000037&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);                      	// Ciclo al que pertenece el abonado. No es usado por el procedimiento

vars.put(&quot;SALIDA_FUNCION&quot;,    &quot;-1&quot;);                    	// Grupo al que pertenece el abonado

//comun
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000037&quot;);         	// Clave del servicio
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST37&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;0&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL,  5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;5&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;60&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;10&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;3&quot;); 	// Tipo de cobro:  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;0&quot;);                         	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL,  5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;1&quot;);	//Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;TIPO_REG_B&quot;,  &quot;P&quot;);                                	//C = Consumo, T = Tarificacion, P=Tarifa alterna limitada a un umbral
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;160&quot;);                         //Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;5&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B}, 
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">SALIDA_FUNCION_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="SP -&gt; MBS.sp_CancelaIn_cstoAboCon_FromServUsu" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 38 - Se solicita la cancelaci칩n de un modulo de tarifa en csto_abo_consumo, donde el modulo configurado en detalle_modulo_tarifa para el servicio correspondiente no se encuentra en csto_abo_consumo. De echo csto_abo_consumo no tiene ningun modulo configurado para el cliente y abonado especificado. El modulo configurado (detalle_modulo_tarifa) tiene las siguientes caracterisiticas: La tarifa esta configurada como tipo de llamada (tll_clave &gt; 0), es decir, el grupo de tipo de llamada umbral es igual a cero." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE    char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN        char(10),      	-&gt; Clave del abonado
-- 4.- inTLL_CLAVE      int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inSTATUS         int(1)       	-&gt; Estatus del abonado. No es usado por el procedimiento

/*
sp_CancelaIn_cstoAboCon_FromServUsu(
   		inSER_CLAVE      int(6),
   		inABO_CLIENTE    char(8),
   		inABO_MDN        char(10),
		inTLL_CLAVE      int(2),
   		inSTATUS         int(1) )
*/

call sp_CancelaIn_cstoAboCon_FromServUsu (?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que no se genere ningun error.</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000038&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000038&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000038&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST38&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;10&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;0&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;5&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;TIPO_REG_B&quot;,  &quot;C&quot;);                                	//C = Consumo, T = Tarificacion
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;0&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_P}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND CONSUMO_ANT = ${CONSUMO_ANT_B}
   AND CONSUMO_EVENTO_ANT = ${CONSUMO_EVENTO_ANT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 39 - Se solicita la cancelaci칩n de un modulo de tarifa en csto_abo_consumo, donde el modulo configurado en detalle_modulo_tarifa para el servicio correspondiente no corresponde al que se encuentra Csto_abo_consumo. El modulo configurado (detalle_modulo_tarifa) tiene las siguientes caracterisiticas: La tarifa esta configurada como tipo de llamada (tll_clave &gt; 0), es decir, el grupo de tipo de llamada umbral es igual a cero." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE    char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN        char(10),      	-&gt; Clave del abonado
-- 4.- inTLL_CLAVE      int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inSTATUS         int(1)       	-&gt; Estatus del abonado. No es usado por el procedimiento

/*
sp_CancelaIn_cstoAboCon_FromServUsu(
   		inSER_CLAVE      int(6),
   		inABO_CLIENTE    char(8),
   		inABO_MDN        char(10),
		inTLL_CLAVE      int(2),
   		inSTATUS         int(1) )
*/

 call sp_CancelaIn_cstoAboCon_FromServUsu (?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que no se genere ningun error, solo no existe en csto_abo_consumo un modulo con las carateristicas al que se desea cancelar.</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000039&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000039&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000039&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST39&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;10&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;0&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;5&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;TIPO_REG_B&quot;,  &quot;C&quot;);                                	//C = Consumo, T = Tarificacion
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;0&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;50&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo ( cancelado )
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B}, 
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND CONSUMO_ANT = ${CONSUMO_ANT_B}
   AND CONSUMO_EVENTO_ANT = ${CONSUMO_EVENTO_ANT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B}</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 40 - Se solicita la cancelaci칩n de un modulo de tarifa en csto_abo_consumo existente y activo, el tipo de cobro es por evento (1) y el tipo de registro es de consumo (&quot;C&quot;). El modulo configurado  (detalle_modulo_tarifa) tiene las siguientes caracterisiticas: La tarifa esta configurada como tipo de llamada (TLL_CLAVE &gt; 0), es decir, el grupo de tipo de llamada umbral (GRUPO_TLL_CLAVE_UMBRAL) es igual a cero." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE    char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN        char(10),      	-&gt; Clave del abonado
-- 4.- inTLL_CLAVE      int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inSTATUS         int(1)       	-&gt; Estatus del abonado. No es usado por el procedimiento

/*
sp_CancelaIn_cstoAboCon_FromServUsu(
   		inSER_CLAVE      int(6),
   		inABO_CLIENTE    char(8),
   		inABO_MDN        char(10),
		inTLL_CLAVE      int(2),
   		inSTATUS         int(1) )




*/

 call sp_CancelaIn_cstoAboCon_FromServUsu (?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames">ESTATUS_QRY_B</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que el registro existente y activo en csto_abo_consumo se cancele ( se desactive ).</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000040&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000040&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000040&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST40&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;10&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;0&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;TIPO_REG_B&quot;,  &quot;C&quot;);                                	//C = Consumo, T = Tarificacion
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;0&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;10&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo ( cancelado )
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B}, 
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el estado del registro umbral despues de ejecutar el stored procedure

SELECT ESTATUS
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
--   AND LIM_CONSUMO = ${UMBRAL_B}
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
--   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND CONSUMO_ANT = ${CONSUMO_ANT_B}
   AND CONSUMO_EVENTO_ANT = ${CONSUMO_EVENTO_ANT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ESTATUS_QRY_B</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ESTATUS_QRY_B_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 41 - Se solicita la cancelaci칩n de un modulo de tarifa en csto_abo_consumo existente y activo, el tipo de cobro es por evento (1) y el tipo de registro es de consumo (&quot;C&quot;). El modulo configurado  (detalle_modulo_tarifa) tiene las siguientes caracterisiticas: La tarifa esta configurada como grupo de tipo de llamada umbral (GRUPO_TLL_CLAVE_UMBRAL &gt; 0), es decir, el  tipo de llamada (TLL_CLAVE) es igual a cero." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE    char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN        char(10),      	-&gt; Clave del abonado
-- 4.- inTLL_CLAVE      int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inSTATUS         int(1)       	-&gt; Estatus del abonado. No es usado por el procedimiento

/*
sp_CancelaIn_cstoAboCon_FromServUsu(
   		inSER_CLAVE      int(6),
   		inABO_CLIENTE    char(8),
   		inABO_MDN        char(10),
		inTLL_CLAVE      int(2),
   		inSTATUS         int(1) )




*/

 call sp_CancelaIn_cstoAboCon_FromServUsu (?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames">ESTATUS_QRY_B</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que el registro existente y activo en csto_abo_consumo se cancele ( se desactive ).</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000041&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000041&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000041&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST41&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;0&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;3&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;10&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;1&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;0&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;1&quot;);	//Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;TIPO_REG_B&quot;,  &quot;C&quot;);                                	//C = Consumo, T = Tarificacion
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;0&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;10&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo ( cancelado )
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;3&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B}, 
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el estado del registro umbral despues de ejecutar el stored procedure

SELECT ESTATUS
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
--   AND LIM_CONSUMO = ${UMBRAL_B}
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
--   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND CONSUMO_ANT = ${CONSUMO_ANT_B}
   AND CONSUMO_EVENTO_ANT = ${CONSUMO_EVENTO_ANT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ESTATUS_QRY_B</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ESTATUS_QRY_B_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 42 - Se solicita la cancelaci칩n de un modulo de tarifa en csto_abo_consumo existente y activo, el tipo de registro es de Tarificaci칩n (&quot;T&quot;) y el precio alterno es mayor a cero. El modulo configurado  (detalle_modulo_tarifa) tiene las siguientes caracterisiticas: La tarifa esta configurada como grupo de tipo de llamada umbral (GRUPO_TLL_CLAVE_UMBRAL &gt; 0), es decir, el  tipo de llamada (TLL_CLAVE) es igual a cero." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE    char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN        char(10),      	-&gt; Clave del abonado
-- 4.- inTLL_CLAVE      int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inSTATUS         int(1)       	-&gt; Estatus del abonado. No es usado por el procedimiento

/*
sp_CancelaIn_cstoAboCon_FromServUsu(
   		inSER_CLAVE      int(6),
   		inABO_CLIENTE    char(8),
   		inABO_MDN        char(10),
		inTLL_CLAVE      int(2),
   		inSTATUS         int(1) )




*/

 call sp_CancelaIn_cstoAboCon_FromServUsu (?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames">ESTATUS_QRY_B</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que el registro existente y activo en csto_abo_consumo se cancele ( se desactive ).</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000042&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000042&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000042&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST42&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;0&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;3&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;35&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;0&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;0&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;TIPO_REG_B&quot;,  &quot;T&quot;);                                	//C = Consumo, T = Tarificacion
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;35&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo ( cancelado )
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;3&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B}, 
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el estado del registro umbral despues de ejecutar el stored procedure

SELECT ESTATUS
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
--   AND LIM_CONSUMO = ${UMBRAL_B}
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
--   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND CONSUMO_ANT = ${CONSUMO_ANT_B}
   AND CONSUMO_EVENTO_ANT = ${CONSUMO_EVENTO_ANT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ESTATUS_QRY_B</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ESTATUS_QRY_B_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 43 - Se solicita la cancelaci칩n de un modulo de tarifa en csto_abo_consumo existente y activo, el tipo de registro es de &quot;P&quot; y el tipo de cobro es por minuto(2), es decir es un modulo minuto-tarifa. El modulo configurado  (detalle_modulo_tarifa) tiene las siguientes caracterisiticas: La tarifa esta configurada como grupo de tipo de llamada umbral (GRUPO_TLL_CLAVE_UMBRAL &gt; 0), es decir, el  tipo de llamada (TLL_CLAVE) es igual a cero." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE    char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN        char(10),      	-&gt; Clave del abonado
-- 4.- inTLL_CLAVE      int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inSTATUS         int(1)       	-&gt; Estatus del abonado. No es usado por el procedimiento

/*
sp_CancelaIn_cstoAboCon_FromServUsu(
   		inSER_CLAVE      int(6),
   		inABO_CLIENTE    char(8),
   		inABO_MDN        char(10),
		inTLL_CLAVE      int(2),
   		inSTATUS         int(1) )




*/

 call sp_CancelaIn_cstoAboCon_FromServUsu (?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames">ESTATUS_QRY_B</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que el registro existente y activo en csto_abo_consumo se cancele ( se desactive ).</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000043&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000043&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000043&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST43&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;0&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;3&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;35&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;2&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;0&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;TIPO_REG_B&quot;,  &quot;P&quot;);                                	//C = Consumo, T = Tarificacion
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;35&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo ( cancelado )
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;3&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B}, 
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el estado del registro umbral despues de ejecutar el stored procedure

SELECT ESTATUS
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
--   AND LIM_CONSUMO = ${UMBRAL_B}
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
--   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND CONSUMO_ANT = ${CONSUMO_ANT_B}
   AND CONSUMO_EVENTO_ANT = ${CONSUMO_EVENTO_ANT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ESTATUS_QRY_B</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ESTATUS_QRY_B_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 44 - Se solicita la cancelaci칩n de un modulo de tarifa en csto_abo_consumo existente y activo, el tipo de registro es de &quot;P&quot; y el tipo de cobro es por evento(3), es decir es un modulo evento-tarifa. El modulo configurado  (detalle_modulo_tarifa) tiene las siguientes caracterisiticas: La tarifa esta configurada como grupo de tipo de llamada umbral (GRUPO_TLL_CLAVE_UMBRAL &gt; 0), es decir, el  tipo de llamada (TLL_CLAVE) es igual a cero." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE    char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN        char(10),      	-&gt; Clave del abonado
-- 4.- inTLL_CLAVE      int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inSTATUS         int(1)       	-&gt; Estatus del abonado. No es usado por el procedimiento

/*
sp_CancelaIn_cstoAboCon_FromServUsu(
   		inSER_CLAVE      int(6),
   		inABO_CLIENTE    char(8),
   		inABO_MDN        char(10),
		inTLL_CLAVE      int(2),
   		inSTATUS         int(1) )




*/

 call sp_CancelaIn_cstoAboCon_FromServUsu (?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames">ESTATUS_QRY_B</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que el registro existente y activo en csto_abo_consumo se cancele ( se desactive ).</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000044&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000044&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000044&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST44&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;0&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;3&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;35&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;3&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;0&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;1&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;P&quot;);                                	//C = Consumo, T = Tarificacion
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;35&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo ( cancelado )
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;3&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B}, 
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el estado del registro umbral despues de ejecutar el stored procedure

SELECT ESTATUS
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
--   AND LIM_CONSUMO = ${UMBRAL_B}
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
--   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND CONSUMO_ANT = ${CONSUMO_ANT_B}
   AND CONSUMO_EVENTO_ANT = ${CONSUMO_EVENTO_ANT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ESTATUS_QRY_B</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ESTATUS_QRY_B_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="SP -&gt; MBS.sp_InsertIn_CstoAboCon_FromServUsu" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 45 - Se solicita la creacion de un modulo de tarifa en csto_abo_consumo, donde el modulo de tarifa configurado en detalle_modulo_tarifa para el servicio correspondiente tiene las siguientes caracterisiticas: Esta configurada como tipo de llamada (tll_clave &gt; 0), es decir, el grupo de tipo de llamada umbral es igual a cero; El tipo de cobro es por minuto; el precio alterno es cero; el consumo configurado es de 100, y el servicio asociado es a nivel de abonado." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),      -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. No es usado por el procedimiento

/*
sp_InsertIn_CstoAboCon_FromServUsu(
	 inSER_CLAVE      text,
	 inABO_CLIENTE    char(8),
   	inABO_MDN        char(10),
   	inTLL_CLAVE      int(2),
   	inABO_CIC_CVE    int(1) )

*/

call sp_InsertIn_CstoAboCon_FromServUsu (?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se registre el nuevo modulo</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000045&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000045&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000045&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST45&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;100&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;0&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 1 - Nivel de cuenta; 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;C&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;0&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;100&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 46 - Se solicita la creacion de un modulo de tarifa en csto_abo_consumo, donde el modulo de tarifa configurado en detalle_modulo_tarifa para el servicio correspondiente tiene las siguientes caracterisiticas: Esta configurada como tipo de llamada (tll_clave &gt; 0), es decir, el grupo de tipo de llamada umbral es igual a cero; El tipo de cobro es por evento; el precio alterno es cero; el consumo configurado es de 110, y el servicio asociado es a nivel de cuenta." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),      -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. No es usado por el procedimiento

/*
sp_InsertIn_CstoAboCon_FromServUsu(
	 inSER_CLAVE      text,
	 inABO_CLIENTE    char(8),
   	inABO_MDN        char(10),
   	inTLL_CLAVE      int(2),
   	inABO_CIC_CVE    int(1) )
*/

call sp_InsertIn_CstoAboCon_FromServUsu (?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se registre el nuevo modulo</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000046&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000046&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000046&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST46&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;110&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;1&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;1&quot;);  		// 1 - Nivel de cuenta; 2- Nivel de abonado

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;1&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;1&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;C&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;0&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;110&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
--   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 47 - Se solicita la creacion de un modulo de tarifa en csto_abo_consumo, donde el modulo de tarifa configurado en detalle_modulo_tarifa para el servicio correspondiente tiene las siguientes caracterisiticas: Esta configurada como tipo de llamada (tll_clave &gt; 0), es decir, el grupo de tipo de llamada umbral es igual a cero; El tipo de cobro es cero y el precio alterno es mayor a cero (50); el consumo configurado es de 0, y el servicio asociado es a nivel de abonado." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),      -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. No es usado por el procedimiento

/*
sp_InsertIn_CstoAboCon_FromServUsu(
	 inSER_CLAVE      text,
	 inABO_CLIENTE    char(8),
   	inABO_MDN        char(10),
   	inTLL_CLAVE      int(2),
   	inABO_CIC_CVE    int(1) )
*/

call sp_InsertIn_CstoAboCon_FromServUsu (?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se registre el nuevo modulo</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000047&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000047&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000047&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST47&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;50&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;0&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 1 - Nivel de cuenta; 2- Nivel de abonado

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;T&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;50&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
--   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 48 - Se solicita la creacion de un modulo de tarifa en csto_abo_consumo, donde el modulo de tarifa configurado en detalle_modulo_tarifa para el servicio correspondiente tiene las siguientes caracterisiticas: Esta configurada como tipo de llamada (tll_clave &gt; 0), es decir, el grupo de tpo de llamada umbral es igual a cero; El tipo de cobro es minuto/tarifa y el precio alterno es mayor a cero (60); el consumo configurado es de 120, y el servicio asociado es a nivel de abonado." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),      -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. No es usado por el procedimiento

/*
sp_InsertIn_CstoAboCon_FromServUsu(
	 inSER_CLAVE      text,
	 inABO_CLIENTE    char(8),
   	inABO_MDN        char(10),
   	inTLL_CLAVE      int(2),
   	inABO_CIC_CVE    int(1) )
*/

call sp_InsertIn_CstoAboCon_FromServUsu (?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se registre el nuevo modulo</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000048&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000048&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000048&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST48&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;60&quot;); 	//
vars.put(&quot;CONSUMO_A&quot;,    &quot;120&quot;); 	//
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;2&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 1 - Nivel de cuenta; 2- Nivel de abonado

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;P&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;60&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;120&quot;);                                 //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
--   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 49 - Se solicita la creacion de un modulo de tarifa en csto_abo_consumo, donde el modulo de tarifa configurado en detalle_modulo_tarifa para el servicio correspondiente tiene las siguientes caracterisiticas: Esta configurada como tipo de llamada (tll_clave &gt; 0), es decir, el grupo de tipo de llamada umbral es igual a cero; El tipo de cobro es evento/tarifa y el precio alterno es mayor a cero (70); el consumo configurado es de 130, y el servicio asociado es a nivel de cuenta." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),      -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. No es usado por el procedimiento

/*
sp_InsertIn_CstoAboCon_FromServUsu(
	 inSER_CLAVE      text,
	 inABO_CLIENTE    char(8),
   	inABO_MDN        char(10),
   	inTLL_CLAVE      int(2),
   	inABO_CIC_CVE    int(1) )
*/

call sp_InsertIn_CstoAboCon_FromServUsu (?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se registre el nuevo modulo</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000049&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000049&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000049&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST49&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;70&quot;); 	//
vars.put(&quot;CONSUMO_A&quot;,    &quot;130&quot;); 	//
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;3&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;1&quot;);  		// 1 - Nivel de cuenta; 2- Nivel de abonado

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;1&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;1&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;P&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;70&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                 	//
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;130&quot;);               //
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
--   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 50 - Se solicita la creacion de un modulo de tarifa en csto_abo_consumo, donde el modulo de tarifa configurado en detalle_modulo_tarifa para el servicio correspondiente tiene las siguientes caracterisiticas: Esta configurada como grupo de tipo de llamada umbral (GRUPO_TLL_CLAVE_UMBRAL &gt; 0), es decir, el tipo de llamada (tll_clave) es igual a cero; El tipo de cobro es por minuto; el precio alterno es cero; el consumo configurado es de 100, y el servicio asociado es a nivel de abonado." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),      -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. No es usado por el procedimiento

/*
sp_InsertIn_CstoAboCon_FromServUsu(
	 inSER_CLAVE      text,
	 inABO_CLIENTE    char(8),
   	inABO_MDN        char(10),
   	inTLL_CLAVE      int(2),
   	inABO_CIC_CVE    int(1) )

*/

call sp_InsertIn_CstoAboCon_FromServUsu (?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se registre el nuevo modulo</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000050&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000050&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000050&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST50&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;0&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;5&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;100&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;0&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 1 - Nivel de cuenta; 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;0&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;C&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;0&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;100&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;5&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 51 - Se solicita la creacion de un modulo de tarifa en csto_abo_consumo, donde el modulo de tarifa configurado en detalle_modulo_tarifa para el servicio correspondiente tiene las siguientes caracterisiticas: Esta configurada como grupo de tipo de llamada umbral (GRUPO_TLL_CLAVE_UMBRAL &gt; 0), es decir, el tipo de llamada (tll_clave) es igual a cero; El tipo de cobro es por evento; el precio alterno es cero; el consumo configurado es de 110, y el servicio asociado es a nivel de cuenta." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),      -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. No es usado por el procedimiento

/*
sp_InsertIn_CstoAboCon_FromServUsu(
	 inSER_CLAVE      text,
	 inABO_CLIENTE    char(8),
   	inABO_MDN        char(10),
   	inTLL_CLAVE      int(2),
   	inABO_CIC_CVE    int(1) )
*/

call sp_InsertIn_CstoAboCon_FromServUsu (?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se registre el nuevo modulo</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000051&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000051&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000051&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST51&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;0&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;5&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;110&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;1&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;1&quot;);  		// 1 - Nivel de cuenta; 2- Nivel de abonado

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;1&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;0&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;1&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;C&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;0&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;110&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;5&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
--   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 52 - Se solicita la creacion de un modulo de tarifa en csto_abo_consumo, donde el modulo de tarifa configurado en detalle_modulo_tarifa para el servicio correspondiente tiene las siguientes caracterisiticas: Esta configurada como grupo de tipo de llamada umbral (GRUPO_TLL_CLAVE_UMBRAL &gt; 0), es decir, el tipo de llamada (tll_clave) es igual a cero; El tipo de cobro es cero y el precio alterno es mayor a cero (50); el consumo configurado es de 0, y el servicio asociado es a nivel de abonado." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),      -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. No es usado por el procedimiento

/*
sp_InsertIn_CstoAboCon_FromServUsu(
	 inSER_CLAVE      text,
	 inABO_CLIENTE    char(8),
   	inABO_MDN        char(10),
   	inTLL_CLAVE      int(2),
   	inABO_CIC_CVE    int(1) )
*/

call sp_InsertIn_CstoAboCon_FromServUsu (?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se registre el nuevo modulo</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000052&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000052&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000052&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST52&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;0&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;5&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;50&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;0&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 1 - Nivel de cuenta; 2- Nivel de abonado

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;0&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;T&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;50&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;5&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
--   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 53 - Se solicita la creacion de un modulo de tarifa en csto_abo_consumo, donde el modulo de tarifa configurado en detalle_modulo_tarifa para el servicio correspondiente tiene las siguientes caracterisiticas: Esta configurada como grupo de tipo de llamada umbral (GRUPO_TLL_CLAVE_UMBRAL &gt; 0), es decir, el tipo de llamada (tll_clave) es igual a cero; El tipo de cobro es minuto/tarifa y el precio alterno es mayor a cero (60); el consumo configurado es de 120, y el servicio asociado es a nivel de abonado." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),      -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. No es usado por el procedimiento

/*
sp_InsertIn_CstoAboCon_FromServUsu(
	 inSER_CLAVE      text,
	 inABO_CLIENTE    char(8),
   	inABO_MDN        char(10),
   	inTLL_CLAVE      int(2),
   	inABO_CIC_CVE    int(1) )
*/

call sp_InsertIn_CstoAboCon_FromServUsu (?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se registre el nuevo modulo</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000053&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000053&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000053&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST53&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;0&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;5&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;60&quot;); 	//
vars.put(&quot;CONSUMO_A&quot;,    &quot;120&quot;); 	//
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;2&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 1 - Nivel de cuenta; 2- Nivel de abonado

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;0&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;P&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;60&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;120&quot;);                                 //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;5&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
--   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 54 - Se solicita la creacion de un modulo de tarifa en csto_abo_consumo, donde el modulo de tarifa configurado en detalle_modulo_tarifa para el servicio correspondiente tiene las siguientes caracterisiticas: Esta configurada como grupo de tipo de llamada umbral (GRUPO_TLL_CLAVE_UMBRAL &gt; 0), es decir, el tipo de llamada (tll_clave) es igual a cero; El tipo de cobro es evento/tarifa y el precio alterno es mayor a cero (70); el consumo configurado es de 130, y el servicio asociado es a nivel de cuenta." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),      -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. No es usado por el procedimiento

/*
sp_InsertIn_CstoAboCon_FromServUsu(
	 inSER_CLAVE      text,
	 inABO_CLIENTE    char(8),
   	inABO_MDN        char(10),
   	inTLL_CLAVE      int(2),
   	inABO_CIC_CVE    int(1) )
*/

call sp_InsertIn_CstoAboCon_FromServUsu (?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se registre el nuevo modulo</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000054&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000054&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000054&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST54&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;0&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;5&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;70&quot;); 	//
vars.put(&quot;CONSUMO_A&quot;,    &quot;130&quot;); 	//
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;3&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;1&quot;);  		// 1 - Nivel de cuenta; 2- Nivel de abonado

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;1&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;0&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;1&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;P&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;70&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                 	//
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;130&quot;);               //
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;5&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
--   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 55 - Se solicita la creacion (modificacion) de un modulo de tarifa en csto_abo_consumo, donde ya existe un registro con las mismas caracteristicas (tipo de cobro, tipo de llamada, tipo de registro, etc), el modulo de tarifa configurado en detalle_modulo_tarifa para el servicio correspondiente tiene las siguientes caracterisiticas: Esta configurada como tipo de llamada (tll_clave &gt; 0), es decir, el grupo de tipo de llamada umbral es igual a cero; El tipo de cobro es por minuto; el precio alterno es cero; el consumo configurado es de 100, y el servicio asociado es a nivel de abonado." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),      -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. No es usado por el procedimiento

/*
sp_InsertIn_CstoAboCon_FromServUsu(
	 inSER_CLAVE      text,
	 inABO_CLIENTE    char(8),
   	inABO_MDN        char(10),
   	inTLL_CLAVE      int(2),
   	inABO_CIC_CVE    int(1) )

*/

call sp_InsertIn_CstoAboCon_FromServUsu (?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se actualice el modulo existente</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000055&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000055&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000055&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST55&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;100&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;0&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 1 - Nivel de cuenta; 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;C&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;0&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;200&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B}, 
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ( ${UMBRAL_B} + ${CONSUMO_A} )    -- Se suma el consumo configurado al anterior
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 56 - Se solicita la creacion (modificacion) de un modulo de tarifa en csto_abo_consumo, donde ya existe un registro con las mismas caracteristicas (tipo de cobro, tipo de llamada, tipo de registro, etc), el modulo de tarifa configurado en detalle_modulo_tarifa para el servicio correspondiente tiene las siguientes caracterisiticas: Esta configurada como tipo de llamada (tll_clave &gt; 0), es decir, el grupo de tipo de llamada umbral es igual a cero; El tipo de cobro es por evento; el precio alterno es cero; el consumo configurado es de 110, y el servicio asociado es a nivel de cuenta." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),      -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. No es usado por el procedimiento

/*
sp_InsertIn_CstoAboCon_FromServUsu(
	 inSER_CLAVE      text,
	 inABO_CLIENTE    char(8),
   	inABO_MDN        char(10),
   	inTLL_CLAVE      int(2),
   	inABO_CIC_CVE    int(1) )

*/

call sp_InsertIn_CstoAboCon_FromServUsu (?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se actualice el modulo existente</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000056&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000056&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000056&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST56&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;110&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;1&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;1&quot;);  		// 1 - Nivel de cuenta; 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;1&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;1&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;C&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;0&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;220&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B}, 
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}     
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = ( ${UMBRAL_EVENTO_B} + ${CONSUMO_A} )  -- Se suma el consumo configurado al anterior
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 57 - Se solicita la creacion (modificacion) de un modulo de tarifa en csto_abo_consumo, donde ya existe un registro con las mismas caracteristicas (tipo de cobro, tipo de llamada, tipo de registro, etc), el modulo de tarifa configurado en detalle_modulo_tarifa para el servicio correspondiente tiene las siguientes caracterisiticas: Esta configurada como tipo de llamada (tll_clave &gt; 0), es decir, el grupo de tipo de llamada umbral es igual a cero; El tipo de cobro es cero y el precio alterno es mayor a cero (50); el consumo configurado es de 0, y el servicio asociado es a nivel de abonado." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),      -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. No es usado por el procedimiento

/*
sp_InsertIn_CstoAboCon_FromServUsu(
	 inSER_CLAVE      text,
	 inABO_CLIENTE    char(8),
   	inABO_MDN        char(10),
   	inTLL_CLAVE      int(2),
   	inABO_CIC_CVE    int(1) )
*/

call sp_InsertIn_CstoAboCon_FromServUsu (?,?,?,?,?);


</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se actualice el modulo existente</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000057&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000057&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000057&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST57&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;50&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;0&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 1 - Nivel de cuenta; 2- Nivel de abonado

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;T&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;50&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B},
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}     
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B} 
   AND LIM_CONSUMO_EVENTO = ${UMBRAL_EVENTO_B}
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 58 - Se solicita la creacion (modificacion) de un modulo de tarifa en csto_abo_consumo, donde ya existe un registro con las mismas caracteristicas (tipo de cobro, tipo de llamada, tipo de registro, etc), el modulo de tarifa configurado en detalle_modulo_tarifa para el servicio correspondiente tiene las siguientes caracterisiticas: Esta configurada como tipo de llamada (tll_clave &gt; 0), es decir, el grupo de tpo de llamada umbral es igual a cero; El tipo de cobro es minuto/tarifa y el precio alterno es mayor a cero (60); el consumo configurado es de 120, y el servicio asociado es a nivel de abonado." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),      -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. No es usado por el procedimiento

/*
sp_InsertIn_CstoAboCon_FromServUsu(
	 inSER_CLAVE      text,
	 inABO_CLIENTE    char(8),
   	inABO_MDN        char(10),
   	inTLL_CLAVE      int(2),
   	inABO_CIC_CVE    int(1) )
*/

call sp_InsertIn_CstoAboCon_FromServUsu (?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se actualice el modulo existente</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000058&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000058&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000058&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST58&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;60&quot;); 	//
vars.put(&quot;CONSUMO_A&quot;,    &quot;120&quot;); 	//
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;2&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 1 - Nivel de cuenta; 2- Nivel de abonado

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;P&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;60&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;120&quot;);                                 //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B},
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ( ${UMBRAL_B}  + ${CONSUMO_A}  )  -- Se suma el consumo configurado al anterior
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = ${UMBRAL_EVENTO_B} 
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 59 - Se solicita la creacion (modificacion) de un modulo de tarifa en csto_abo_consumo, donde ya existe un registro con las mismas caracteristicas (tipo de cobro, tipo de llamada, tipo de registro, etc), el modulo de tarifa configurado en detalle_modulo_tarifa para el servicio correspondiente tiene las siguientes caracterisiticas: Esta configurada como tipo de llamada (tll_clave &gt; 0), es decir, el grupo de tipo de llamada umbral es igual a cero; El tipo de cobro es evento/tarifa y el precio alterno es mayor a cero (70); el consumo configurado es de 130, y el servicio asociado es a nivel de cuenta." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),      -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. No es usado por el procedimiento

/*
sp_InsertIn_CstoAboCon_FromServUsu(
	 inSER_CLAVE      text,
	 inABO_CLIENTE    char(8),
   	inABO_MDN        char(10),
   	inTLL_CLAVE      int(2),
   	inABO_CIC_CVE    int(1) )
*/

call sp_InsertIn_CstoAboCon_FromServUsu (?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se actualice el modulo existente</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000059&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000059&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000059&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST59&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;70&quot;); 	//
vars.put(&quot;CONSUMO_A&quot;,    &quot;130&quot;); 	//
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;3&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;1&quot;);  		// 1 - Nivel de cuenta; 2- Nivel de abonado

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;1&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;1&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;P&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;70&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                 	//
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;130&quot;);               //
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B},
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}     
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = ( ${UMBRAL_EVENTO_B} + ${CONSUMO_A} )  -- Se suma el consumo configurado al anterior
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 60 - Se solicita la creacion (modificacion) de un modulo de tarifa en csto_abo_consumo, donde ya existe un registro con las mismas caracteristicas (tipo de cobro, tipo de llamada, tipo de registro, etc), el modulo de tarifa configurado en detalle_modulo_tarifa para el servicio correspondiente tiene las siguientes caracterisiticas: Esta configurada como grupo de tipo de llamada umbral(GRUPO_TLL_CLAVE_UMBRAL&gt;0), es decir, tipo de llamada (tll_clave)  es igual a cero; El tipo de cobro es por minuto; el precio alterno es cero; el consumo configurado es de 100, y el servicio asociado es a nivel de abonado." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),      -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. No es usado por el procedimiento

/*
sp_InsertIn_CstoAboCon_FromServUsu(
	 inSER_CLAVE      text,
	 inABO_CLIENTE    char(8),
   	inABO_MDN        char(10),
   	inTLL_CLAVE      int(2),
   	inABO_CIC_CVE    int(1) )

*/

call sp_InsertIn_CstoAboCon_FromServUsu (?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se actualice el modulo existente</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000060&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000060&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000060&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST60&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;0&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;5&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;100&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;0&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 1 - Nivel de cuenta; 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;0&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;C&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;0&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;200&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;5&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B}, 
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ( ${UMBRAL_B} + ${CONSUMO_A} )    -- Se suma el consumo configurado al anterior
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 61 - Se solicita la creacion (modificacion) de un modulo de tarifa en csto_abo_consumo, donde ya existe un registro con las mismas caracteristicas (tipo de cobro, tipo de llamada, tipo de registro, etc), el modulo de tarifa configurado en detalle_modulo_tarifa para el servicio correspondiente tiene las siguientes caracterisiticas: Esta configurada como grupo de tipo de llamada umbral(GRUPO_TLL_CLAVE_UMBRAL&gt;0), es decir, tipo de llamada (tll_clave)  es igual a cero; El tipo de cobro es por evento; el precio alterno es cero; el consumo configurado es de 110, y el servicio asociado es a nivel de cuenta." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),      -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. No es usado por el procedimiento

/*
sp_InsertIn_CstoAboCon_FromServUsu(
	 inSER_CLAVE      text,
	 inABO_CLIENTE    char(8),
   	inABO_MDN        char(10),
   	inTLL_CLAVE      int(2),
   	inABO_CIC_CVE    int(1) )

*/

call sp_InsertIn_CstoAboCon_FromServUsu (?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se actualice el modulo existente</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000061&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000061&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000061&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST61&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;0&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;5&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;110&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;1&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;1&quot;);  		// 1 - Nivel de cuenta; 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;1&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;0&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;1&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;C&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;0&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;220&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;5&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B}, 
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}     
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = ( ${UMBRAL_EVENTO_B} + ${CONSUMO_A} )  -- Se suma el consumo configurado al anterior
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 62 - Se solicita la creacion (modificacion) de un modulo de tarifa en csto_abo_consumo, donde ya existe un registro con las mismas caracteristicas (tipo de cobro, tipo de llamada, tipo de registro, etc), el modulo de tarifa configurado en detalle_modulo_tarifa para el servicio correspondiente tiene las siguientes caracterisiticas: Esta configurada como grupo de tipo de llamada umbral(GRUPO_TLL_CLAVE_UMBRAL&gt;0), es decir, tipo de llamada (tll_clave)  es igual a cero; El tipo de cobro es cero y el precio alterno es mayor a cero (50); el consumo configurado es de 0, y el servicio asociado es a nivel de abonado." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),      -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. No es usado por el procedimiento

/*
sp_InsertIn_CstoAboCon_FromServUsu(
	 inSER_CLAVE      text,
	 inABO_CLIENTE    char(8),
   	inABO_MDN        char(10),
   	inTLL_CLAVE      int(2),
   	inABO_CIC_CVE    int(1) )
*/

call sp_InsertIn_CstoAboCon_FromServUsu (?,?,?,?,?);


</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se actualice el modulo existente</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000062&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000062&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000062&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST62&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;0&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;5&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;50&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;0&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 1 - Nivel de cuenta; 2- Nivel de abonado

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;0&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;T&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;50&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;5&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B},
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}     
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B} 
   AND LIM_CONSUMO_EVENTO = ${UMBRAL_EVENTO_B}
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 63 - Se solicita la creacion (modificacion) de un modulo de tarifa en csto_abo_consumo, donde ya existe un registro con las mismas caracteristicas (tipo de cobro, tipo de llamada, tipo de registro, etc), el modulo de tarifa configurado en detalle_modulo_tarifa para el servicio correspondiente tiene las siguientes caracterisiticas: Esta configurada como grupo de tipo de llamada umbral(GRUPO_TLL_CLAVE_UMBRAL&gt;0), es decir, tipo de llamada (tll_clave)  es igual a cero; El tipo de cobro es minuto/tarifa y el precio alterno es mayor a cero (60); el consumo configurado es de 120, y el servicio asociado es a nivel de abonado." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),      -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. No es usado por el procedimiento

/*
sp_InsertIn_CstoAboCon_FromServUsu(
	 inSER_CLAVE      text,
	 inABO_CLIENTE    char(8),
   	inABO_MDN        char(10),
   	inTLL_CLAVE      int(2),
   	inABO_CIC_CVE    int(1) )
*/

call sp_InsertIn_CstoAboCon_FromServUsu (?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se actualice el modulo existente</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000063&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000063&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000063&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST63&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;0&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;5&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;60&quot;); 	//
vars.put(&quot;CONSUMO_A&quot;,    &quot;120&quot;); 	//
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;2&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 1 - Nivel de cuenta; 2- Nivel de abonado

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;0&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;P&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;60&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;120&quot;);                                 //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;5&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B},
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ( ${UMBRAL_B}  + ${CONSUMO_A}  )  -- Se suma el consumo configurado al anterior
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = ${UMBRAL_EVENTO_B} 
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 64 - Se solicita la creacion (modificacion) de un modulo de tarifa en csto_abo_consumo, donde ya existe un registro con las mismas caracteristicas (tipo de cobro, tipo de llamada, tipo de registro, etc), el modulo de tarifa configurado en detalle_modulo_tarifa para el servicio correspondiente tiene las siguientes caracterisiticas: Esta configurada como grupo de tipo de llamada umbral(GRUPO_TLL_CLAVE_UMBRAL&gt;0), es decir, tipo de llamada (tll_clave)  es igual a cero; El tipo de cobro es evento/tarifa y el precio alterno es mayor a cero (70); el consumo configurado es de 130, y el servicio asociado es a nivel de cuenta." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),      -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. No es usado por el procedimiento
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. No es usado por el procedimiento

/*
sp_InsertIn_CstoAboCon_FromServUsu(
	 inSER_CLAVE      text,
	 inABO_CLIENTE    char(8),
   	inABO_MDN        char(10),
   	inTLL_CLAVE      int(2),
   	inABO_CIC_CVE    int(1) )
*/

call sp_InsertIn_CstoAboCon_FromServUsu (?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se actualice el modulo existente</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000064&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000064&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000064&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST64&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;0&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;5&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;70&quot;); 	//
vars.put(&quot;CONSUMO_A&quot;,    &quot;130&quot;); 	//
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;3&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;1&quot;);  		// 1 - Nivel de cuenta; 2- Nivel de abonado

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;1&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;0&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;1&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;P&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;70&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                 	//
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;130&quot;);               //
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;5&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B},
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}     
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = ( ${UMBRAL_EVENTO_B} + ${CONSUMO_A} )  -- Se suma el consumo configurado al anterior
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="SP -&gt; MBS.sp_UpdateIn_CstoAboCon_FromServUsu" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 65 - Se solicita la actualizacion (creacion) de un modulo de tarifa en csto_abo_consumo, pero el modulo no existe en costo_abo_consumo, el modulo de tarifa configurado en detalle_modulo_tarifa para el servicio correspondiente tiene las siguientes caracterisiticas: Esta configurada como tipo de llamada (tll_clave &gt; 0), es decir, el grupo de tipo de llamada umbral es igual a cero; El tipo de cobro es por minuto; el precio alterno es cero; el consumo configurado es de 100, y el servicio asociado es a nivel de abonado." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),  -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. 
-- 5.- inSTATUS       int(2), 	-&gt; Estatus del servicio
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. 

/*
sp_UpdateIn_CstoAboCon_FromServUsu(
		inSER_CLAVE text,
                                                      	inABO_CLIENTE char(8),
                                                      	inABO_MDN char(10),
                                                      	inTLL_CLAVE int(2),
                                                      	inSTATUS int(1),
                                                      	inABO_CIC_CVE int (1))

*/

call sp_UpdateIn_CstoAboCon_FromServUsu (?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Al no existir, se espera que se registre en csto_abo_consumo</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000065&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000065&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. 
vars.put(&quot;STATUS&quot;,    &quot;1&quot;);         		// Estatus del servicio. 

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000065&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST65&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;100&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;0&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 1 - Nivel de cuenta; 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;C&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;0&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;100&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 66 - Se solicita la actualizacion (creacion) de un modulo de tarifa en csto_abo_consumo, pero el modulo no existe en costo_abo_consumo, el modulo de tarifa configurado en detalle_modulo_tarifa para el servicio correspondiente tiene las siguientes caracterisiticas: Esta configurada como tipo de llamada (tll_clave &gt; 0), es decir, el grupo de tipo de llamada umbral es igual a cero; El tipo de cobro es por evento; el precio alterno es cero; el consumo configurado es de 110, y el servicio asociado es a nivel de cuenta." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),  -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. 
-- 5.- inSTATUS       int(2), 	-&gt; Estatus del servicio
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. 

/*
sp_UpdateIn_CstoAboCon_FromServUsu(
		inSER_CLAVE text,
                                                      	inABO_CLIENTE char(8),
                                                      	inABO_MDN char(10),
                                                      	inTLL_CLAVE int(2),
                                                      	inSTATUS int(1),
                                                      	inABO_CIC_CVE int (1))

*/

call sp_UpdateIn_CstoAboCon_FromServUsu (?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Al no existir, se espera que se registre en csto_abo_consumo</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000066&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000066&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;1&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000066&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST66&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;110&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;1&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;1&quot;);  		// 1 - Nivel de cuenta; 2- Nivel de abonado

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;1&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;1&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;C&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;0&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;110&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
--   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 67 - Se solicita la actualizacion (creacion) de un modulo de tarifa en csto_abo_consumo, pero el modulo no existe en costo_abo_consumo, el modulo de tarifa configurado en detalle_modulo_tarifa para el servicio correspondiente tiene las siguientes caracterisiticas: Esta configurada como tipo de llamada (tll_clave &gt; 0), es decir, el grupo de tipo de llamada umbral es igual a cero; El tipo de cobro es cero y el precio alterno es mayor a cero (50); el consumo configurado es de 0, y el servicio asociado es a nivel de abonado." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),  -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. 
-- 5.- inSTATUS       int(2), 	-&gt; Estatus del servicio
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. 

/*
sp_UpdateIn_CstoAboCon_FromServUsu(
		inSER_CLAVE text,
                                                      	inABO_CLIENTE char(8),
                                                      	inABO_MDN char(10),
                                                      	inTLL_CLAVE int(2),
                                                      	inSTATUS int(1),
                                                      	inABO_CIC_CVE int (1))

*/

call sp_UpdateIn_CstoAboCon_FromServUsu (?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Al no existir, se espera que se registre en csto_abo_consumo</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000067&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000067&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;1&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000067&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST67&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;50&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;0&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 1 - Nivel de cuenta; 2- Nivel de abonado

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;T&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;50&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
--   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 68 - Se solicita la actualizacion (creacion) de un modulo de tarifa en csto_abo_consumo, pero el modulo no existe en costo_abo_consumo, el modulo de tarifa configurado en detalle_modulo_tarifa para el servicio correspondiente tiene las siguientes caracterisiticas: Esta configurada como tipo de llamada (tll_clave &gt; 0), es decir, el grupo de tpo de llamada umbral es igual a cero; El tipo de cobro es minuto/tarifa y el precio alterno es mayor a cero (60); el consumo configurado es de 120, y el servicio asociado es a nivel de abonado." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),  -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. 
-- 5.- inSTATUS       int(2), 	-&gt; Estatus del servicio
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. 

/*
sp_UpdateIn_CstoAboCon_FromServUsu(
		inSER_CLAVE text,
                                                      	inABO_CLIENTE char(8),
                                                      	inABO_MDN char(10),
                                                      	inTLL_CLAVE int(2),
                                                      	inSTATUS int(1),
                                                      	inABO_CIC_CVE int (1))

*/

call sp_UpdateIn_CstoAboCon_FromServUsu (?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Al no existir, se espera que se registre en csto_abo_consumo</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000068&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000068&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;1&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000068&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST68&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;60&quot;); 	//
vars.put(&quot;CONSUMO_A&quot;,    &quot;120&quot;); 	//
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;2&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 1 - Nivel de cuenta; 2- Nivel de abonado

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;P&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;60&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;120&quot;);                                 //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
--   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 69 - Se solicita la actualizacion (creacion) de un modulo de tarifa en csto_abo_consumo, pero el modulo no existe en costo_abo_consumo, el modulo de tarifa configurado en detalle_modulo_tarifa para el servicio correspondiente tiene las siguientes caracterisiticas: Esta configurada como tipo de llamada (tll_clave &gt; 0), es decir, el grupo de tipo de llamada umbral es igual a cero; El tipo de cobro es evento/tarifa y el precio alterno es mayor a cero (70); el consumo configurado es de 130, y el servicio asociado es a nivel de cuenta." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),  -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. 
-- 5.- inSTATUS       int(2), 	-&gt; Estatus del servicio
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. 

/*
sp_UpdateIn_CstoAboCon_FromServUsu(
		inSER_CLAVE text,
                                                      	inABO_CLIENTE char(8),
                                                      	inABO_MDN char(10),
                                                      	inTLL_CLAVE int(2),
                                                      	inSTATUS int(1),
                                                      	inABO_CIC_CVE int (1))

*/

call sp_UpdateIn_CstoAboCon_FromServUsu (?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Al no existir, se espera que se registre en csto_abo_consumo</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000069&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000069&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;1&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000069&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST69&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;70&quot;); 	//
vars.put(&quot;CONSUMO_A&quot;,    &quot;130&quot;); 	//
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;3&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;1&quot;);  		// 1 - Nivel de cuenta; 2- Nivel de abonado

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;1&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;1&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;P&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;70&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                 	//
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;130&quot;);               //
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
--   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 70 - Se solicita la actualizacion (creacion) de un modulo de tarifa en csto_abo_consumo, pero el modulo no existe en costo_abo_consumo, el modulo de tarifa configurado en detalle_modulo_tarifa para el servicio correspondiente tiene las siguientes caracterisiticas: Esta configurada como grupo de tipo de llamada umbral (GRUPO_TLL_CLAVE_UMBRAL &gt; 0), es decir, el tipo de llamada (tll_clave) es igual a cero; El tipo de cobro es por minuto; el precio alterno es cero; el consumo configurado es de 100, y el servicio asociado es a nivel de abonado." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),  -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. 
-- 5.- inSTATUS       int(2), 	-&gt; Estatus del servicio
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. 

/*
sp_UpdateIn_CstoAboCon_FromServUsu(
		inSER_CLAVE text,
                                                      	inABO_CLIENTE char(8),
                                                      	inABO_MDN char(10),
                                                      	inTLL_CLAVE int(2),
                                                      	inSTATUS int(1),
                                                      	inABO_CIC_CVE int (1))

*/

call sp_UpdateIn_CstoAboCon_FromServUsu (?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Al no existir, se espera que se registre en csto_abo_consumo</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000070&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000070&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;1&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000070&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST70&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;0&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;5&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;100&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;0&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 1 - Nivel de cuenta; 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;0&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;C&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;0&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;100&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;5&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 71 - Se solicita la actualizacion (creacion) de un modulo de tarifa en csto_abo_consumo, pero el modulo no existe en costo_abo_consumo, el modulo de tarifa configurado en detalle_modulo_tarifa para el servicio correspondiente tiene las siguientes caracterisiticas: Esta configurada como grupo de tipo de llamada umbral (GRUPO_TLL_CLAVE_UMBRAL &gt; 0), es decir, el tipo de llamada (tll_clave) es igual a cero; El tipo de cobro es por evento; el precio alterno es cero; el consumo configurado es de 110, y el servicio asociado es a nivel de cuenta." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),  -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. 
-- 5.- inSTATUS       int(2), 	-&gt; Estatus del servicio
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. 

/*
sp_UpdateIn_CstoAboCon_FromServUsu(
		inSER_CLAVE text,
                                                      	inABO_CLIENTE char(8),
                                                      	inABO_MDN char(10),
                                                      	inTLL_CLAVE int(2),
                                                      	inSTATUS int(1),
                                                      	inABO_CIC_CVE int (1))

*/

call sp_UpdateIn_CstoAboCon_FromServUsu (?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Al no existir, se espera que se registre en csto_abo_consumo</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000071&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000071&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;1&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000071&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST71&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;0&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;5&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;110&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;1&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;1&quot;);  		// 1 - Nivel de cuenta; 2- Nivel de abonado

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;1&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;0&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;1&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;C&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;0&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;110&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;5&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
--   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 72 - Se solicita la actualizacion (creacion) de un modulo de tarifa en csto_abo_consumo, pero el modulo no existe en costo_abo_consumo, el modulo de tarifa configurado en detalle_modulo_tarifa para el servicio correspondiente tiene las siguientes caracterisiticas: Esta configurada como grupo de tipo de llamada umbral (GRUPO_TLL_CLAVE_UMBRAL &gt; 0), es decir, el tipo de llamada (tll_clave) es igual a cero; El tipo de cobro es cero y el precio alterno es mayor a cero (50); el consumo configurado es de 0, y el servicio asociado es a nivel de abonado." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),  -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. 
-- 5.- inSTATUS       int(2), 	-&gt; Estatus del servicio
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. 

/*
sp_UpdateIn_CstoAboCon_FromServUsu(
		inSER_CLAVE text,
                                                      	inABO_CLIENTE char(8),
                                                      	inABO_MDN char(10),
                                                      	inTLL_CLAVE int(2),
                                                      	inSTATUS int(1),
                                                      	inABO_CIC_CVE int (1))

*/

call sp_UpdateIn_CstoAboCon_FromServUsu (?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Al no existir, se espera que se registre en csto_abo_consumo</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000072&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000072&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;1&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000072&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST72&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;0&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;5&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;50&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;0&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 1 - Nivel de cuenta; 2- Nivel de abonado

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;0&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;T&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;50&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;5&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
--   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 73 - Se solicita la actualizacion (creacion) de un modulo de tarifa en csto_abo_consumo, pero el modulo no existe en costo_abo_consumo, el modulo de tarifa configurado en detalle_modulo_tarifa para el servicio correspondiente tiene las siguientes caracterisiticas: Esta configurada como grupo de tipo de llamada umbral (GRUPO_TLL_CLAVE_UMBRAL &gt; 0), es decir, el tipo de llamada (tll_clave) es igual a cero; El tipo de cobro es minuto/tarifa y el precio alterno es mayor a cero (60); el consumo configurado es de 120, y el servicio asociado es a nivel de abonado." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),  -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. 
-- 5.- inSTATUS       int(2), 	-&gt; Estatus del servicio
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. 

/*
sp_UpdateIn_CstoAboCon_FromServUsu(
		inSER_CLAVE text,
                                                      	inABO_CLIENTE char(8),
                                                      	inABO_MDN char(10),
                                                      	inTLL_CLAVE int(2),
                                                      	inSTATUS int(1),
                                                      	inABO_CIC_CVE int (1))

*/

call sp_UpdateIn_CstoAboCon_FromServUsu (?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Al no existir, se espera que se registre en csto_abo_consumo</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000073&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000073&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;1&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000073&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST73&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;0&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;5&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;60&quot;); 	//
vars.put(&quot;CONSUMO_A&quot;,    &quot;120&quot;); 	//
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;2&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 1 - Nivel de cuenta; 2- Nivel de abonado

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;0&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;P&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;60&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;120&quot;);                                 //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;5&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
--   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 74 - Se solicita la actualizacion (creacion) de un modulo de tarifa en csto_abo_consumo, pero el modulo no existe en costo_abo_consumo, el modulo de tarifa configurado en detalle_modulo_tarifa para el servicio correspondiente tiene las siguientes caracterisiticas: Esta configurada como grupo de tipo de llamada umbral (GRUPO_TLL_CLAVE_UMBRAL &gt; 0), es decir, el tipo de llamada (tll_clave) es igual a cero; El tipo de cobro es evento/tarifa y el precio alterno es mayor a cero (70); el consumo configurado es de 130, y el servicio asociado es a nivel de cuenta." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),  -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. 
-- 5.- inSTATUS       int(2), 	-&gt; Estatus del servicio
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. 

/*
sp_UpdateIn_CstoAboCon_FromServUsu(
		inSER_CLAVE text,
                                                      	inABO_CLIENTE char(8),
                                                      	inABO_MDN char(10),
                                                      	inTLL_CLAVE int(2),
                                                      	inSTATUS int(1),
                                                      	inABO_CIC_CVE int (1))

*/

call sp_UpdateIn_CstoAboCon_FromServUsu (?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Al no existir, se espera que se registre en csto_abo_consumo</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000074&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000074&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;1&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000074&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST74&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;0&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;5&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;70&quot;); 	//
vars.put(&quot;CONSUMO_A&quot;,    &quot;130&quot;); 	//
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;3&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;1&quot;);  		// 1 - Nivel de cuenta; 2- Nivel de abonado

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;1&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;0&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;1&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;P&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;70&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                 	//
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;130&quot;);               //
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;5&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
--   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 75 - Se solicita la actualizaci칩n de un modulo de tarifa en csto_abo_consumo existente, el cual concuerda con las caracteristicas configuradas en detalle_modulo_tarifa para el servicio correspondiente, las caracterisiticas son: Esta configurada como tipo de llamada (tll_clave &gt; 0), es decir, el grupo de tipo de llamada umbral es igual a cero; El tipo de cobro es por minuto; el precio alterno es cero; el consumo configurado es de 100, y el servicio asociado es a nivel de abonado." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),  -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. 
-- 5.- inSTATUS       int(2), 	-&gt; Estatus del servicio
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. 

/*
sp_UpdateIn_CstoAboCon_FromServUsu(
		inSER_CLAVE text,
                                                      	inABO_CLIENTE char(8),
                                                      	inABO_MDN char(10),
                                                      	inTLL_CLAVE int(2),
                                                      	inSTATUS int(1),
                                                      	inABO_CIC_CVE int (1))

*/

call sp_UpdateIn_CstoAboCon_FromServUsu (?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se actualice el registro existente</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000075&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000075&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;1&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000075&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST75&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;100&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;0&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 1 - Nivel de cuenta; 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;C&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;0&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;200&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B}, 
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ( ${UMBRAL_B} + ${CONSUMO_A} )    -- Se suma el consumo configurado al anterior
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 76 - Se solicita la actualizaci칩n de un modulo de tarifa en csto_abo_consumo existente, el cual concuerda con las caracteristicas configuradas en detalle_modulo_tarifa para el servicio correspondiente, las caracterisiticas son: Esta configurada como tipo de llamada (tll_clave &gt; 0), es decir, el grupo de tipo de llamada umbral es igual a cero; El tipo de cobro es por evento; el precio alterno es cero; el consumo configurado es de 110, y el servicio asociado es a nivel de cuenta." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),  -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. 
-- 5.- inSTATUS       int(2), 	-&gt; Estatus del servicio
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. 

/*
sp_UpdateIn_CstoAboCon_FromServUsu(
		inSER_CLAVE text,
                                                      	inABO_CLIENTE char(8),
                                                      	inABO_MDN char(10),
                                                      	inTLL_CLAVE int(2),
                                                      	inSTATUS int(1),
                                                      	inABO_CIC_CVE int (1))

*/

call sp_UpdateIn_CstoAboCon_FromServUsu (?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se actualice el registro existente</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000076&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000076&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;1&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000076&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST76&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;110&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;1&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;1&quot;);  		// 1 - Nivel de cuenta; 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;1&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;1&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;C&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;0&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;220&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B}, 
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}     
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = ( ${UMBRAL_EVENTO_B} + ${CONSUMO_A} )  -- Se suma el consumo configurado al anterior
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
--   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 77 - Se solicita la actualizaci칩n de un modulo de tarifa en csto_abo_consumo existente, el cual concuerda con las caracteristicas configuradas en detalle_modulo_tarifa para el servicio correspondiente, las caracterisiticas son: Esta configurada como tipo de llamada (tll_clave &gt; 0), es decir, el grupo de tipo de llamada umbral es igual a cero; El tipo de cobro es cero y el precio alterno es mayor a cero (50); el consumo configurado es de 0, y el servicio asociado es a nivel de abonado." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),  -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. 
-- 5.- inSTATUS       int(2), 	-&gt; Estatus del servicio
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. 

/*
sp_UpdateIn_CstoAboCon_FromServUsu(
		inSER_CLAVE text,
                                                      	inABO_CLIENTE char(8),
                                                      	inABO_MDN char(10),
                                                      	inTLL_CLAVE int(2),
                                                      	inSTATUS int(1),
                                                      	inABO_CIC_CVE int (1))

*/

call sp_UpdateIn_CstoAboCon_FromServUsu (?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se actualice el registro existente</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000077&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000077&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;1&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000077&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST77&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;50&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;0&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 1 - Nivel de cuenta; 2- Nivel de abonado

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;T&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;50&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B},
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}     
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B} 
   AND LIM_CONSUMO_EVENTO = ${UMBRAL_EVENTO_B}
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 78 - Se solicita la actualizaci칩n de un modulo de tarifa en csto_abo_consumo existente, el cual concuerda con las caracteristicas configuradas en detalle_modulo_tarifa para el servicio correspondiente, las caracterisiticas son: Esta configurada como tipo de llamada (tll_clave &gt; 0), es decir, el grupo de tpo de llamada umbral es igual a cero; El tipo de cobro es minuto/tarifa y el precio alterno es mayor a cero (60); el consumo configurado es de 120, y el servicio asociado es a nivel de abonado." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),  -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. 
-- 5.- inSTATUS       int(2), 	-&gt; Estatus del servicio
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. 

/*
sp_UpdateIn_CstoAboCon_FromServUsu(
		inSER_CLAVE text,
                                                      	inABO_CLIENTE char(8),
                                                      	inABO_MDN char(10),
                                                      	inTLL_CLAVE int(2),
                                                      	inSTATUS int(1),
                                                      	inABO_CIC_CVE int (1))

*/

call sp_UpdateIn_CstoAboCon_FromServUsu (?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se actualice el registro existente</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000078&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000078&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;1&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000078&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST78&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;60&quot;); 	//
vars.put(&quot;CONSUMO_A&quot;,    &quot;120&quot;); 	//
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;2&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 1 - Nivel de cuenta; 2- Nivel de abonado

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;P&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;60&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;120&quot;);                                 //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B},
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ( ${UMBRAL_B}  + ${CONSUMO_A}  )  -- Se suma el consumo configurado al anterior
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = ${UMBRAL_EVENTO_B} 
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 79 - Se solicita la actualizaci칩n de un modulo de tarifa en csto_abo_consumo existente, el cual concuerda con las caracteristicas configuradas en detalle_modulo_tarifa para el servicio correspondiente, las caracterisiticas son: Esta configurada como tipo de llamada (tll_clave &gt; 0), es decir, el grupo de tipo de llamada umbral es igual a cero; El tipo de cobro es evento/tarifa y el precio alterno es mayor a cero (70); el consumo configurado es de 130, y el servicio asociado es a nivel de cuenta." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),  -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. 
-- 5.- inSTATUS       int(2), 	-&gt; Estatus del servicio
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. 

/*
sp_UpdateIn_CstoAboCon_FromServUsu(
		inSER_CLAVE text,
                                                      	inABO_CLIENTE char(8),
                                                      	inABO_MDN char(10),
                                                      	inTLL_CLAVE int(2),
                                                      	inSTATUS int(1),
                                                      	inABO_CIC_CVE int (1))

*/

call sp_UpdateIn_CstoAboCon_FromServUsu (?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se actualice el registro existente</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000079&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000079&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;1&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000079&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST79&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;70&quot;); 	//
vars.put(&quot;CONSUMO_A&quot;,    &quot;130&quot;); 	//
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;3&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;1&quot;);  		// 1 - Nivel de cuenta; 2- Nivel de abonado

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;1&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;1&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;P&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;70&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                 	//
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;130&quot;);               //
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B},
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}     
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = ( ${UMBRAL_EVENTO_B} + ${CONSUMO_A} )  -- Se suma el consumo configurado al anterior
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
--   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 80 - Se solicita la actualizaci칩n de un modulo de tarifa en csto_abo_consumo existente, el cual concuerda con las caracteristicas configuradas en detalle_modulo_tarifa para el servicio correspondiente, las caracterisiticas son: Esta configurada como grupo de tipo de llamada umbral(GRUPO_TLL_CLAVE_UMBRAL&gt;0), es decir, tipo de llamada (tll_clave)  es igual a cero; El tipo de cobro es por minuto; el precio alterno es cero; el consumo configurado es de 100, y el servicio asociado es a nivel de abonado." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),  -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. 
-- 5.- inSTATUS       int(2), 	-&gt; Estatus del servicio
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. 

/*
sp_UpdateIn_CstoAboCon_FromServUsu(
		inSER_CLAVE text,
                                                      	inABO_CLIENTE char(8),
                                                      	inABO_MDN char(10),
                                                      	inTLL_CLAVE int(2),
                                                      	inSTATUS int(1),
                                                      	inABO_CIC_CVE int (1))

*/

call sp_UpdateIn_CstoAboCon_FromServUsu (?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se actualice el registro existente</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000080&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000080&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;1&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000080&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST80&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;0&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;5&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;100&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;0&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 1 - Nivel de cuenta; 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;0&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;C&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;0&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;200&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;5&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B}, 
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ( ${UMBRAL_B} + ${CONSUMO_A} )    -- Se suma el consumo configurado al anterior
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 81 - Se solicita la actualizaci칩n de un modulo de tarifa en csto_abo_consumo existente, el cual concuerda con las caracteristicas configuradas en detalle_modulo_tarifa para el servicio correspondiente, las caracterisiticas son: Esta configurada como grupo de tipo de llamada umbral(GRUPO_TLL_CLAVE_UMBRAL&gt;0), es decir, tipo de llamada (tll_clave)  es igual a cero; El tipo de cobro es por evento; el precio alterno es cero; el consumo configurado es de 110, y el servicio asociado es a nivel de cuenta." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),  -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. 
-- 5.- inSTATUS       int(2), 	-&gt; Estatus del servicio
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. 

/*
sp_UpdateIn_CstoAboCon_FromServUsu(
		inSER_CLAVE text,
                                                      	inABO_CLIENTE char(8),
                                                      	inABO_MDN char(10),
                                                      	inTLL_CLAVE int(2),
                                                      	inSTATUS int(1),
                                                      	inABO_CIC_CVE int (1))

*/

call sp_UpdateIn_CstoAboCon_FromServUsu (?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se actualice el registro existente</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000081&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000081&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;1&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000081&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST81&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;0&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;5&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;110&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;1&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;1&quot;);  		// 1 - Nivel de cuenta; 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;1&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;0&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;1&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;C&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;0&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;220&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;5&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B}, 
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}     
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = ( ${UMBRAL_EVENTO_B} + ${CONSUMO_A} )  -- Se suma el consumo configurado al anterior
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
--   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 82 - Se solicita la actualizaci칩n de un modulo de tarifa en csto_abo_consumo existente, el cual concuerda con las caracteristicas configuradas en detalle_modulo_tarifa para el servicio correspondiente, las caracterisiticas son: Esta configurada como grupo de tipo de llamada umbral(GRUPO_TLL_CLAVE_UMBRAL&gt;0), es decir, tipo de llamada (tll_clave)  es igual a cero; El tipo de cobro es cero y el precio alterno es mayor a cero (50); el consumo configurado es de 0, y el servicio asociado es a nivel de abonado." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),  -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. 
-- 5.- inSTATUS       int(2), 	-&gt; Estatus del servicio
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. 

/*
sp_UpdateIn_CstoAboCon_FromServUsu(
		inSER_CLAVE text,
                                                      	inABO_CLIENTE char(8),
                                                      	inABO_MDN char(10),
                                                      	inTLL_CLAVE int(2),
                                                      	inSTATUS int(1),
                                                      	inABO_CIC_CVE int (1))

*/

call sp_UpdateIn_CstoAboCon_FromServUsu (?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se actualice el registro existente</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000082&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000082&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;1&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;200000822&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST82&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;0&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;5&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;50&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;0&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 1 - Nivel de cuenta; 2- Nivel de abonado

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;0&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;T&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;50&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;5&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B},
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}     
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B} 
   AND LIM_CONSUMO_EVENTO = ${UMBRAL_EVENTO_B}
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 83 - Se solicita la actualizaci칩n de un modulo de tarifa en csto_abo_consumo existente, el cual concuerda con las caracteristicas configuradas en detalle_modulo_tarifa para el servicio correspondiente, las caracterisiticas son: Esta configurada como grupo de tipo de llamada umbral(GRUPO_TLL_CLAVE_UMBRAL&gt;0), es decir, tipo de llamada (tll_clave)  es igual a cero; El tipo de cobro es minuto/tarifa y el precio alterno es mayor a cero (60); el consumo configurado es de 120, y el servicio asociado es a nivel de abonado." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),  -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. 
-- 5.- inSTATUS       int(2), 	-&gt; Estatus del servicio
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. 

/*
sp_UpdateIn_CstoAboCon_FromServUsu(
		inSER_CLAVE text,
                                                      	inABO_CLIENTE char(8),
                                                      	inABO_MDN char(10),
                                                      	inTLL_CLAVE int(2),
                                                      	inSTATUS int(1),
                                                      	inABO_CIC_CVE int (1))

*/

call sp_UpdateIn_CstoAboCon_FromServUsu (?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se actualice el registro existente</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000083&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000083&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;1&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000083&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST83&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;0&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;5&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;60&quot;); 	//
vars.put(&quot;CONSUMO_A&quot;,    &quot;120&quot;); 	//
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;2&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 1 - Nivel de cuenta; 2- Nivel de abonado

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;0&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;P&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;60&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;120&quot;);                                 //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;5&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B},
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ( ${UMBRAL_B}  + ${CONSUMO_A}  )  -- Se suma el consumo configurado al anterior
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = ${UMBRAL_EVENTO_B} 
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 84 - Se solicita la actualizaci칩n de un modulo de tarifa en csto_abo_consumo existente, el cual concuerda con las caracteristicas configuradas en detalle_modulo_tarifa para el servicio correspondiente, las caracterisiticas son: Esta configurada como grupo de tipo de llamada umbral(GRUPO_TLL_CLAVE_UMBRAL&gt;0), es decir, tipo de llamada (tll_clave)  es igual a cero; El tipo de cobro es evento/tarifa y el precio alterno es mayor a cero (70); el consumo configurado es de 130, y el servicio asociado es a nivel de cuenta." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),  -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. 
-- 5.- inSTATUS       int(2), 	-&gt; Estatus del servicio
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. 

/*
sp_UpdateIn_CstoAboCon_FromServUsu(
		inSER_CLAVE text,
                                                      	inABO_CLIENTE char(8),
                                                      	inABO_MDN char(10),
                                                      	inTLL_CLAVE int(2),
                                                      	inSTATUS int(1),
                                                      	inABO_CIC_CVE int (1))

*/

call sp_UpdateIn_CstoAboCon_FromServUsu (?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se actualice el registro existente</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000084&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000084&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;1&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000084&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST84&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;0&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;5&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;70&quot;); 	//
vars.put(&quot;CONSUMO_A&quot;,    &quot;130&quot;); 	//
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;3&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;1&quot;);  		// 1 - Nivel de cuenta; 2- Nivel de abonado

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;1&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;0&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;1&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;P&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;70&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                 	//
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;130&quot;);               //
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;5&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B},
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}     
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = ( ${UMBRAL_EVENTO_B} + ${CONSUMO_A} )  -- Se suma el consumo configurado al anterior
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
--   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 85 - Se solicita la actualizaci칩n de un modulo de tarifa en csto_abo_consumo existente, pero no corresponde el tipo de cobro al configurado en detalle_modulo_tarifa para el servicio correspondiente, las caracteristicas del modulo en detalle_modulo_tarifa son: Esta configurada como tipo de llamada (tll_clave &gt; 0), es decir, el grupo de tipo de llamada umbral es igual a cero; El tipo de cobro es por minuto; el precio alterno es cero; el consumo configurado es de 100, y el servicio asociado es a nivel de abonado. Mientras que csto_abo consumo el tipo de cobro existente es por evento." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),  -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. 
-- 5.- inSTATUS       int(2), 	-&gt; Estatus del servicio
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. 

/*
sp_UpdateIn_CstoAboCon_FromServUsu(
		inSER_CLAVE text,
                                                      	inABO_CLIENTE char(8),
                                                      	inABO_MDN char(10),
                                                      	inTLL_CLAVE int(2),
                                                      	inSTATUS int(1),
                                                      	inABO_CIC_CVE int (1))

*/

call sp_UpdateIn_CstoAboCon_FromServUsu (?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Al no corresponder los tipos, se espera que NO se actualice el registro existente de acuerdo a la informaci칩n configurada en detalle_modulo_tarifa.</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000085&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000085&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;1&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000085&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST85&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;100&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;0&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 1 - Nivel de cuenta; 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;1&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;C&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;0&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;200&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B}, 
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ( ${UMBRAL_B} + ${CONSUMO_A} )    -- Se suma el consumo configurado al anterior
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${ESTATUS_B};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 86 - Se solicita la actualizaci칩n de un modulo de tarifa en csto_abo_consumo existente, el cual concuerda con las caracteristicas configuradas en detalle_modulo_tarifa para el servicio correspondiente, las caracterisiticas son: Esta configurada como tipo de llamada (tll_clave &gt; 0), es decir, el grupo de tipo de llamada umbral es igual a cero; El tipo de cobro es por minuto; el precio alterno es cero; el consumo configurado es de 100, y el servicio asociado es a nivel de abonado. El estatus del servicio es inactivo (0), y el valor del consumo actual de csto_abo_consumo es igual al configurado en detalle_modulo_tarifa." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alternaual 
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),  -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. 
-- 5.- inSTATUS       int(2), 	-&gt; Estatus del servicio
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. 

/*
sp_UpdateIn_CstoAboCon_FromServUsu(
		inSER_CLAVE text,
                                                      	inABO_CLIENTE char(8),
                                                      	inABO_MDN char(10),
                                                      	inTLL_CLAVE int(2),
                                                      	inSTATUS int(1),
                                                      	inABO_CIC_CVE int (1))

*/

call sp_UpdateIn_CstoAboCon_FromServUsu (?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se actualice el registro existente</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000086&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000086&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000086&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST86&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;100&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;0&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 1 - Nivel de cuenta; 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;C&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;0&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;300&quot;);                                 //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B}, 
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ( ${UMBRAL_B} - ${CONSUMO_A} )    -- Se resta el consumo
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = IF(  (   ( ${UMBRAL_B} - ${CONSUMO_A} )&lt;=0)  , 0 , 1 ) ;  -- Si la diferencia del consumo actual menos el configurado es negativo se desactiva.</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 87 - Se solicita la actualizaci칩n de un modulo de tarifa en csto_abo_consumo existente, el cual concuerda con las caracteristicas configuradas en detalle_modulo_tarifa para el servicio correspondiente, las caracterisiticas son: Esta configurada como tipo de llamada (tll_clave &gt; 0), es decir, el grupo de tipo de llamada umbral es igual a cero; El tipo de cobro es por evento; el precio alterno es cero; el consumo configurado es de 110, y el servicio asociado es a nivel de cuenta. El estatus del servicio es inactivo (0), y el valor del consumo actual de csto_abo_consumo es igual al configurado en detalle_modulo_tarifa." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),  -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. 
-- 5.- inSTATUS       int(2), 	-&gt; Estatus del servicio
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. 

/*
sp_UpdateIn_CstoAboCon_FromServUsu(
		inSER_CLAVE text,
                                                      	inABO_CLIENTE char(8),
                                                      	inABO_MDN char(10),
                                                      	inTLL_CLAVE int(2),
                                                      	inSTATUS int(1),
                                                      	inABO_CIC_CVE int (1))

*/

call sp_UpdateIn_CstoAboCon_FromServUsu (?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se actualice el registro existente</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000087&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000087&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000087&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST87&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;110&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;1&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;1&quot;);  		// 1 - Nivel de cuenta; 

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;1&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;1&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;C&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;0&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;220&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B}, 
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}     
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = ( ${UMBRAL_EVENTO_B} - ${CONSUMO_A} )   -- Se resta el consumo
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
--   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = IF(  (   ( ${UMBRAL_EVENTO_B} - ${CONSUMO_A} )&lt;=0)  , 0 , 1 ) ;  -- Si la diferencia del consumo actual menos el configurado es negativo se desactiva.</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 88 - Se solicita la actualizaci칩n de un modulo de tarifa en csto_abo_consumo existente, el cual concuerda con las caracteristicas configuradas en detalle_modulo_tarifa para el servicio correspondiente, las caracterisiticas son: Esta configurada como tipo de llamada (tll_clave &gt; 0), es decir, el grupo de tipo de llamada umbral es igual a cero; El tipo de cobro es cero y el precio alterno es mayor a cero (50); el consumo configurado es de 0, y el servicio asociado es a nivel de abonado. El estatus del servicio es inactivo (0), y el valor del consumo actual de csto_abo_consumo es igual al configurado en detalle_modulo_tarifa." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),  -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. 
-- 5.- inSTATUS       int(2), 	-&gt; Estatus del servicio
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. 

/*
sp_UpdateIn_CstoAboCon_FromServUsu(
		inSER_CLAVE text,
                                                      	inABO_CLIENTE char(8),
                                                      	inABO_MDN char(10),
                                                      	inTLL_CLAVE int(2),
                                                      	inSTATUS int(1),
                                                      	inABO_CIC_CVE int (1))

*/

call sp_UpdateIn_CstoAboCon_FromServUsu (?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se actualice el registro existente</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000088&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000088&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000088&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST88&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;55&quot;); 	// 
vars.put(&quot;CONSUMO_A&quot;,    &quot;0&quot;); 	// 
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;0&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 1 - Nivel de cuenta; 2- Nivel de abonado

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;T&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;50&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                      //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B},
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}     
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B} 
   AND LIM_CONSUMO_EVENTO = ${UMBRAL_EVENTO_B}
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALTERNO_A}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = ${STATUS} ;  -- De acuerdo al valor de entrada</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 89 - Se solicita la actualizaci칩n de un modulo de tarifa en csto_abo_consumo existente, el cual concuerda con las caracteristicas configuradas en detalle_modulo_tarifa para el servicio correspondiente, las caracterisiticas son: Esta configurada como tipo de llamada (tll_clave &gt; 0), es decir, el grupo de tpo de llamada umbral es igual a cero; El tipo de cobro es minuto/tarifa y el precio alterno es mayor a cero (60); el consumo configurado es de 120, y el servicio asociado es a nivel de abonado. El estatus del servicio es inactivo (0), y el valor del consumo actual de csto_abo_consumo es igual al configurado en detalle_modulo_tarifa." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),  -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. 
-- 5.- inSTATUS       int(2), 	-&gt; Estatus del servicio
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. 

/*
sp_UpdateIn_CstoAboCon_FromServUsu(
		inSER_CLAVE text,
                                                      	inABO_CLIENTE char(8),
                                                      	inABO_MDN char(10),
                                                      	inTLL_CLAVE int(2),
                                                      	inSTATUS int(1),
                                                      	inABO_CIC_CVE int (1))

*/

call sp_UpdateIn_CstoAboCon_FromServUsu (?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se actualice el registro existente</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000089&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000089&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000089&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST89&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;60&quot;); 	//
vars.put(&quot;CONSUMO_A&quot;,    &quot;120&quot;); 	//
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;2&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;2&quot;);  		// 1 - Nivel de cuenta; 2- Nivel de abonado

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;0&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;0&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;P&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;60&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;120&quot;);                                 //
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;0&quot;);               	//
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B},
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ( ${UMBRAL_B}  - ${CONSUMO_A}  )   -- Se resta el consumo
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = ${UMBRAL_EVENTO_B} 
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = IF(  (   ( ${UMBRAL_B} - ${CONSUMO_A} )&lt;=0)  , 0 , 1 ) ;  -- Si la diferencia del consumo actual menos el configurado es negativo se desactiva.</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Prueba 90 - Se solicita la actualizaci칩n de un modulo de tarifa en csto_abo_consumo existente, el cual concuerda con las caracteristicas configuradas en detalle_modulo_tarifa para el servicio correspondiente, las caracterisiticas son: Esta configurada como tipo de llamada (tll_clave &gt; 0), es decir, el grupo de tipo de llamada umbral es igual a cero; El tipo de cobro es evento/tarifa y el precio alterno es mayor a cero (70); el consumo configurado es de 130, y el servicio asociado es a nivel de cuenta. El estatus del servicio es inactivo (0), y el valor del consumo actual de csto_abo_consumo es igual al configurado en detalle_modulo_tarifa." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="query">-- Parametros de entrada:
-- 1.- inSER_CLAVE      int(6)   	-&gt; Clave del servicio asociado al modulo de tarifa alterna
-- 2.- inABO_CLIENTE  char(8),    -&gt; Clave del cliente
-- 3.- inABO_MDN          char(10),  -&gt; Clave del abonado
-- 4.- inTLL_CLAVE       int(2), 	-&gt; Tipo de llamada. 
-- 5.- inSTATUS       int(2), 	-&gt; Estatus del servicio
-- 5.- inABO_CIC_CVE  int(1)       -&gt; Estatus del abonado. 

/*
sp_UpdateIn_CstoAboCon_FromServUsu(
		inSER_CLAVE text,
                                                      	inABO_CLIENTE char(8),
                                                      	inABO_MDN char(10),
                                                      	inTLL_CLAVE int(2),
                                                      	inSTATUS int(1),
                                                      	inABO_CIC_CVE int (1))

*/

call sp_UpdateIn_CstoAboCon_FromServUsu (?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${SER_CLAVE},${ABO_CLIENTE},${ABO_MDN},${TLL_CLAVE},${STATUS},${ABO_CIC_CVE}</stringProp>
              <stringProp name="queryArgumentsTypes">INTEGER,VARCHAR,VARCHAR,INTEGER,INTEGER,INTEGER</stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="TestPlan.comments">Se espera que se actualice el registro existente</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Inicializando valores" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">// Parametros de entrada / salida del SP:
vars.put(&quot;ABO_CLIENTE&quot;,    &quot;99000090&quot;);      	// Clave del cliente
vars.put(&quot;ABO_MDN&quot;,    &quot;5599000090&quot;);         	// Clave del abonado
vars.put(&quot;TLL_CLAVE&quot;,    &quot;0&quot;);         	// Clave del tipo de llamada. No es usado por el procedimiento
vars.put(&quot;STATUS&quot;,    &quot;0&quot;);         		// Estatus del abonado. No es usado por el procedimiento

//comun
vars.put(&quot;SER_CLAVE&quot;,    &quot;20000090&quot;);         	// Clave del servicio
vars.put(&quot;USU_REG&quot;,    &quot;CAMN9999&quot;);  	// Usuario de auditoria responsable de los los cambios en BD
vars.put(&quot;ABO_CIC_CVE&quot;,    &quot;2&quot;);

//Valores tabla abonado
vars.put(&quot;PLN_CLAVE&quot;,    &quot;PLN_TEST90&quot;);  	// 
vars.put(&quot;ABO_GPO_T&quot;,    &quot;RES&quot;);  	// 

// Valores tabla modulos_tarifa_alt
vars.put(&quot;ID_MOD_ALT&quot;,    &quot;-1&quot;);  	// 
vars.put(&quot;DESCRIPCION_MOD&quot;,    &quot;Modulo tarifa test X&quot;);  // 

// Valores tabla detalle_modulo_tarifa
vars.put(&quot;TLL_CLAVE_A&quot;,    &quot;4&quot;);  	// Tipo de llamada:   4 -&gt; MAXCOM - LD NACIONAL
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_A&quot;,    &quot;0&quot;);  // Grupo de llamada de tipo umbral
vars.put(&quot;PRECIO_ALTERNO_A&quot;,    &quot;70&quot;); 	//
vars.put(&quot;CONSUMO_A&quot;,    &quot;130&quot;); 	//
vars.put(&quot;TIPO_COBRO_A&quot;,    &quot;3&quot;); 	// Tipo de cobro  0-&gt;Por minuto (C), 0 and precio_alterno&gt;0 -&gt; por tarifa (T), 1 -&gt; por evento (C) , 2-&gt; minuto/tarifa (P), 3-&gt; evento/tarifa (P)
vars.put(&quot;GRUPO_CIUDAD_A&quot;,    &quot;0&quot;);	// 
vars.put(&quot;GRUPO_PAIS_A&quot;,    &quot;0&quot;);	// 

//valores tabla servicio
vars.put(&quot;DESCRIPCION&quot;,    &quot;Servicio prueba tarifa X&quot;);  // 
vars.put(&quot;SER_CST&quot;,    &quot;88.79&quot;);  	// 
vars.put(&quot;SER_PER_VIDA&quot;,    &quot;99999&quot;);  	// 
vars.put(&quot;TIPO_SERVICIO&quot;,    &quot;TAR&quot;);  	// 
vars.put(&quot;SW_NIVEL&quot;,    &quot;1&quot;);  		// 1 - Nivel de cuenta; 2- Nivel de abonado

// Valores csto_abo_consumo
vars.put(&quot;POR_CUENTA_B&quot;,  &quot;1&quot;);                     	//1 = A nivel de cuenta, 0 = a nivel de abonado
vars.put(&quot;ABO_MDN_ALL_B&quot;,    &quot;ALL&quot;);                  	// Si el umbral es a nivel de cuenta se guarda &quot;ALL&quot; en csto_abo_consumo
vars.put(&quot;TLL_CLAVE_B&quot;,    &quot;4&quot;);                         	// Tipo de llamada:   5 -&gt; MAXCOM - CELULAR LD (045)
vars.put(&quot;GRUPO_CIUDAD_B&quot;,  &quot;0&quot;);                    	// Grupo de la ciudad al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;GRUPO_PAIS_B&quot;,  &quot;0&quot;);                           	//Grupo de la pais al cual afectara el umbral, si tiene 0 afectar치 independientemente del grupo
vars.put(&quot;LLAM_REG_B&quot;,  &quot;0&quot;);                                	//
vars.put(&quot;TIPO_COBRO_B&quot;,  &quot;1&quot;);	//
vars.put(&quot;TIPO_REG_B&quot;,  &quot;P&quot;);                                	//C = Consumo, T = Tarificacion, P
vars.put(&quot;PRECIO_ALT_B&quot;,  &quot;70&quot;);                         	//Precio de venta alterno
vars.put(&quot;UMBRAL_B&quot;,  &quot;0&quot;);                                 	//
vars.put(&quot;UMBRAL_EVENTO_B&quot;,  &quot;130&quot;);               //
vars.put(&quot;CONSUMO_ANT_B&quot;,  &quot;0&quot;);                      	//
vars.put(&quot;CONSUMO_EVENTO_ANT_B&quot;,  &quot;0&quot;);    	//
vars.put(&quot;ESTATUS_B&quot;,  &quot;1&quot;);                                   	//1 = activo, 0 = no activo
vars.put(&quot;UMBRAL_LC_B&quot;,  &quot;0&quot;);                              	//
vars.put(&quot;GRUPO_TLL_CLAVE_UMBRAL_B&quot;,  &quot;0&quot;);	//

// Aserciones
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_A&quot;,  &quot;&quot;);
vars.put(&quot;ESTATUS_QRY_B&quot;,  &quot;&quot;);
</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - modulos_tarifa_alt" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM modulos_tarifa_alt 
 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - detalle_modulo_tarifa" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM detalle_modulo_tarifa 
 WHERE ID_MOD_ALT IN ( SELECT  ID_MOD_ALT  
                                                    FROM modulos_tarifa_alt 
                                                 WHERE DESCRIPCION_MOD = &apos;${DESCRIPCION_MOD}&apos; );
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Depurando informaci칩n

DELETE 
    FROM servicio 
 WHERE SER_CLAVE = ${SER_CLAVE};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion el abonado del cliente - abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM abonado 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Borrando registros en caso de que existan

DELETE 
    FROM csto_abo_consumo 
 WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en abonado - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO abonado (`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`CLI_TPCLI`,`CDO_CSMO`,
                     `CDO_PAGO`,`CIU_CLAVE`,`SUC_CLAVE`,`CIC_CLAVE`,`VEN_CLAVE`,
                     `ABO_GPO_T`,`ABO_ECIVIL_T`,`ABO_EDOA_T`,`ABO_FEC_EDOA`,`ABO_CAUSA_T`,
                     `NOMBRE`,`APE_PATERNO`,`APE_MATERNO`,`CALLE`,`COLONIA`,
                     `NUMERO_INT`,`NUMERO_EXT`,`CODIGO_POS`,`ABO_EDO_T`,`PAIS`,
                     `ABO_CEL_PART`,`ABO_TEL_PART`,`ABO_EXT`,`ABO_MOD_TEL`,`ABO_EQP_ESN`,
                     `ABO_FEC_ACTV`,`PLN_CLAVE`,`ABO_OI_SW`,`ABO_CMB_OI`,`ABO_EQP_PROP`,
                     `USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,`SWI_CLAVE`) 
   VALUES (&apos;${ABO_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,&apos;MOR&apos;,&apos;p&apos;,
                     0,&apos;000002&apos;,&apos;001&apos;,${ABO_CIC_CVE},&apos;RES&apos;,
                     &apos;${ABO_GPO_T}&apos;,&apos;EMPRESA&apos;,&apos;A&apos;,now(),&apos;B1&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;&apos;,
                     &apos;0&apos;,&apos;0&apos;,0,&apos;0&apos;,&apos;0&apos;,
                     now(),&apos;${PLN_CLAVE}&apos;,0,0,0,
                     &apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,now(),now(),0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO  modulos_tarifa_alt  (DESCRIPCION_MOD, USU_MOD, USU_REG, FEC_MOD, FEC_REG, STATUS) 
VALUES                                      (&apos;${DESCRIPCION_MOD}&apos;, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), now(), 1);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Consultando el id del umbral creado umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultando el valor del ultimo id de auto increment insertado

SELECT LAST_INSERT_ID();</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ID_MOD_ALT</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en modulos_tarifa_alt - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT INTO detalle_modulo_tarifa
            (ID_MOD_ALT, TLL_CLAVE, GRUPO_TLL_CLAVE_UMBRAL, PRECIO_ALTERNO, CONSUMO, 
             TIPO_COBRO, GRUPO_CIUDAD, USU_MOD, USU_REG, FEC_MOD, 
             FEC_REG, GRUPO_PAIS) 
     VALUES (${ID_MOD_ALT_1}, ${TLL_CLAVE_A}, ${GRUPO_TLL_CLAVE_UMBRAL_A}, ${PRECIO_ALTERNO_A}, ${CONSUMO_A}, 
             ${TIPO_COBRO_A}, ${GRUPO_CIUDAD_A}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;, now(), 
             now(), ${GRUPO_PAIS_A});</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,
                     `SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,`SER_ASOCIADO`,`SER_COMERC`,
                     `SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,
                     `TIPO_SERVICIO`,`DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,
                     `FECHA_DESACTIVACION`,`ID_MOD_ALT`,`SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,
                     `MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,
                     `FEC_REG`,`FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,
                     `SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`) 
             values (${SER_CLAVE},&apos;${DESCRIPCION}&apos;,0,${SER_CST},0,
                     0,0,${SER_PER_VIDA},null,0,
                     0,null,&apos;&apos;,0,1,
                     &apos;${TIPO_SERVICIO}&apos;,0.00,0.00,now(),now(),
                     now(),${ID_MOD_ALT_1},0,&apos;RES&apos;,null,
                     &apos;MX&apos;,&apos;0&apos;,&apos;0&apos;,&apos;${USU_REG}&apos;,&apos;${USU_REG}&apos;,
                     now(),now(),&apos;VOZ&apos;,0,1,
                     ${SW_NIVEL},1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">-- Creando registro para la prueba

INSERT 
     INTO csto_abo_consumo
                (ABO_CLIENTE, ABO_MDN, ABO_GPO_T, ABO_CIC_CVE, TLL_CLAVE, 
                GRUPO_CIUDAD, GRUPO_PAIS, LIM_CONSUMO, CONSUMO, CONSUMO_LC, 
                LIM_CONSUMO_EVENTO, CONSUMO_EVENTO, CONSUMO_EVENTO_LC, LLAM_REG, TIPO_COBRO, 
                TIPO_REG, SER_CLAVE, PRECIO_ALT, USU_MOD, USU_REG, 
                FEC_MOD, FEC_REG, CONSUMO_ANT, CONSUMO_EVENTO_ANT,ESTATUS,
                UMBRAL_LC, GRUPO_TLL_CLAVE_UMBRAL) 
VALUES (&apos;${ABO_CLIENTE}&apos;, IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;), &apos;${ABO_GPO_T}&apos;, ${ABO_CIC_CVE}, ${TLL_CLAVE_B},
                  ${GRUPO_CIUDAD_B}, ${GRUPO_PAIS_B}, ${UMBRAL_B}, ${UMBRAL_B}, ${UMBRAL_B}, 
                  ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${UMBRAL_EVENTO_B}, ${LLAM_REG_B},${TIPO_COBRO_B},
                  &apos;${TIPO_REG_B}&apos;, &apos;&apos;, ${PRECIO_ALT_B}, &apos;${USU_REG}&apos;, &apos;${USU_REG}&apos;,
                  now(), now(), ${CONSUMO_ANT_B}, ${CONSUMO_EVENTO_ANT_B}, ${ESTATUS_B},   
                  ${UMBRAL_LC_B},${GRUPO_TLL_CLAVE_UMBRAL_B});

</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Consultando los datos de la tabla csto_abo_consumo para validar que se registro el umbral correspondiente." enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">-- Consultanto el umbral despues de ejecutar el stored procedure

SELECT count(*)
FROM csto_abo_consumo 
WHERE ABO_CLIENTE = &apos;${ABO_CLIENTE}&apos; 
   AND ABO_MDN = IF( (${POR_CUENTA_B}=0) ,&apos;${ABO_MDN}&apos;,&apos;${ABO_MDN_ALL_B}&apos;) 
   AND ABO_GPO_T = &apos;${ABO_GPO_T}&apos;
   AND ABO_CIC_CVE = ${ABO_CIC_CVE}
   AND TLL_CLAVE = ${TLL_CLAVE_B}
   AND LIM_CONSUMO = ${UMBRAL_B}     
   AND CONSUMO = ${UMBRAL_B}
   AND CONSUMO_LC = ${UMBRAL_B}
   AND LIM_CONSUMO_EVENTO = ( ${UMBRAL_EVENTO_B} - ${CONSUMO_A} )   -- Se resta el consumo
   AND CONSUMO_EVENTO = &apos;${UMBRAL_EVENTO_B}&apos;
   AND CONSUMO_EVENTO_LC = &apos;${UMBRAL_EVENTO_B}&apos;
   AND TIPO_COBRO = &apos;${TIPO_COBRO_B}&apos;
--   AND UMBRAL_LC = &apos;${UMBRAL_LC_B}&apos;
   AND LLAM_REG = ${LLAM_REG_B}
   AND PRECIO_ALT = ${PRECIO_ALT_B}
   AND TIPO_REG = &apos;${TIPO_REG_B}&apos;
   AND GRUPO_TLL_CLAVE_UMBRAL = ${GRUPO_TLL_CLAVE_UMBRAL_B}
   AND ESTATUS = IF(  (   ( ${UMBRAL_EVENTO_B} - ${CONSUMO_A} )&lt;=0)  , 0 , 1 ) ;  -- Si la diferencia del consumo actual menos el configurado es negativo se desactiva.</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Primera" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="SP -&gt; sp_Update_in_CstoAboCon_from_Abonado_COM" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="91. Se solicita la activaci칩n de un umbral(por medio de un servicio de umbral) en la tabla &quot;csto_abo_consumo&quot;, pero no hay umbrales configurados en la tabla &quot;umbral_tipo_llamada&quot; para el servicio enviado." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="query">
call MBS.sp_Update_in_CstoAboCon_from_Abonado_COM (?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${CLI_CLIENTE},${ABO_MDN},COM,1,${SER_CLAVE1},0</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,INTEGER,VARCHAR,OUT INTEGER</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">P_RETURN_CODE</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Establecer variables de la prueba" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">true</boolProp>
                <stringProp name="script">vars.put(&quot;CLI_CLIENTE&quot;, &quot;99000091&quot;);
vars.put(&quot;ABO_MDN&quot;,     &quot;5599000091&quot;);
vars.put(&quot;SER_CLAVE1&quot;,   &quot;20000091&quot;);
vars.put(&quot;FECHA_INICIO_FACTURACION&quot;,  &quot;&quot;);
vars.put(&quot;PLAN_CLAVE&quot;,  &quot;PLN_TEST91&quot;);
vars.put(&quot;TAR_CLAVE&quot;,  &quot;TAR0000091&quot;);
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;P_RETURN_CODE&quot;,  &quot;-1&quot;); // Inicializando valor</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
delete from csto_abo_consumo where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
delete from umbral_tipo_llamada 
where SER_CLAVE = ${SER_CLAVE1} and USU_REG = &apos;CAMN9999&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de los servicios del abonado - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
delete from servicio where SER_CLAVE = ${SER_CLAVE1};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando servicio de umbral en el catalogo de productos - servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,`SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,
                       `SER_ASOCIADO`,`SER_COMERC`,`SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,`TIPO_SERVICIO`,
                       `DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,`FECHA_DESACTIVACION`,`ID_MOD_ALT`,
                       `SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,`MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,`FEC_REG`,
                       `FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,`SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`,`TLL_CLAVE`,
                       `DESVOL_CLAVE`,`TIPO_TARIFA`)
              values (${SER_CLAVE1},&apos;Servicio Test umbral x&apos;,0,0,1,0,0,1,&apos;null&apos;,1,1,&apos;null&apos;,&apos;null&apos;,0,1,&apos;TAR&apos;,0,0,now(),
                      &apos;9999-01-01 00:00:00&apos;,&apos;9999-01-01 00:00:00&apos;,0,1,&apos;COM&apos;,&apos;null&apos;,&apos;MX&apos;,&apos;0&apos;,0,&apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),
                      now(),&apos;VOZ&apos;,0,1,2,1,0,0,0,null,1);
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Validando la tabla csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">
select count(*)
from csto_abo_consumo 
where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos; and SER_CLAVE = ${SER_CLAVE1} and ESTATUS = 1;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Verifiando el numero de registros en csto_abo_consumo con los filtros correspondientes" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Verificando el valor del parametro de salida del stored procedure." enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="48">0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">P_RETURN_CODE</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="92. Se solicita la activaci칩n de un umbral(por medio de un servicio de umbral) en la tabla &quot;csto_abo_consumo&quot;, el umbral configurado en la tabla &quot;umbral_tipo_llamada&quot; para el servicio enviado tiene las siguientes caracterisiticas: Es a nivel abonado y esta configurado por tipo de llamada(tll_clave&gt;0)." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="query">
call MBS.sp_Update_in_CstoAboCon_from_Abonado_COM (?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${CLI_CLIENTE},${ABO_MDN},COM,1,${SER_CLAVE1},0</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,INTEGER,VARCHAR,OUT INTEGER</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">P_RETURN_CODE</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Establecer variables de la prueba" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">true</boolProp>
                <stringProp name="script">vars.put(&quot;CLI_CLIENTE&quot;, &quot;99000092&quot;);
vars.put(&quot;ABO_MDN&quot;,     &quot;5599000092&quot;);
vars.put(&quot;SER_CLAVE1&quot;,   &quot;20000092&quot;);
vars.put(&quot;FECHA_INICIO_FACTURACION&quot;,  &quot;&quot;);
vars.put(&quot;PLAN_CLAVE&quot;,  &quot;PLN_TEST92&quot;);
vars.put(&quot;TAR_CLAVE&quot;,  &quot;TAR0000092&quot;);
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;P_RETURN_CODE&quot;,  &quot;-1&quot;); // Inicializando valor</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
delete from csto_abo_consumo where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
delete from umbral_tipo_llamada 
where SER_CLAVE = ${SER_CLAVE1} and USU_REG = &apos;CAMN9999&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de los servicios del abonado - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
delete from servicio where SER_CLAVE = ${SER_CLAVE1};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando servicio de umbral en el catalogo de productos - servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,`SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,
                       `SER_ASOCIADO`,`SER_COMERC`,`SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,`TIPO_SERVICIO`,
                       `DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,`FECHA_DESACTIVACION`,`ID_MOD_ALT`,
                       `SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,`MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,`FEC_REG`,
                       `FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,`SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`)
              values (${SER_CLAVE1},&apos;Servicio Test umbral x&apos;,0,0,1,0,0,1,&apos;null&apos;,1,1,&apos;null&apos;,&apos;null&apos;,0,1,&apos;TAR&apos;,0,0,&apos;2010-01-01 00:00:00&apos;,
                      &apos;9999-01-01 00:00:00&apos;,&apos;9999-01-01 00:00:00&apos;,0,1,&apos;COM&apos;,&apos;null&apos;,&apos;MX&apos;,&apos;0&apos;,0,&apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),
                      now(),&apos;VOZ&apos;,0,1,2,1,0,0);
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">insert into
`umbral_tipo_llamada`(`PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`,`UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,
        `POR_CUENTA`,`UMBRAL_LC`,`USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`SER_CLAVE`,GRUPO_TLL_CLAVE_UMBRAL)
values (&apos;&apos;,0,0,4,3000,0,0,0,0,0,&apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),now(),${SER_CLAVE1},0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Validando la tabla csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">
select count(*)
from csto_abo_consumo 
where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos; and 
            ABO_MDN = &apos;${ABO_MDN}&apos; and 
            SER_CLAVE = ${SER_CLAVE1} and ESTATUS = 1;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Verifiando el numero de registros en csto_abo_consumo con los filtros correspondientes" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="93. Se solicita la activaci칩n de un umbral(por medio de un servicio de umbral) en la tabla &quot;csto_abo_consumo&quot;, el umbral configurado en la tabla &quot;umbral_tipo_llamada&quot; para el servicio enviado tiene las siguientes caracterisiticas: Es a nivel de cuenta y esta configurado por tipo de llamada(tll_clave&gt;0)." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="query">
call MBS.sp_Update_in_CstoAboCon_from_Abonado_COM (?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${CLI_CLIENTE},${ABO_MDN},COM,1,${SER_CLAVE1},0</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,INTEGER,VARCHAR,OUT INTEGER</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">P_RETURN_CODE</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Establecer variables de la prueba" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">true</boolProp>
                <stringProp name="script">vars.put(&quot;CLI_CLIENTE&quot;, &quot;99000093&quot;);
vars.put(&quot;ABO_MDN&quot;,     &quot;5599000093&quot;);
vars.put(&quot;SER_CLAVE1&quot;,   &quot;20000093&quot;);
vars.put(&quot;FECHA_INICIO_FACTURACION&quot;,  &quot;&quot;);
vars.put(&quot;PLAN_CLAVE&quot;,  &quot;PLN_TEST93&quot;);
vars.put(&quot;TAR_CLAVE&quot;,  &quot;TAR0000093&quot;);
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;P_RETURN_CODE&quot;,  &quot;-1&quot;); // Inicializando valor</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
delete from csto_abo_consumo where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
delete from umbral_tipo_llamada 
where SER_CLAVE = ${SER_CLAVE1} and USU_REG = &apos;CAMN9999&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de los servicios del abonado - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
delete from servicio where SER_CLAVE = ${SER_CLAVE1};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando servicio de umbral en el catalogo de productos - servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,`SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,
                       `SER_ASOCIADO`,`SER_COMERC`,`SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,`TIPO_SERVICIO`,
                       `DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,`FECHA_DESACTIVACION`,`ID_MOD_ALT`,
                       `SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,`MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,`FEC_REG`,
                       `FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,`SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`)
              values (${SER_CLAVE1},&apos;Servicio Test umbral x&apos;,0,0,1,0,0,1,&apos;null&apos;,1,1,&apos;null&apos;,&apos;null&apos;,0,1,&apos;TAR&apos;,0,0,&apos;2010-01-01 00:00:00&apos;,
                      &apos;9999-01-01 00:00:00&apos;,&apos;9999-01-01 00:00:00&apos;,0,1,&apos;COM&apos;,&apos;null&apos;,&apos;MX&apos;,&apos;0&apos;,0,&apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),
                      now(),&apos;VOZ&apos;,0,1,2,1,0,0);
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">insert into
`umbral_tipo_llamada`(`PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`,`UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,
        `POR_CUENTA`,`UMBRAL_LC`,`USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`SER_CLAVE`,GRUPO_TLL_CLAVE_UMBRAL)
values (&apos;&apos;,0,0,4,3000,0,0,0,1,0,&apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),now(),${SER_CLAVE1},0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Validando la tabla csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">
select count(*)
from csto_abo_consumo 
where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos; and ABO_MDN = &apos;ALL&apos; and SER_CLAVE = ${SER_CLAVE1} and ESTATUS = 1;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Verifiando el numero de registros en csto_abo_consumo con los filtros correspondientes" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="94. Se solicita la activaci칩n de un umbral(por medio de un servicio de umbral) en la tabla &quot;csto_abo_consumo&quot;, el umbral configurado en la tabla &quot;umbral_tipo_llamada&quot; para el servicio enviado tiene las siguientes caracterisiticas: Esta configurada por dos tipos de llamada(tll_clave&gt;0), una a nivel de cuenta y otra a nivel de abonado esta configurado." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="query">
call MBS.sp_Update_in_CstoAboCon_from_Abonado_COM (?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${CLI_CLIENTE},${ABO_MDN},COM,1,${SER_CLAVE1},0</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,INTEGER,VARCHAR,OUT INTEGER</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">P_RETURN_CODE</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Establecer variables de la prueba" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">true</boolProp>
                <stringProp name="script">vars.put(&quot;CLI_CLIENTE&quot;, &quot;99000094&quot;);
vars.put(&quot;ABO_MDN&quot;,     &quot;5599000094&quot;);
vars.put(&quot;SER_CLAVE1&quot;,   &quot;20000094&quot;);
vars.put(&quot;FECHA_INICIO_FACTURACION&quot;,  &quot;&quot;);
vars.put(&quot;PLAN_CLAVE&quot;,  &quot;PLN_TEST94&quot;);
vars.put(&quot;TAR_CLAVE&quot;,  &quot;TAR0000094&quot;);
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;P_RETURN_CODE&quot;,  &quot;-1&quot;); // Inicializando valor</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
delete from csto_abo_consumo where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
delete from umbral_tipo_llamada 
where SER_CLAVE = ${SER_CLAVE1} and USU_REG = &apos;CAMN9999&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de los servicios del abonado - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
delete from servicio where SER_CLAVE = ${SER_CLAVE1};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando servicio de umbral en el catalogo de productos - servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,`SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,
                       `SER_ASOCIADO`,`SER_COMERC`,`SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,`TIPO_SERVICIO`,
                       `DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,`FECHA_DESACTIVACION`,`ID_MOD_ALT`,
                       `SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,`MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,`FEC_REG`,
                       `FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,`SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`)
              values (${SER_CLAVE1},&apos;Servicio Test umbral x&apos;,0,0,1,0,0,1,&apos;null&apos;,1,1,&apos;null&apos;,&apos;null&apos;,0,1,&apos;TAR&apos;,0,0,&apos;2010-01-01 00:00:00&apos;,
                      &apos;9999-01-01 00:00:00&apos;,&apos;9999-01-01 00:00:00&apos;,0,1,&apos;COM&apos;,&apos;null&apos;,&apos;MX&apos;,&apos;0&apos;,0,&apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),
                      now(),&apos;VOZ&apos;,0,1,2,1,0,0);
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">insert into `umbral_tipo_llamada`(`PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`,
                                                               `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
                                                               `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`SER_CLAVE`,
                                                                GRUPO_TLL_CLAVE_UMBRAL)
                                                values (&apos;&apos;,0,0,4,3000,
                                                              0,0,0,0,0,
                                                              &apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),now(),${SER_CLAVE1},
                                                              0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Segundo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
insert into `umbral_tipo_llamada`(`PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`,
                                                               `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
                                                               `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`SER_CLAVE`,
                                                                GRUPO_TLL_CLAVE_UMBRAL)
                                                values (&apos;&apos;,0,0,89,4000,
                                                              0,0,0,1,0,
                                                              &apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),now(),${SER_CLAVE1},
                                                              0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Validando la tabla csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">
select 
(
select count(*)
from csto_abo_consumo 
where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos; and ABO_MDN = &apos;ALL&apos; and SER_CLAVE = ${SER_CLAVE1} 
    and ESTATUS = 1  and TLL_CLAVE = 89
)
+
(
select count(*)
from csto_abo_consumo 
where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos; and ABO_MDN = &apos;${ABO_MDN}&apos;  and SER_CLAVE = ${SER_CLAVE1} 
    and ESTATUS = 1 and TLL_CLAVE = 4
);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Verifiando el numero de registros en csto_abo_consumo con los filtros correspondientes" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="50">2</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="95. Se solicita la activaci칩n de un umbral(por medio de un servicio de umbral) en la tabla &quot;csto_abo_consumo&quot;, el umbral configurado en la tabla &quot;umbral_tipo_llamada&quot; para el servicio enviado tiene las siguientes caracterisiticas: Es a nivel abonado y esta configurado por grupo de tipo de llamada umbral(GRUPO_TLL_CLAVE_UMBRAL&gt;0)." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="query">
call MBS.sp_Update_in_CstoAboCon_from_Abonado_COM (?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${CLI_CLIENTE},${ABO_MDN},COM,1,${SER_CLAVE1},0</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,INTEGER,VARCHAR,OUT INTEGER</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">P_RETURN_CODE</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Establecer variables de la prueba" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">true</boolProp>
                <stringProp name="script">vars.put(&quot;CLI_CLIENTE&quot;, &quot;99000095&quot;);
vars.put(&quot;ABO_MDN&quot;,     &quot;5599000095&quot;);
vars.put(&quot;SER_CLAVE1&quot;,   &quot;20000095&quot;);
vars.put(&quot;FECHA_INICIO_FACTURACION&quot;,  &quot;&quot;);
vars.put(&quot;PLAN_CLAVE&quot;,  &quot;PLN_TEST95&quot;);
vars.put(&quot;TAR_CLAVE&quot;,  &quot;TAR0000095&quot;);
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;P_RETURN_CODE&quot;,  &quot;-1&quot;); // Inicializando valor</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
delete from csto_abo_consumo where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
delete from umbral_tipo_llamada 
where SER_CLAVE = ${SER_CLAVE1} and USU_REG = &apos;CAMN9999&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de los servicios del abonado - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
delete from servicio where SER_CLAVE = ${SER_CLAVE1};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando servicio de umbral en el catalogo de productos - servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,`SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,
                       `SER_ASOCIADO`,`SER_COMERC`,`SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,`TIPO_SERVICIO`,
                       `DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,`FECHA_DESACTIVACION`,`ID_MOD_ALT`,
                       `SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,`MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,`FEC_REG`,
                       `FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,`SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`)
              values (${SER_CLAVE1},&apos;Servicio Test umbral x&apos;,0,0,1,0,0,1,&apos;null&apos;,1,1,&apos;null&apos;,&apos;null&apos;,0,1,&apos;TAR&apos;,0,0,&apos;2010-01-01 00:00:00&apos;,
                      &apos;9999-01-01 00:00:00&apos;,&apos;9999-01-01 00:00:00&apos;,0,1,&apos;COM&apos;,&apos;null&apos;,&apos;MX&apos;,&apos;0&apos;,0,&apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),
                      now(),&apos;VOZ&apos;,0,1,2,1,0,0);
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">insert into
`umbral_tipo_llamada`(`PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`,`UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,
        `POR_CUENTA`,`UMBRAL_LC`,`USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`SER_CLAVE`,GRUPO_TLL_CLAVE_UMBRAL)
values (&apos;&apos;,0,0,0,3000,0,0,0,0,0,&apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),now(),${SER_CLAVE1},5);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Validando la tabla csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">
select count(*)
from csto_abo_consumo 
where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos; and 
            ABO_MDN = &apos;${ABO_MDN}&apos; and 
            SER_CLAVE = ${SER_CLAVE1} and ESTATUS = 1;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Verifiando el numero de registros en csto_abo_consumo con los filtros correspondientes" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="96. Se solicita la activaci칩n de un umbral(por medio de un servicio de umbral) en la tabla &quot;csto_abo_consumo&quot;, el umbral configurado en la tabla &quot;umbral_tipo_llamada&quot; para el servicio enviado tiene las siguientes caracterisiticas: Es a nivel de cuenta y esta configurado por grupo de tipo de llamada umbral(GRUPO_TLL_CLAVE_UMBRAL&gt;0)." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="query">
call MBS.sp_Update_in_CstoAboCon_from_Abonado_COM (?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${CLI_CLIENTE},${ABO_MDN},COM,1,${SER_CLAVE1},0</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,INTEGER,VARCHAR,OUT INTEGER</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">P_RETURN_CODE</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Establecer variables de la prueba" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">true</boolProp>
                <stringProp name="script">vars.put(&quot;CLI_CLIENTE&quot;, &quot;99000096&quot;);
vars.put(&quot;ABO_MDN&quot;,     &quot;5599000096&quot;);
vars.put(&quot;SER_CLAVE1&quot;,   &quot;20000096&quot;);
vars.put(&quot;FECHA_INICIO_FACTURACION&quot;,  &quot;&quot;);
vars.put(&quot;PLAN_CLAVE&quot;,  &quot;PLN_TEST96&quot;);
vars.put(&quot;TAR_CLAVE&quot;,  &quot;TAR0000096&quot;);
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;P_RETURN_CODE&quot;,  &quot;-1&quot;); // Inicializando valor</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
delete from csto_abo_consumo where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
delete from umbral_tipo_llamada 
where SER_CLAVE = ${SER_CLAVE1} and USU_REG = &apos;CAMN9999&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de los servicios del abonado - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
delete from servicio where SER_CLAVE = ${SER_CLAVE1};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando servicio de umbral en el catalogo de productos - servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,`SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,
                       `SER_ASOCIADO`,`SER_COMERC`,`SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,`TIPO_SERVICIO`,
                       `DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,`FECHA_DESACTIVACION`,`ID_MOD_ALT`,
                       `SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,`MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,`FEC_REG`,
                       `FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,`SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`)
              values (${SER_CLAVE1},&apos;Servicio Test umbral x&apos;,0,0,1,0,0,1,&apos;null&apos;,1,1,&apos;null&apos;,&apos;null&apos;,0,1,&apos;TAR&apos;,0,0,&apos;2010-01-01 00:00:00&apos;,
                      &apos;9999-01-01 00:00:00&apos;,&apos;9999-01-01 00:00:00&apos;,0,1,&apos;COM&apos;,&apos;null&apos;,&apos;MX&apos;,&apos;0&apos;,0,&apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),
                      now(),&apos;VOZ&apos;,0,1,2,1,0,0);
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">insert into
`umbral_tipo_llamada`(`PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`,`UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,
        `POR_CUENTA`,`UMBRAL_LC`,`USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`SER_CLAVE`,GRUPO_TLL_CLAVE_UMBRAL)
values (&apos;&apos;,0,0,0,3000,0,0,0,1,0,&apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),now(),${SER_CLAVE1},5);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Validando la tabla csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">
select count(*)
from csto_abo_consumo 
where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos; and ABO_MDN = &apos;ALL&apos; and SER_CLAVE = ${SER_CLAVE1} and ESTATUS = 1;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Verifiando el numero de registros en csto_abo_consumo con los filtros correspondientes" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49">1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="97. Se solicita la activaci칩n de un umbral(por medio de un servicio de umbral) en la tabla &quot;csto_abo_consumo&quot;, el umbral configurado en la tabla &quot;umbral_tipo_llamada&quot; para el servicio enviado tiene las siguientes caracterisiticas: Esta configurada por dos grupos de tipo de llamada umbral(GRUPO_TLL_CLAVE_UMBRAL&gt;0), una a nivel de cuenta (POR_CUENTA=1) y otra a nivel de abonado (POR_CUENTA=0)." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="query">
call MBS.sp_Update_in_CstoAboCon_from_Abonado_COM (?,?,?,?,?,?);</stringProp>
              <stringProp name="queryArguments">${CLI_CLIENTE},${ABO_MDN},COM,1,${SER_CLAVE1},0</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,INTEGER,VARCHAR,OUT INTEGER</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">P_RETURN_CODE</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Establecer variables de la prueba" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">true</boolProp>
                <stringProp name="script">vars.put(&quot;CLI_CLIENTE&quot;, &quot;99000097&quot;);
vars.put(&quot;ABO_MDN&quot;,     &quot;5599000097&quot;);
vars.put(&quot;SER_CLAVE1&quot;,   &quot;20000097&quot;);
vars.put(&quot;FECHA_INICIO_FACTURACION&quot;,  &quot;&quot;);
vars.put(&quot;PLAN_CLAVE&quot;,  &quot;PLN_TEST97&quot;);
vars.put(&quot;TAR_CLAVE&quot;,  &quot;TAR0000097&quot;);
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;P_RETURN_CODE&quot;,  &quot;-1&quot;); // Inicializando valor</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
delete from csto_abo_consumo where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
delete from umbral_tipo_llamada 
where SER_CLAVE = ${SER_CLAVE1} and USU_REG = &apos;CAMN9999&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de los servicios del abonado - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
delete from servicio where SER_CLAVE = ${SER_CLAVE1};</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando servicio de umbral en el catalogo de productos - servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,`SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,
                       `SER_ASOCIADO`,`SER_COMERC`,`SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,`TIPO_SERVICIO`,
                       `DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,`FECHA_DESACTIVACION`,`ID_MOD_ALT`,
                       `SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,`MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,`FEC_REG`,
                       `FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,`SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`)
              values (${SER_CLAVE1},&apos;Servicio Test umbral x&apos;,0,0,1,0,0,1,&apos;null&apos;,1,1,&apos;null&apos;,&apos;null&apos;,0,1,&apos;TAR&apos;,0,0,&apos;2010-01-01 00:00:00&apos;,
                      &apos;9999-01-01 00:00:00&apos;,&apos;9999-01-01 00:00:00&apos;,0,1,&apos;COM&apos;,&apos;null&apos;,&apos;MX&apos;,&apos;0&apos;,0,&apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),
                      now(),&apos;VOZ&apos;,0,1,2,1,0,0);
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">insert into `umbral_tipo_llamada`(`PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`,
                                                               `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
                                                               `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`SER_CLAVE`,
                                                                GRUPO_TLL_CLAVE_UMBRAL)
                                                values (&apos;&apos;,0,0,0,3000,
                                                              0,0,0,0,0,
                                                              &apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),now(),${SER_CLAVE1},
                                                              4);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Segundo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
insert into `umbral_tipo_llamada`(`PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`,
                                                               `UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,`POR_CUENTA`,`UMBRAL_LC`,
                                                               `USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`SER_CLAVE`,
                                                                GRUPO_TLL_CLAVE_UMBRAL)
                                                values (&apos;&apos;,0,0,0,4000,
                                                              0,0,0,1,0,
                                                              &apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),now(),${SER_CLAVE1},
                                                              5);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Validando la tabla csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">
select 
(
select count(*)
from csto_abo_consumo 
where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos; and ABO_MDN = &apos;ALL&apos; and SER_CLAVE = ${SER_CLAVE1} 
    and ESTATUS = 1  and TLL_CLAVE = 0 and GRUPO_TLL_CLAVE_UMBRAL = 5
)
+
(
select count(*)
from csto_abo_consumo 
where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos; and ABO_MDN = &apos;${ABO_MDN}&apos;  and SER_CLAVE = ${SER_CLAVE1} 
    and ESTATUS = 1 and TLL_CLAVE = 0 and GRUPO_TLL_CLAVE_UMBRAL = 4
);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">NUM_REG</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Verifiando el numero de registros en csto_abo_consumo con los filtros correspondientes" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="50">2</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">NUM_REG_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="SP -&gt; sp_CancelaInCsto_Abo_Consumo_From_Abonado_COM" enabled="true">
            <stringProp name="TestPlan.comments">Se simula la ejecuci칩n del procedimiento de BD que es ejecutado cuando el estatus del abonado cambia de activo a desactivo.</stringProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="98. Se solicita la desactivaci칩n de un umbral(por medio de un servicio de umbral) en la tabla &quot;csto_abo_consumo&quot;, el umbral configurado en la tabla &quot;umbral_tipo_llamada&quot; para el servicio enviado tiene las siguientes caracterisiticas: Es a nivel abonado (POR_CUENTA=0) y esta configurado por tipo de llamada(tll_clave&gt;0)." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="query">
call sp_CancelaInCsto_Abo_Consumo_From_Abonado_COM(?,?,?,?);    
</stringProp>
              <stringProp name="queryArguments">${CLI_CLIENTE},${ABO_MDN},${SER_CLAVE1},0</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,OUT INTEGER</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">P_RETURN_CODE</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Establecer variables de la prueba" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">true</boolProp>
                <stringProp name="script">vars.put(&quot;CLI_CLIENTE&quot;, &quot;99000098&quot;);
vars.put(&quot;ABO_MDN&quot;,     &quot;5599000098&quot;);
vars.put(&quot;SER_CLAVE1&quot;,   &quot;20000098&quot;);
vars.put(&quot;FECHA_INICIO_FACTURACION&quot;,  &quot;&quot;);
vars.put(&quot;PLAN_CLAVE&quot;,  &quot;PLN_TEST98&quot;);
vars.put(&quot;TAR_CLAVE&quot;,  &quot;TAR0000098&quot;);
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;P_RETURN_CODE&quot;,  &quot;-1&quot;); // Inicializando valor</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
delete from csto_abo_consumo where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
delete from umbral_tipo_llamada 
where SER_CLAVE = ${SER_CLAVE1} and USU_REG = &apos;CAMN9999&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de los servicios de umbral - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
delete from servicio where SER_CLAVE = ${SER_CLAVE1};
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando servicio de umbral en el catalogo de productos - servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,`SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,
                       `SER_ASOCIADO`,`SER_COMERC`,`SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,`TIPO_SERVICIO`,
                       `DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,`FECHA_DESACTIVACION`,`ID_MOD_ALT`,
                       `SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,`MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,`FEC_REG`,
                       `FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,`SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`)
              values (${SER_CLAVE1},&apos;Servicio Test umbral x&apos;,0,0,1,0,0,1,&apos;null&apos;,1,1,&apos;null&apos;,&apos;null&apos;,0,1,&apos;TAR&apos;,0,0,&apos;2010-01-01 00:00:00&apos;,
                      &apos;9999-01-01 00:00:00&apos;,&apos;9999-01-01 00:00:00&apos;,0,1,&apos;COM&apos;,&apos;null&apos;,&apos;MX&apos;,&apos;0&apos;,0,&apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),
                      now(),&apos;VOZ&apos;,0,1,2,1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">insert into
`umbral_tipo_llamada`(`PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`,`UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,
        `POR_CUENTA`,`UMBRAL_LC`,`USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`SER_CLAVE`,GRUPO_TLL_CLAVE_UMBRAL)
values (&apos;&apos;,0,0,4,3000,0,0,0,0,0,&apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),now(),${SER_CLAVE1},0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando servicios en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">INSERT INTO`csto_abo_consumo`(`ABO_CLIENTE`,
                              `ABO_MDN`,
                              `ABO_GPO_T`,
                              `ABO_CIC_CVE`,
                              `TLL_CLAVE`,
                              `GRUPO_CIUDAD`,
                              `GRUPO_PAIS`,
                              `LIM_CONSUMO`,
                              `CONSUMO`,
                              `CONSUMO_LC`,
                              `LIM_CONSUMO_EVENTO`,
                              `CONSUMO_EVENTO`,
                              `CONSUMO_EVENTO_LC`,
                              `LLAM_REG`,
                              `TIPO_COBRO`,
                              `TIPO_REG`,
                              `SER_CLAVE`,
                              `PRECIO_ALT`,
                              `USU_MOD`,
                              `USU_REG`,
                              `FEC_MOD`,
                              `FEC_REG`,
                              `CONSUMO_ANT`,
                              `CONSUMO_EVENTO_ANT`,
                              `ESTATUS`,
                              `UMBRAL_LC`,
	 GRUPO_TLL_CLAVE_UMBRAL)
    VALUES (&apos;${CLI_CLIENTE}&apos;,
            &apos;${ABO_MDN}&apos;,
            &apos;COM&apos;,
            1,
            4,
            0,
            0,
            3000,
            3000,
            3000,
            0,
            0,
            0,
            0,
            0,
            &apos;C&apos;,
            &apos;${SER_CLAVE1}&apos;,
            0,
            &apos;CAMN9999&apos;,
            &apos;CAMN9999&apos;,
            now(),
            now(),
            0,
            0,
            1,
            0,
            0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Validando la tabla csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">
select SER_CLAVE
from csto_abo_consumo 
where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos; and ABO_MDN = &apos;${ABO_MDN}&apos; and SER_CLAVE = ${SER_CLAVE1} and ESTATUS = 0;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">SER_CLAVE1</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Verifiando informaci칩n en csto_abo_consumo con los filtros correspondientes" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1025380323">${SER_CLAVE1}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">SER_CLAVE1_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="99. Se solicita la desactivaci칩n de un umbral(por medio de un servicio de umbral) en la tabla &quot;csto_abo_consumo&quot;, el umbral configurado en la tabla &quot;umbral_tipo_llamada&quot; para el servicio enviado tiene las siguientes caracterisiticas: Es a nivel cuenta (POR_CUENTA=1)  y esta configurado por tipo de llamada(tll_clave&gt;0)." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="query">
call sp_CancelaInCsto_Abo_Consumo_From_Abonado_COM(?,?,?,?);    
</stringProp>
              <stringProp name="queryArguments">${CLI_CLIENTE},${ABO_MDN},${SER_CLAVE1},0</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,OUT INTEGER</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">P_RETURN_CODE</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Establecer variables de la prueba" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">true</boolProp>
                <stringProp name="script">vars.put(&quot;CLI_CLIENTE&quot;, &quot;99000099&quot;);
vars.put(&quot;ABO_MDN&quot;,     &quot;5599000099&quot;);
vars.put(&quot;SER_CLAVE1&quot;,   &quot;20000099&quot;);
vars.put(&quot;FECHA_INICIO_FACTURACION&quot;,  &quot;&quot;);
vars.put(&quot;PLAN_CLAVE&quot;,  &quot;PLN_TEST99&quot;);
vars.put(&quot;TAR_CLAVE&quot;,  &quot;TAR0000099&quot;);
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;P_RETURN_CODE&quot;,  &quot;-1&quot;); // Inicializando valor</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
delete from csto_abo_consumo where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
delete from umbral_tipo_llamada 
where SER_CLAVE = ${SER_CLAVE1} and USU_REG = &apos;CAMN9999&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de los servicios de umbral - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
delete from servicio where SER_CLAVE = ${SER_CLAVE1};
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando servicio de umbral en el catalogo de productos - servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,`SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,
                       `SER_ASOCIADO`,`SER_COMERC`,`SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,`TIPO_SERVICIO`,
                       `DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,`FECHA_DESACTIVACION`,`ID_MOD_ALT`,
                       `SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,`MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,`FEC_REG`,
                       `FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,`SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`)
              values (${SER_CLAVE1},&apos;Servicio Test umbral x&apos;,0,0,1,0,0,1,&apos;null&apos;,1,1,&apos;null&apos;,&apos;null&apos;,0,1,&apos;TAR&apos;,0,0,&apos;2010-01-01 00:00:00&apos;,
                      &apos;9999-01-01 00:00:00&apos;,&apos;9999-01-01 00:00:00&apos;,0,1,&apos;COM&apos;,&apos;null&apos;,&apos;MX&apos;,&apos;0&apos;,0,&apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),
                      now(),&apos;VOZ&apos;,0,1,2,1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">insert into
`umbral_tipo_llamada`(`PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`,`UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,
        `POR_CUENTA`,`UMBRAL_LC`,`USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`SER_CLAVE`,GRUPO_TLL_CLAVE_UMBRAL)
values (&apos;&apos;,0,0,4,3000,0,0,0,1,0,&apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),now(),${SER_CLAVE1},0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando servicios en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">INSERT INTO`csto_abo_consumo`(`ABO_CLIENTE`,
                              `ABO_MDN`,
                              `ABO_GPO_T`,
                              `ABO_CIC_CVE`,
                              `TLL_CLAVE`,
                              `GRUPO_CIUDAD`,
                              `GRUPO_PAIS`,
                              `LIM_CONSUMO`,
                              `CONSUMO`,
                              `CONSUMO_LC`,
                              `LIM_CONSUMO_EVENTO`,
                              `CONSUMO_EVENTO`,
                              `CONSUMO_EVENTO_LC`,
                              `LLAM_REG`,
                              `TIPO_COBRO`,
                              `TIPO_REG`,
                              `SER_CLAVE`,
                              `PRECIO_ALT`,
                              `USU_MOD`,
                              `USU_REG`,
                              `FEC_MOD`,
                              `FEC_REG`,
                              `CONSUMO_ANT`,
                              `CONSUMO_EVENTO_ANT`,
                              `ESTATUS`,
                              `UMBRAL_LC`,
                               GRUPO_TLL_CLAVE_UMBRAL)
    VALUES (&apos;${CLI_CLIENTE}&apos;,
            &apos;ALL&apos;,
            &apos;COM&apos;,
            1,
            4,
            0,
            0,
            3000,
            3000,
            3000,
            0,
            0,
            0,
            0,
            0,
            &apos;C&apos;,
            &apos;${SER_CLAVE1}&apos;,
            0,
            &apos;CAMN9999&apos;,
            &apos;CAMN9999&apos;,
            now(),
            now(),
            0,
            0,
            1,
            0,
            0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Validando la tabla csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">
select SER_CLAVE
from csto_abo_consumo 
where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos; and ABO_MDN = &apos;ALL&apos; and SER_CLAVE = ${SER_CLAVE1} and ESTATUS = 0;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">SER_CLAVE1</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Verifiando informaci칩n en csto_abo_consumo con los filtros correspondientes" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1025380323">${SER_CLAVE1}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">SER_CLAVE1_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="100. Se solicita la desactivaci칩n de un umbral(por medio de un servicio de umbral) en la tabla &quot;csto_abo_consumo&quot;, el umbral configurado en la tabla &quot;umbral_tipo_llamada&quot; para el servicio enviado tiene las siguientes caracterisiticas: Es a nivel abonado (POR_CUENTA=0) y esta configurado por grupo de tipo de llamada umbral(GRUPO_TLL_CLAVE_UMBRAL&gt;0)." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="query">
call sp_CancelaInCsto_Abo_Consumo_From_Abonado_COM(?,?,?,?);    
</stringProp>
              <stringProp name="queryArguments">${CLI_CLIENTE},${ABO_MDN},${SER_CLAVE1},0</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,OUT INTEGER</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">P_RETURN_CODE</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Establecer variables de la prueba" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">true</boolProp>
                <stringProp name="script">vars.put(&quot;CLI_CLIENTE&quot;, &quot;99000100&quot;);
vars.put(&quot;ABO_MDN&quot;,     &quot;5599000100&quot;);
vars.put(&quot;SER_CLAVE1&quot;,   &quot;20000100&quot;);
vars.put(&quot;FECHA_INICIO_FACTURACION&quot;,  &quot;&quot;);
vars.put(&quot;PLAN_CLAVE&quot;,  &quot;PLN_TES100&quot;);
vars.put(&quot;TAR_CLAVE&quot;,  &quot;TAR0000100&quot;);
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;P_RETURN_CODE&quot;,  &quot;-1&quot;); // Inicializando valor</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
delete from csto_abo_consumo where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
delete from umbral_tipo_llamada 
where SER_CLAVE = ${SER_CLAVE1} and USU_REG = &apos;CAMN9999&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de los servicios de umbral - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
delete from servicio where SER_CLAVE = ${SER_CLAVE1};
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando servicio de umbral en el catalogo de productos - servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,`SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,
                       `SER_ASOCIADO`,`SER_COMERC`,`SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,`TIPO_SERVICIO`,
                       `DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,`FECHA_DESACTIVACION`,`ID_MOD_ALT`,
                       `SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,`MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,`FEC_REG`,
                       `FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,`SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`)
              values (${SER_CLAVE1},&apos;Servicio Test umbral x&apos;,0,0,1,0,0,1,&apos;null&apos;,1,1,&apos;null&apos;,&apos;null&apos;,0,1,&apos;TAR&apos;,0,0,&apos;2010-01-01 00:00:00&apos;,
                      &apos;9999-01-01 00:00:00&apos;,&apos;9999-01-01 00:00:00&apos;,0,1,&apos;COM&apos;,&apos;null&apos;,&apos;MX&apos;,&apos;0&apos;,0,&apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),
                      now(),&apos;VOZ&apos;,0,1,2,1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">insert into
`umbral_tipo_llamada`(`PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`,`UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,
        `POR_CUENTA`,`UMBRAL_LC`,`USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`SER_CLAVE`,GRUPO_TLL_CLAVE_UMBRAL)
values (&apos;&apos;,0,0,0,3000,0,0,0,0,0,&apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),now(),${SER_CLAVE1},4);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando servicios en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">INSERT INTO`csto_abo_consumo`(`ABO_CLIENTE`,
                              `ABO_MDN`,
                              `ABO_GPO_T`,
                              `ABO_CIC_CVE`,
                              `TLL_CLAVE`,
                              `GRUPO_CIUDAD`,
                              `GRUPO_PAIS`,
                              `LIM_CONSUMO`,
                              `CONSUMO`,
                              `CONSUMO_LC`,
                              `LIM_CONSUMO_EVENTO`,
                              `CONSUMO_EVENTO`,
                              `CONSUMO_EVENTO_LC`,
                              `LLAM_REG`,
                              `TIPO_COBRO`,
                              `TIPO_REG`,
                              `SER_CLAVE`,
                              `PRECIO_ALT`,
                              `USU_MOD`,
                              `USU_REG`,
                              `FEC_MOD`,
                              `FEC_REG`,
                              `CONSUMO_ANT`,
                              `CONSUMO_EVENTO_ANT`,
                              `ESTATUS`,
                              `UMBRAL_LC`,
	 GRUPO_TLL_CLAVE_UMBRAL)
    VALUES (&apos;${CLI_CLIENTE}&apos;,
            &apos;${ABO_MDN}&apos;,
            &apos;COM&apos;,
            1,
            0,
            0,
            0,
            3000,
            3000,
            3000,
            0,
            0,
            0,
            0,
            0,
            &apos;C&apos;,
            &apos;${SER_CLAVE1}&apos;,
            0,
            &apos;CAMN9999&apos;,
            &apos;CAMN9999&apos;,
            now(),
            now(),
            0,
            0,
            1,
            0,
            4);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Validando la tabla csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">
select SER_CLAVE
from csto_abo_consumo 
where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos; and ABO_MDN = &apos;${ABO_MDN}&apos; and SER_CLAVE = ${SER_CLAVE1} and ESTATUS = 0;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">SER_CLAVE1</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Verifiando informaci칩n en csto_abo_consumo con los filtros correspondientes" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1025380323">${SER_CLAVE1}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">SER_CLAVE1_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="101. Se solicita la desactivaci칩n de un umbral(por medio de un servicio de umbral) en la tabla &quot;csto_abo_consumo&quot;, el umbral configurado en la tabla &quot;umbral_tipo_llamada&quot; para el servicio enviado tiene las siguientes caracterisiticas: Es a nivel cuenta (POR_CUENTA=1)  y esta configurado por grupo de tipo de llamada umbral(GRUPO_TLL_CLAVE_UMBRAL&gt;0)." enabled="true">
              <stringProp name="dataSource">POOL_MBS</stringProp>
              <stringProp name="query">
call sp_CancelaInCsto_Abo_Consumo_From_Abonado_COM(?,?,?,?);    
</stringProp>
              <stringProp name="queryArguments">${CLI_CLIENTE},${ABO_MDN},${SER_CLAVE1},0</stringProp>
              <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,OUT INTEGER</stringProp>
              <stringProp name="queryType">Callable Statement</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">P_RETURN_CODE</stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Establecer variables de la prueba" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">true</boolProp>
                <stringProp name="script">vars.put(&quot;CLI_CLIENTE&quot;, &quot;99000101&quot;);
vars.put(&quot;ABO_MDN&quot;,     &quot;5599000101&quot;);
vars.put(&quot;SER_CLAVE1&quot;,   &quot;20000101&quot;);
vars.put(&quot;FECHA_INICIO_FACTURACION&quot;,  &quot;&quot;);
vars.put(&quot;PLAN_CLAVE&quot;,  &quot;PLN_TES101&quot;);
vars.put(&quot;TAR_CLAVE&quot;,  &quot;TAR0000101&quot;);
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
vars.put(&quot;P_RETURN_CODE&quot;,  &quot;-1&quot;); // Inicializando valor</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
delete from csto_abo_consumo where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos;;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
delete from umbral_tipo_llamada 
where SER_CLAVE = ${SER_CLAVE1} and USU_REG = &apos;CAMN9999&apos;;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de los servicios de umbral - servicio" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">
delete from servicio where SER_CLAVE = ${SER_CLAVE1};
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando servicio de umbral en el catalogo de productos - servicio - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,`SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,
                       `SER_ASOCIADO`,`SER_COMERC`,`SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,`TIPO_SERVICIO`,
                       `DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,`FECHA_DESACTIVACION`,`ID_MOD_ALT`,
                       `SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,`MONEDA`,`MOV_ASIG`,`MOV_CAN`,`USU_REG`,`USU_MOD`,`FEC_REG`,
                       `FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,`SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`)
              values (${SER_CLAVE1},&apos;Servicio Test umbral x&apos;,0,0,1,0,0,1,&apos;null&apos;,1,1,&apos;null&apos;,&apos;null&apos;,0,1,&apos;TAR&apos;,0,0,&apos;2010-01-01 00:00:00&apos;,
                      &apos;9999-01-01 00:00:00&apos;,&apos;9999-01-01 00:00:00&apos;,0,1,&apos;COM&apos;,&apos;null&apos;,&apos;MX&apos;,&apos;0&apos;,0,&apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),
                      now(),&apos;VOZ&apos;,0,1,2,1,0,0);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">insert into
`umbral_tipo_llamada`(`PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`,`UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,
        `POR_CUENTA`,`UMBRAL_LC`,`USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`SER_CLAVE`,GRUPO_TLL_CLAVE_UMBRAL)
values (&apos;&apos;,0,0,0,3000,0,0,0,1,0,&apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),now(),${SER_CLAVE1},4);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando servicios en csto_abo_consumo - Primero" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">INSERT INTO`csto_abo_consumo`(`ABO_CLIENTE`,
                              `ABO_MDN`,
                              `ABO_GPO_T`,
                              `ABO_CIC_CVE`,
                              `TLL_CLAVE`,
                              `GRUPO_CIUDAD`,
                              `GRUPO_PAIS`,
                              `LIM_CONSUMO`,
                              `CONSUMO`,
                              `CONSUMO_LC`,
                              `LIM_CONSUMO_EVENTO`,
                              `CONSUMO_EVENTO`,
                              `CONSUMO_EVENTO_LC`,
                              `LLAM_REG`,
                              `TIPO_COBRO`,
                              `TIPO_REG`,
                              `SER_CLAVE`,
                              `PRECIO_ALT`,
                              `USU_MOD`,
                              `USU_REG`,
                              `FEC_MOD`,
                              `FEC_REG`,
                              `CONSUMO_ANT`,
                              `CONSUMO_EVENTO_ANT`,
                              `ESTATUS`,
                              `UMBRAL_LC`,
                               GRUPO_TLL_CLAVE_UMBRAL)
    VALUES (&apos;${CLI_CLIENTE}&apos;,
            &apos;ALL&apos;,
            &apos;COM&apos;,
            1,
            0,
            0,
            0,
            3000,
            3000,
            3000,
            0,
            0,
            0,
            0,
            0,
            &apos;C&apos;,
            &apos;${SER_CLAVE1}&apos;,
            0,
            &apos;CAMN9999&apos;,
            &apos;CAMN9999&apos;,
            now(),
            now(),
            0,
            0,
            1,
            0,
            4);</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames"></stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPreProcessor>
              <hashTree/>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Validando la tabla csto_abo_consumo" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">
select SER_CLAVE
from csto_abo_consumo 
where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos; and ABO_MDN = &apos;ALL&apos; and SER_CLAVE = ${SER_CLAVE1} and ESTATUS = 0;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">SER_CLAVE1</stringProp>
                <stringProp name="resultVariable"></stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Verifiando informaci칩n en csto_abo_consumo con los filtros correspondientes" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1025380323">${SER_CLAVE1}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">SER_CLAVE1_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Controlador If - No hay BD disponible - Se comento por que se delegaran las notificaciones a otro componente" enabled="false">
          <stringProp name="TestPlan.comments">Si la BD esta disponible que continue con la ejecucion de los scripts</stringProp>
          <stringProp name="IfController.condition">${ESTATUS_BD_MBS}==0</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Notificacion por correo de indisponibilidad de BD de MBS" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <SmtpSampler guiclass="SmtpSamplerGui" testclass="SmtpSampler" testname="SMTP - Notificacion por correo del error" enabled="true">
              <stringProp name="SMTPSampler.server">172.16.3.9</stringProp>
              <stringProp name="SMTPSampler.serverPort">25</stringProp>
              <stringProp name="SMTPSampler.mailFrom">pruebas_SPs_umbrales@control</stringProp>
              <stringProp name="SMTPSampler.replyTo"></stringProp>
              <stringProp name="SMTPSampler.receiverTo">nelson.castelar@maxcom.com</stringProp>
              <stringProp name="SMTPSampler.receiverCC"></stringProp>
              <stringProp name="SMTPSampler.receiverBCC"></stringProp>
              <stringProp name="SMTPSampler.subject">Error al ejecutar las pruebas de los SPs de Umbral</stringProp>
              <stringProp name="SMTPSampler.suppressSubject">false</stringProp>
              <stringProp name="SMTPSampler.include_timestamp">false</stringProp>
              <stringProp name="SMTPSampler.message">Ocurrio un error al intentar realizar la conexion con la BD MBS.

Para mas informaci칩n abrir la siguiente URL:

http://localhost:8080/jenkins/job/Umbrales2/

http://localhost:8080/jenkins/job/Umbrales2/lastBuild/performance/</stringProp>
              <stringProp name="SMTPSampler.plainBody">false</stringProp>
              <stringProp name="SMTPSampler.attachFile"></stringProp>
              <stringProp name="SMTPSampler.useSSL">false</stringProp>
              <stringProp name="SMTPSampler.useStartTLS">false</stringProp>
              <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
              <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
              <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
              <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
              <boolProp name="SMTPSampler.use_eml">false</boolProp>
              <stringProp name="SMTPSampler.emlMessageToSend"></stringProp>
              <stringProp name="SMTPSampler.useAuth">false</stringProp>
              <stringProp name="SMTPSampler.password"></stringProp>
              <stringProp name="SMTPSampler.username"></stringProp>
              <stringProp name="SMTPSampler.messageSizeStatistics">false</stringProp>
              <stringProp name="SMTPSampler.enableDebug">false</stringProp>
              <collectionProp name="SMTPSampler.headerFields"/>
            </SmtpSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Umbrales - Procedimientos" enabled="false">
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Pruebas de procedimientos de BD" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Activacion de un servicio de umbral " enabled="true">
              <stringProp name="TestPlan.comments">Se simula la ejecuci칩n del procedimiento de BD que es ejecutado cuando el estatus del abonado cambia de desactivo a activo.</stringProp>
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="1. Se envia un servicio de tipo umbral, pero este no esta configurado en umbral_tipo_llamada" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="query">
call MBS.sp_Update_in_CstoAboCon_from_Abonado_COM (?,?,?,?,?,?);</stringProp>
                <stringProp name="queryArguments">${CLI_CLIENTE},${ABO_MDN},COM,1,${SER_CLAVE1},0</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,INTEGER,VARCHAR,INTEGER</stringProp>
                <stringProp name="queryType">Callable Statement</stringProp>
                <stringProp name="resultVariable">p_return_code</stringProp>
                <stringProp name="variableNames"></stringProp>
              </JDBCSampler>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Establecer variables de la prueba" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">true</boolProp>
                  <stringProp name="script">vars.put(&quot;ID_ORDEN&quot;,    &quot;ID-70000102&quot;);
vars.put(&quot;CLI_CLIENTE&quot;, &quot;70000102&quot;);
vars.put(&quot;ABO_MDN&quot;,     &quot;5570000102&quot;);
vars.put(&quot;SER_CLAVE1&quot;,   &quot;970000102&quot;);
vars.put(&quot;FECHA_INICIO_FACTURACION&quot;,  &quot;&quot;);
vars.put(&quot;PLAN_CLAVE&quot;,  &quot;PLAN00102&quot;);
vars.put(&quot;TAR_CLAVE&quot;,  &quot;TAR0000102&quot;);
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">
delete from csto_abo_consumo where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos;;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">
delete from umbral_tipo_llamada 
where SER_CLAVE = ${SER_CLAVE1} and USU_REG = &apos;CAMN9999&apos;;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de servicios del cliente y abonado correspondiente - serv_usu" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">
delete from serv_usu where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos; and ABO_MDN = &apos;${ABO_MDN}&apos;;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de los servicios del abonado - servicio" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">
delete from servicio where SER_CLAVE = ${SER_CLAVE1};</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando servicio de umbral en el catalogo de productos - servicio - Primero" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,`SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,
                       `SER_ASOCIADO`,`SER_COMERC`,`SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,`TIPO_SERVICIO`,
                       `DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,`FECHA_DESACTIVACION`,`ID_MOD_ALT`,
                       `SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,`MONEDA`,`MOV_ASIG`,`SER_REL_FINA_REC_TEL`,`USU_REG`,`USU_MOD`,`FEC_REG`,
                       `FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,`SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`,`TLL_CLAVE`,
                       `DESVOL_CLAVE`,`TIPO_TARIFA`)
              values (${SER_CLAVE1},&apos;Servicio Test umbral x&apos;,0,0,1,0,0,1,&apos;null&apos;,1,1,&apos;null&apos;,&apos;null&apos;,0,1,&apos;TAR&apos;,0,0,&apos;2010-01-01 00:00:00&apos;,
                      &apos;9999-01-01 00:00:00&apos;,&apos;9999-01-01 00:00:00&apos;,0,1,&apos;COM&apos;,&apos;null&apos;,&apos;MX&apos;,&apos;0&apos;,0,&apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),
                      now(),&apos;VOZ&apos;,0,1,2,1,0,0,0,null,1);
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Validando la tabla csto_abo_consumo" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">
select count(*)
from csto_abo_consumo 
where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos; and SER_CLAVE = ${SER_CLAVE1} and ESTATUS = 1;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">NUM_REG</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Verificar que aun existe un servicio activo en serv_usu" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="48">0</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">NUM_REG_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="2. Se envia un servicio de umbral a nivel de abonado ( POR_CUENTA=0)  si esta configurado en umbral_tipo_llamada" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="query">
call MBS.sp_Update_in_CstoAboCon_from_Abonado_COM (?,?,?,?,?,?);</stringProp>
                <stringProp name="queryArguments">${CLI_CLIENTE},${ABO_MDN},COM,1,${SER_CLAVE1},0</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,INTEGER,VARCHAR,INTEGER</stringProp>
                <stringProp name="queryType">Callable Statement</stringProp>
                <stringProp name="resultVariable">p_return_code</stringProp>
                <stringProp name="variableNames"></stringProp>
              </JDBCSampler>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Establecer variables de la prueba" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">true</boolProp>
                  <stringProp name="script">vars.put(&quot;ID_ORDEN&quot;,    &quot;ID-70000101&quot;);
vars.put(&quot;CLI_CLIENTE&quot;, &quot;70000101&quot;);
vars.put(&quot;ABO_MDN&quot;,     &quot;5570000101&quot;);
vars.put(&quot;SER_CLAVE1&quot;,   &quot;970000101&quot;);
vars.put(&quot;FECHA_INICIO_FACTURACION&quot;,  &quot;&quot;);
vars.put(&quot;PLAN_CLAVE&quot;,  &quot;PLAN00101&quot;);
vars.put(&quot;TAR_CLAVE&quot;,  &quot;TAR0000101&quot;);
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">
delete from csto_abo_consumo where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos;;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">
delete from umbral_tipo_llamada 
where SER_CLAVE = ${SER_CLAVE1} and USU_REG = &apos;CAMN9999&apos;;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de servicios del cliente y abonado correspondiente - serv_usu" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">
delete from serv_usu where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos; and ABO_MDN = &apos;${ABO_MDN}&apos;;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de los servicios del abonado - servicio" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">
delete from servicio where SER_CLAVE = ${SER_CLAVE1};</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando servicio de umbral en el catalogo de productos - servicio - Primero" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,`SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,
                       `SER_ASOCIADO`,`SER_COMERC`,`SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,`TIPO_SERVICIO`,
                       `DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,`FECHA_DESACTIVACION`,`ID_MOD_ALT`,
                       `SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,`MONEDA`,`MOV_ASIG`,`SER_REL_FINA_REC_TEL`,`USU_REG`,`USU_MOD`,`FEC_REG`,
                       `FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,`SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`,`TLL_CLAVE`,
                       `DESVOL_CLAVE`,`TIPO_TARIFA`)
              values (${SER_CLAVE1},&apos;Servicio Test umbral x&apos;,0,0,1,0,0,1,&apos;null&apos;,1,1,&apos;null&apos;,&apos;null&apos;,0,1,&apos;TAR&apos;,0,0,&apos;2010-01-01 00:00:00&apos;,
                      &apos;9999-01-01 00:00:00&apos;,&apos;9999-01-01 00:00:00&apos;,0,1,&apos;COM&apos;,&apos;null&apos;,&apos;MX&apos;,&apos;0&apos;,0,&apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),
                      now(),&apos;VOZ&apos;,0,1,2,1,0,0,0,null,1);
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">insert into
`umbral_tipo_llamada`(`PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`,`UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,
        `POR_CUENTA`,`UMBRAL_LC`,`USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`SER_CLAVE`,GRUPO_TLL_CLAVE_UMBRAL)
values (&apos;&apos;,0,0,4,1,3000,0,0,0,0,&apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),now(),${SER_CLAVE1},0);</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Validando la tabla csto_abo_consumo" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">
select count(*)
from csto_abo_consumo 
where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos; and ABO_MDN = &apos;${ABO_MDN}&apos; and SER_CLAVE = ${SER_CLAVE1} and ESTATUS = 1;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">NUM_REG</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Verificar que aun existe un servicio activo en serv_usu" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49">1</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">NUM_REG_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="3. Se envia un servicio de umbral a nivel de cuenta ( POR_CUENTA=1)  si esta configurado en umbral_tipo_llamada" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="query">
call MBS.sp_Update_in_CstoAboCon_from_Abonado_COM (?,?,?,?,?,?);</stringProp>
                <stringProp name="queryArguments">${CLI_CLIENTE},${ABO_MDN},COM,1,${SER_CLAVE1},0</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,INTEGER,VARCHAR,INTEGER</stringProp>
                <stringProp name="queryType">Callable Statement</stringProp>
                <stringProp name="resultVariable">p_return_code</stringProp>
                <stringProp name="variableNames"></stringProp>
              </JDBCSampler>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Establecer variables de la prueba" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">true</boolProp>
                  <stringProp name="script">vars.put(&quot;ID_ORDEN&quot;,    &quot;ID-70000100&quot;);
vars.put(&quot;CLI_CLIENTE&quot;, &quot;70000100&quot;);
vars.put(&quot;ABO_MDN&quot;,     &quot;5570000100&quot;);
vars.put(&quot;SER_CLAVE1&quot;,   &quot;970000100&quot;);
vars.put(&quot;FECHA_INICIO_FACTURACION&quot;,  &quot;&quot;);
vars.put(&quot;PLAN_CLAVE&quot;,  &quot;PLAN00100&quot;);
vars.put(&quot;TAR_CLAVE&quot;,  &quot;TAR0000100&quot;);
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">
delete from csto_abo_consumo where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos;;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">
delete from umbral_tipo_llamada 
where SER_CLAVE = ${SER_CLAVE1} and USU_REG = &apos;CAMN9999&apos;;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de servicios del cliente y abonado correspondiente - serv_usu" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">
delete from serv_usu where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos; and ABO_MDN = &apos;${ABO_MDN}&apos;;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de los servicios del abonado - servicio" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">
delete from servicio where SER_CLAVE = ${SER_CLAVE1};</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando servicio de umbral en el catalogo de productos - servicio - Primero" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,`SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,
                       `SER_ASOCIADO`,`SER_COMERC`,`SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,`TIPO_SERVICIO`,
                       `DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,`FECHA_DESACTIVACION`,`ID_MOD_ALT`,
                       `SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,`MONEDA`,`MOV_ASIG`,`SER_REL_FINA_REC_TEL`,`USU_REG`,`USU_MOD`,`FEC_REG`,
                       `FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,`SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`,`TLL_CLAVE`,
                       `DESVOL_CLAVE`,`TIPO_TARIFA`)
              values (${SER_CLAVE1},&apos;Servicio Test umbral x&apos;,0,0,1,0,0,1,&apos;null&apos;,1,1,&apos;null&apos;,&apos;null&apos;,0,1,&apos;TAR&apos;,0,0,&apos;2010-01-01 00:00:00&apos;,
                      &apos;9999-01-01 00:00:00&apos;,&apos;9999-01-01 00:00:00&apos;,0,1,&apos;COM&apos;,&apos;null&apos;,&apos;MX&apos;,&apos;0&apos;,0,&apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),
                      now(),&apos;VOZ&apos;,0,1,2,1,0,0,0,null,1);
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">insert into
`umbral_tipo_llamada`(`PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`,`UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,
        `POR_CUENTA`,`UMBRAL_LC`,`USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`SER_CLAVE`,GRUPO_TLL_CLAVE_UMBRAL)
values (&apos;&apos;,0,0,4,1,3000,0,0,1,0,&apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),now(),${SER_CLAVE1},0);</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Validando la tabla csto_abo_consumo" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">
select count(*)
from csto_abo_consumo 
where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos; and ABO_MDN = &apos;ALL&apos; and SER_CLAVE = ${SER_CLAVE1} and ESTATUS = 1;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">NUM_REG</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Verificar que aun existe un servicio activo en serv_usu" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49">1</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">NUM_REG_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="4. Se envia un servicio de umbral que esta configurado con dos tipos de llamada en esta configurado en umbral_tipo_llamada, uno a nivel abonado y otro a nivel de cuenta ( POR_CUENTA=0 y POR_CUENTA=1) " enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="query">
call MBS.sp_Update_in_CstoAboCon_from_Abonado_COM (?,?,?,?,?,?);</stringProp>
                <stringProp name="queryArguments">${CLI_CLIENTE},${ABO_MDN},COM,1,${SER_CLAVE1},0</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,INTEGER,VARCHAR,INTEGER</stringProp>
                <stringProp name="queryType">Callable Statement</stringProp>
                <stringProp name="resultVariable">p_return_code</stringProp>
                <stringProp name="variableNames"></stringProp>
              </JDBCSampler>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Establecer variables de la prueba" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">true</boolProp>
                  <stringProp name="script">vars.put(&quot;ID_ORDEN&quot;,    &quot;ID-70000106&quot;);
vars.put(&quot;CLI_CLIENTE&quot;, &quot;70000106&quot;);
vars.put(&quot;ABO_MDN&quot;,     &quot;5570000106&quot;);
vars.put(&quot;SER_CLAVE1&quot;,   &quot;970000106&quot;);
vars.put(&quot;FECHA_INICIO_FACTURACION&quot;,  &quot;&quot;);
vars.put(&quot;PLAN_CLAVE&quot;,  &quot;PLAN00106&quot;);
vars.put(&quot;TAR_CLAVE&quot;,  &quot;TAR0000106&quot;);
vars.put(&quot;NUM_REG&quot;,  &quot;&quot;);
</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">
delete from csto_abo_consumo where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos;;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">
delete from umbral_tipo_llamada 
where SER_CLAVE = ${SER_CLAVE1} and USU_REG = &apos;CAMN9999&apos;;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de servicios del cliente y abonado correspondiente - serv_usu" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">
delete from serv_usu where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos; and ABO_MDN = &apos;${ABO_MDN}&apos;;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de los servicios del abonado - servicio" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">
delete from servicio where SER_CLAVE = ${SER_CLAVE1};</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando servicio de umbral en el catalogo de productos - servicio - Primero" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,`SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,
                       `SER_ASOCIADO`,`SER_COMERC`,`SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,`TIPO_SERVICIO`,
                       `DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,`FECHA_DESACTIVACION`,`ID_MOD_ALT`,
                       `SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,`MONEDA`,`MOV_ASIG`,`SER_REL_FINA_REC_TEL`,`USU_REG`,`USU_MOD`,`FEC_REG`,
                       `FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,`SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`,`TLL_CLAVE`,
                       `DESVOL_CLAVE`,`TIPO_TARIFA`)
              values (${SER_CLAVE1},&apos;Servicio Test umbral x&apos;,0,0,1,0,0,1,&apos;null&apos;,1,1,&apos;null&apos;,&apos;null&apos;,0,1,&apos;TAR&apos;,0,0,&apos;2010-01-01 00:00:00&apos;,
                      &apos;9999-01-01 00:00:00&apos;,&apos;9999-01-01 00:00:00&apos;,0,1,&apos;COM&apos;,&apos;null&apos;,&apos;MX&apos;,&apos;0&apos;,0,&apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),
                      now(),&apos;VOZ&apos;,0,1,2,1,0,0,0,null,1);
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">insert into
`umbral_tipo_llamada`(`PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`,`UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,
        `POR_CUENTA`,`UMBRAL_LC`,`USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`SER_CLAVE`,GRUPO_TLL_CLAVE_UMBRAL)
values (&apos;&apos;,0,0,4,1,3000,0,0,0,0,&apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),now(),${SER_CLAVE1},0);</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Segundo" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">insert into
`umbral_tipo_llamada`(`PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`,`UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,
        `POR_CUENTA`,`UMBRAL_LC`,`USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`SER_CLAVE`,GRUPO_TLL_CLAVE_UMBRAL)
values (&apos;&apos;,0,0,89,1,3000,0,0,1,0,&apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),now(),${SER_CLAVE1},0);</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Validando la tabla csto_abo_consumo" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">
select 
(
select count(*)
from csto_abo_consumo 
where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos; and ABO_MDN = &apos;ALL&apos; and SER_CLAVE = ${SER_CLAVE1} 
    and ESTATUS = 1  and TLL_CLAVE = 89
)
+
(
select count(*)
from csto_abo_consumo 
where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos; and ABO_MDN = &apos;${ABO_MDN}&apos;  and SER_CLAVE = ${SER_CLAVE1} 
    and ESTATUS = 1 and TLL_CLAVE = 4
);</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">NUM_REG</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Verificar que aun existe un servicio activo en serv_usu" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="50">2</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">NUM_REG_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Desactivacion de un servicio de umbral" enabled="true">
              <stringProp name="TestPlan.comments">Se simula la ejecuci칩n del procedimiento de BD que es ejecutado cuando el estatus del abonado cambia de activo a desactivo.</stringProp>
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="5. Se desactiva servicio de umbral a nivel de abonado" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="query">
call sp_CancelaInCsto_Abo_Consumo_From_Abonado_COM(?,?,?,?);    
</stringProp>
                <stringProp name="queryArguments">${CLI_CLIENTE},${ABO_MDN},${SER_CLAVE1},0</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,INTEGER</stringProp>
                <stringProp name="queryType">Callable Statement</stringProp>
                <stringProp name="resultVariable">p_return_code</stringProp>
                <stringProp name="variableNames"></stringProp>
              </JDBCSampler>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Establecer variables de la prueba" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">true</boolProp>
                  <stringProp name="script">vars.put(&quot;ID_ORDEN&quot;,    &quot;ID-70000104&quot;);
vars.put(&quot;CLI_CLIENTE&quot;, &quot;70000104&quot;);
vars.put(&quot;ABO_MDN&quot;,     &quot;5570000104&quot;);
vars.put(&quot;SER_CLAVE1&quot;,   &quot;970000104&quot;);
vars.put(&quot;FECHA_INICIO_FACTURACION&quot;,  &quot;&quot;);
vars.put(&quot;PLAN_CLAVE&quot;,  &quot;PLAN00104&quot;);
vars.put(&quot;TAR_CLAVE&quot;,  &quot;TAR0000104&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">
delete from csto_abo_consumo where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos;;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">
delete from umbral_tipo_llamada 
where SER_CLAVE = ${SER_CLAVE1} and USU_REG = &apos;CAMN9999&apos;;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de servicios del cliente y abonado correspondiente - serv_usu" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">
delete from serv_usu where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos; and ABO_MDN = &apos;${ABO_MDN}&apos;;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de los servicios de umbral - servicio" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">
delete from servicio where SER_CLAVE = ${SER_CLAVE1};
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando servicio de umbral en el catalogo de productos - servicio - Primero" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,`SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,
                       `SER_ASOCIADO`,`SER_COMERC`,`SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,`TIPO_SERVICIO`,
                       `DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,`FECHA_DESACTIVACION`,`ID_MOD_ALT`,
                       `SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,`MONEDA`,`MOV_ASIG`,`SER_REL_FINA_REC_TEL`,`USU_REG`,`USU_MOD`,`FEC_REG`,
                       `FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,`SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`,`TLL_CLAVE`,
                       `DESVOL_CLAVE`,`TIPO_TARIFA`)
              values (${SER_CLAVE1},&apos;Servicio Test umbral x&apos;,0,0,1,0,0,1,&apos;null&apos;,1,1,&apos;null&apos;,&apos;null&apos;,0,1,&apos;TAR&apos;,0,0,&apos;2010-01-01 00:00:00&apos;,
                      &apos;9999-01-01 00:00:00&apos;,&apos;9999-01-01 00:00:00&apos;,0,1,&apos;COM&apos;,&apos;null&apos;,&apos;MX&apos;,&apos;0&apos;,0,&apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),
                      now(),&apos;VOZ&apos;,0,1,2,1,0,0,0,null,1);</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando primer servicio de umbral en serv_usu para el cliente 70000104  - Con estatus activado" enabled="false">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">insert into serv_usu(`SER_CLAVE`,`PER_ANO`,`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`PER_CLAVE`,`ABO_CIC_CVE`,
`SER_PER_VIDA`,`SEU_FEC_ACT`,`SEU_FEC_FIN`,`SEU_FEC_DES`,`SEU_CONT`,`SEU_TIP_SER`,`SER_CST`,`MONEDA`,
`SER_ASOCIADO`,`CANT_LINEAS`,`TOT_CST`,`TOT_DESC`,`TLL_CLAVE`,`USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,
`ORDEN_APROV`,`SW_PRORRATEO`,`CST_PRORRATEO`,`ITEM_SIEBEL`,`SERIE`,`STATUS`,`SER_PER_VIDA_SA`,`SEU_CONT_SA`,
`STATUS_SA`,`SW_IEPS`,`EVENTO`,`PROVEEDOR`,`SEU_FEC_ACT_SA`,`SEU_FEC_FIN_SA`,`SEU_FEC_DES_SA`,SW_UMBRAL)
values (${SER_CLAVE1},2012,&apos;${CLI_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,11,1,99999,now(),now(),now(),0,&apos;TAR&apos;,33.99,&apos;MX&apos;,
0,1,0.0,0,0,&apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),now(),&apos; &apos;,0,0,&apos;&apos;,&apos;&apos;,1,0,0,0,0,&apos;&apos;,&apos;&apos;,now(),now(),now(),1);</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">insert into
`umbral_tipo_llamada`(`PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`,`UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,
        `POR_CUENTA`,`UMBRAL_LC`,`USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`SER_CLAVE`,GRUPO_TLL_CLAVE_UMBRAL)
values (&apos;&apos;,0,0,1,1,3000,0,0,0,0,&apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),now(),${SER_CLAVE1},0);</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando servicios en csto_abo_consumo - Primero" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">INSERT INTO`csto_abo_consumo`(`ABO_CLIENTE`,
                              `ABO_MDN`,
                              `ABO_GPO_T`,
                              `ABO_CIC_CVE`,
                              `TLL_CLAVE`,
                              `GRUPO_CIUDAD`,
                              `GRUPO_PAIS`,
                              `LIM_CONSUMO`,
                              `CONSUMO`,
                              `CONSUMO_LC`,
                              `LIM_CONSUMO_EVENTO`,
                              `CONSUMO_EVENTO`,
                              `CONSUMO_EVENTO_LC`,
                              `LLAM_REG`,
                              `TIPO_COBRO`,
                              `TIPO_REG`,
                              `SER_CLAVE`,
                              `PRECIO_ALT`,
                              `USU_MOD`,
                              `USU_REG`,
                              `FEC_MOD`,
                              `FEC_REG`,
                              `CONSUMO_ANT`,
                              `CONSUMO_EVENTO_ANT`,
                              `ESTATUS`,
                              `UMBRAL_LC`,
	 GRUPO_TLL_CLAVE_UMBRAL)
    VALUES (&apos;${CLI_CLIENTE}&apos;,
            &apos;${ABO_MDN}&apos;,
            &apos;COM&apos;,
            1,
            1,
            0,
            0,
            1,
            1,
            1,
            3000,
            3000,
            3000,
            0,
            0,
            &apos;C&apos;,
            &apos;${SER_CLAVE1}&apos;,
            0,
            &apos;CAMN9999&apos;,
            &apos;CAMN9999&apos;,
            now(),
            now(),
            0,
            0,
            1,
            0,
            0);</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Validando la tabla csto_abo_consumo" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">
select SER_CLAVE
from csto_abo_consumo 
where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos; and ABO_MDN = &apos;${ABO_MDN}&apos; and SER_CLAVE = ${SER_CLAVE1} and ESTATUS = 0;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">SER_CLAVE1</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Verificar que aun existe un servicio activo en serv_usu" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1025380323">${SER_CLAVE1}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">SER_CLAVE1_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="6. Se desactiva servicio de umbral a nivel de cuenta (POR_CUENTA=1)  -&gt; ABO_MDN = &apos;ALL&apos;" enabled="true">
                <stringProp name="dataSource">POOL_MBS</stringProp>
                <stringProp name="query">
call sp_CancelaInCsto_Abo_Consumo_From_Abonado_COM(?,?,?,?);    
</stringProp>
                <stringProp name="queryArguments">${CLI_CLIENTE},${ABO_MDN},${SER_CLAVE1},0</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR,VARCHAR,INTEGER</stringProp>
                <stringProp name="queryType">Callable Statement</stringProp>
                <stringProp name="resultVariable">p_return_code</stringProp>
                <stringProp name="variableNames"></stringProp>
              </JDBCSampler>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor - Establecer variables de la prueba" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">true</boolProp>
                  <stringProp name="script">vars.put(&quot;ID_ORDEN&quot;,    &quot;ID-70000105&quot;);
vars.put(&quot;CLI_CLIENTE&quot;, &quot;70000105&quot;);
vars.put(&quot;ABO_MDN&quot;,     &quot;5570000105&quot;);
vars.put(&quot;SER_CLAVE1&quot;,   &quot;970000105&quot;);
vars.put(&quot;FECHA_INICIO_FACTURACION&quot;,  &quot;&quot;);
vars.put(&quot;PLAN_CLAVE&quot;,  &quot;PLAN00105&quot;);
vars.put(&quot;TAR_CLAVE&quot;,  &quot;TAR0000105&quot;);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion umbrales del cliente - csto_abo_consumo" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">
delete from csto_abo_consumo where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos;;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de la configuracion de umbrales - umbral_tipo_llamada" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">
delete from umbral_tipo_llamada 
where SER_CLAVE = ${SER_CLAVE1} and USU_REG = &apos;CAMN9999&apos;;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de servicios del cliente y abonado correspondiente - serv_usu" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">
delete from serv_usu where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos; and ABO_MDN = &apos;${ABO_MDN}&apos;;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Depurando informacion de los servicios de umbral - servicio" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">
delete from servicio where SER_CLAVE = ${SER_CLAVE1};
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando servicio de umbral en el catalogo de productos - servicio - Primero" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">insert into servicio(`SER_CLAVE`,`DESCRIPCION`,`SER_PREPAGO`,`SER_CST`,`SER_AFECTA`,`SER_USO_SW`,`SER_OI_SW`,`SER_PER_VIDA`,
                       `SER_ASOCIADO`,`SER_COMERC`,`SER_IMPRIME`,`HOR_CLAVE`,`COMANDOSW`,`SER_2DOMDN`,`SER_PERFIL`,`TIPO_SERVICIO`,
                       `DESCUENTO_MONTO`,`DESCUENTO_PORCENTAJE`,`FECHA_ACTIVACION`,`FECHA_FIN`,`FECHA_DESACTIVACION`,`ID_MOD_ALT`,
                       `SW_FRECUENCIA`,`GRUPO`,`PLN_CLAVE`,`MONEDA`,`MOV_ASIG`,`SER_REL_FINA_REC_TEL`,`USU_REG`,`USU_MOD`,`FEC_REG`,
                       `FEC_MOD`,`SER_TIPO`,`SW_PRORRATEO`,`STATUS`,`SW_NIVEL`,`VERSION`,`SER_DUPLICADO`,`CARGO_MISC`,`TLL_CLAVE`,
                       `DESVOL_CLAVE`,`TIPO_TARIFA`)
              values (${SER_CLAVE1},&apos;Servicio Test umbral x&apos;,0,0,1,0,0,1,&apos;null&apos;,1,1,&apos;null&apos;,&apos;null&apos;,0,1,&apos;TAR&apos;,0,0,&apos;2010-01-01 00:00:00&apos;,
                      &apos;9999-01-01 00:00:00&apos;,&apos;9999-01-01 00:00:00&apos;,0,1,&apos;COM&apos;,&apos;null&apos;,&apos;MX&apos;,&apos;0&apos;,0,&apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),
                      now(),&apos;VOZ&apos;,0,1,2,1,0,0,0,null,1);</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando primer servicio de umbral en serv_usu para el cliente 70000104  - Con estatus activado" enabled="false">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">insert into serv_usu(`SER_CLAVE`,`PER_ANO`,`ABO_CLIENTE`,`ABO_MDN`,`NUM_TRONCAL`,`PER_CLAVE`,`ABO_CIC_CVE`,
`SER_PER_VIDA`,`SEU_FEC_ACT`,`SEU_FEC_FIN`,`SEU_FEC_DES`,`SEU_CONT`,`SEU_TIP_SER`,`SER_CST`,`MONEDA`,
`SER_ASOCIADO`,`CANT_LINEAS`,`TOT_CST`,`TOT_DESC`,`TLL_CLAVE`,`USU_REG`,`USU_MOD`,`FEC_REG`,`FEC_MOD`,
`ORDEN_APROV`,`SW_PRORRATEO`,`CST_PRORRATEO`,`ITEM_SIEBEL`,`SERIE`,`STATUS`,`SER_PER_VIDA_SA`,`SEU_CONT_SA`,
`STATUS_SA`,`SW_IEPS`,`EVENTO`,`PROVEEDOR`,`SEU_FEC_ACT_SA`,`SEU_FEC_FIN_SA`,`SEU_FEC_DES_SA`,SW_UMBRAL)
values (${SER_CLAVE1},2012,&apos;${CLI_CLIENTE}&apos;,&apos;${ABO_MDN}&apos;,0,11,1,99999,now(),now(),now(),0,&apos;TAR&apos;,33.99,&apos;MX&apos;,
0,1,0.0,0,0,&apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),now(),&apos; &apos;,0,0,&apos;&apos;,&apos;&apos;,1,0,0,0,0,&apos;&apos;,&apos;&apos;,now(),now(),now(),1);</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando configuracion de umbral en umbral_tipo_llamada - Primero" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">insert into
`umbral_tipo_llamada`(`PLN_CLAVE`,`GRUPO_CIUDAD`,`GRUPO_PAIS`,`TLL_CLAVE`,`UMBRAL`,`UMBRAL_EVENTO`,`TIPO_COBRO`,`STATUS_COBRO`,
        `POR_CUENTA`,`UMBRAL_LC`,`USU_MOD`,`USU_REG`,`FEC_MOD`,`FEC_REG`,`SER_CLAVE`,GRUPO_TLL_CLAVE_UMBRAL)
values (&apos;&apos;,0,0,4,1,3000,0,0,1,0,&apos;CAMN9999&apos;,&apos;CAMN9999&apos;,now(),now(),${SER_CLAVE1},10);</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="Creando servicios en csto_abo_consumo - Primero" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">INSERT INTO`csto_abo_consumo`(`ABO_CLIENTE`,
                              `ABO_MDN`,
                              `ABO_GPO_T`,
                              `ABO_CIC_CVE`,
                              `TLL_CLAVE`,
                              `GRUPO_CIUDAD`,
                              `GRUPO_PAIS`,
                              `LIM_CONSUMO`,
                              `CONSUMO`,
                              `CONSUMO_LC`,
                              `LIM_CONSUMO_EVENTO`,
                              `CONSUMO_EVENTO`,
                              `CONSUMO_EVENTO_LC`,
                              `LLAM_REG`,
                              `TIPO_COBRO`,
                              `TIPO_REG`,
                              `SER_CLAVE`,
                              `PRECIO_ALT`,
                              `USU_MOD`,
                              `USU_REG`,
                              `FEC_MOD`,
                              `FEC_REG`,
                              `CONSUMO_ANT`,
                              `CONSUMO_EVENTO_ANT`,
                              `ESTATUS`,
                              `UMBRAL_LC`,
                               GRUPO_TLL_CLAVE_UMBRAL)
    VALUES (&apos;${CLI_CLIENTE}&apos;,
            &apos;ALL&apos;,
            &apos;COM&apos;,
            1,
            4,
            0,
            0,
            1,
            1,
            1,
            3000,
            3000,
            3000,
            0,
            0,
            &apos;C&apos;,
            &apos;${SER_CLAVE1}&apos;,
            0,
            &apos;CAMN9999&apos;,
            &apos;CAMN9999&apos;,
            now(),
            now(),
            0,
            0,
            1,
            0,
            10);</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames"></stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPreProcessor>
                <hashTree/>
                <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="Validando la tabla csto_abo_consumo" enabled="true">
                  <stringProp name="dataSource">POOL_MBS</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">
select SER_CLAVE
from csto_abo_consumo 
where ABO_CLIENTE = &apos;${CLI_CLIENTE}&apos; and ABO_MDN = &apos;ALL&apos; and SER_CLAVE = ${SER_CLAVE1} and ESTATUS = 0;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">SER_CLAVE1</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                </JDBCPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Aserci칩n de Respuesta - Verificar que aun existe un servicio activo en serv_usu" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1025380323">${SER_CLAVE1}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">SER_CLAVE1_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Gr치fico" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="Configuracion del pool de BD MBS" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">60000</stringProp>
        <stringProp name="dataSource">POOL_MBS</stringProp>
        <stringProp name="dbUrl">XXXXXX</stringProp>
        <stringProp name="driver">XXXXXX</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">XXXXXX</stringProp>
        <stringProp name="poolMax">1</stringProp>
        <stringProp name="timeout">60</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">XXXXXX</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="Configuracion del pool de BD MBSTUNING - Por si se desea apuntar a otra BD para las pruebas" enabled="false">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">60000</stringProp>
        <stringProp name="dataSource">POOL_MBS</stringProp>
        <stringProp name="dbUrl">XXXXXX</stringProp>
        <stringProp name="driver">XXXXXX</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">XXXXXX</stringProp>
        <stringProp name="poolMax">1</stringProp>
        <stringProp name="timeout">60</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">XXXXXX</stringProp>
      </JDBCDataSource>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
